{
  "address": "0x33B7cdB39fE9bFe4fA71A3C1983bDF59B1138a09",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "active",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dealer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dealer",
          "type": "address"
        },
        {
          "internalType": "contract ILockingPool",
          "name": "_lockingPool",
          "type": "address"
        },
        {
          "internalType": "contract ILockingInfo",
          "name": "_lockingInfo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_metis",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencerSigner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signerPubKey",
          "type": "bytes"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockingInfo",
      "outputs": [
        {
          "internalType": "contract ILockingInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockingPool",
      "outputs": [
        {
          "internalType": "contract ILockingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metis",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "relock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "activationBatch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedBatch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deactivationBatch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deactivationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockClaimTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            }
          ],
          "internalType": "struct ILockingPool.SequencerData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "l2Gas",
          "type": "uint32"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "l2Gas",
          "type": "uint32"
        }
      ],
      "name": "unlockClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "l2Gas",
          "type": "uint32"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x00604562ebccc68127a984dd9231076fb6d7c6d02e552c57b0b49d443f9d1699",
  "receipt": {
    "to": null,
    "from": "0xc3BD53e8BB7F5a8f98C565aad28C9b618c84D8Fa",
    "contractAddress": "0x33B7cdB39fE9bFe4fA71A3C1983bDF59B1138a09",
    "transactionIndex": 53,
    "gasUsed": "1733641",
    "logsBloom": "0x
    "blockHash": "0xbe900e1fceb9c30e40d5118663b018048b249dcdab2ab57b97353db9c6f9f122",
    "transactionHash": "0x00604562ebccc68127a984dd9231076fb6d7c6d02e552c57b0b49d443f9d1699",
    "logs": [],
    "blockNumber": 6970649,
    "cumulativeGasUsed": "7297890",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1d2e5e355cd89d01ed8db67fc6ce5869",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dealer\",\"type\":\"address\"},{\"internalType\":\"contract ILockingPool\",\"name\":\"_lockingPool\",\"type\":\"address\"},{\"internalType\":\"contract ILockingInfo\",\"name\":\"_lockingInfo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metis\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signerPubKey\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingInfo\",\"outputs\":[{\"internalType\":\"contract ILockingInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingPool\",\"outputs\":[{\"internalType\":\"contract ILockingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metis\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"internalType\":\"struct ILockingPool.SequencerData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"l2Gas\",\"type\":\"uint32\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"l2Gas\",\"type\":\"uint32\"}],\"name\":\"unlockClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"l2Gas\",\"type\":\"uint32\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SequencerAgent.sol\":\"SequencerAgent\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/SequencerAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interface/ILockingPool.sol\\\";\\nimport \\\"../interface/ILockingInfo.sol\\\";\\n\\ncontract SequencerAgent is ContextUpgradeable {\\n    address public dealer;\\n    ILockingPool public lockingPool;\\n    ILockingInfo public lockingInfo;\\n    IERC20 public metis;\\n    uint256 public sequencerId;\\n    address public sequencerSigner;\\n    bool public active;\\n\\n    modifier onlyDealer() {\\n        require(msg.sender == dealer, \\\"SequencerAgent: only dealer\\\");\\n        _;\\n    }\\n\\n    function initialize(address _dealer, ILockingPool _lockingPool, ILockingInfo _lockingInfo, address _metis) external initializer {\\n        dealer = _dealer;\\n        lockingPool = _lockingPool;\\n        lockingInfo = _lockingInfo;\\n        metis = IERC20(_metis);\\n    }\\n\\n    function lock(address _sequencerSigner, address _rewardRecipient, uint256 _amount, bytes memory _signerPubKey) public onlyDealer {\\n        require(sequencerId == 0, \\\"SequencerAgent: sequencer already locked\\\");\\n        require(_sequencerSigner != address(0) && _rewardRecipient != address(0), \\\"SequencerAgent: zero address\\\");\\n        require(_amount > 0, \\\"SequencerAgent: zero amount\\\");\\n\\n        sequencerSigner = _sequencerSigner;\\n        metis.approve(address(lockingInfo), type(uint256).max);\\n        lockingPool.lockWithRewardRecipient(sequencerSigner, _rewardRecipient, _amount, _signerPubKey);\\n        sequencerId = lockingPool.seqSigners(sequencerSigner);\\n        active = true;\\n    }\\n\\n    function relock(uint256 amount) public onlyDealer {\\n        lockingPool.relock(sequencerId, amount, true);\\n    }\\n\\n    function withdrawRewards(uint32 l2Gas) public onlyDealer {\\n        lockingPool.withdrawRewards(sequencerId, l2Gas);\\n    }\\n\\n    function sequencerData() public view returns (ILockingPool.SequencerData memory) {\\n        return lockingPool.sequencers(sequencerId);\\n    }\\n\\n    function unlock(uint32 l2Gas) public payable onlyDealer {\\n        lockingPool.unlock{value: msg.value}(sequencerId, l2Gas);\\n        active = false;\\n    }\\n\\n    function unlockClaim(uint32 l2Gas) public payable onlyDealer {\\n        lockingPool.unlockClaim{value: msg.value}(sequencerId, l2Gas);\\n        IERC20(metis).transfer(dealer, IERC20(metis).balanceOf(address(this)));\\n    }\\n}\",\"keccak256\":\"0xe9673f5dbd9cf1928a47f48b976298ddc584a2e46d256097c1c9aa0ba92114a6\",\"license\":\"MIT\"},\"interface/ILockingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ISequencerInfo} from \\\"./ISequencerInfo.sol\\\";\\n\\ninterface ILockingInfo {\\n    function minLock() external view returns(uint256);\\n    function maxLock() external view returns(uint256);\\n\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMinAmounts'\\n     * @param _newMinLock new min lock.\\n     */\\n    event SetMinLock(uint256 _newMinLock);\\n\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMaxAmounts'\\n     * @param _newMaxLock new max lock.\\n     */\\n    event SetMaxLock(uint256 _newMaxLock);\\n\\n    /**\\n     * @dev Emitted when the reward payer is changed\\n     * @param _payer new reward payer\\n     */\\n    event SetRewardPayer(address _payer);\\n\\n    /**\\n     * @dev Emitted when sequencer locks in '_lockFor()' in LockingPool.\\n     * @param signer sequencer address.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param activationBatch sequencer's first epoch as proposer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     * @param signerPubkey public key of the sequencer\\n     */\\n    event Locked(\\n        address indexed signer,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 indexed activationBatch,\\n        uint256 amount,\\n        uint256 total,\\n        bytes signerPubkey\\n    );\\n\\n    /**\\n     * @dev Emitted when the sequencer increase lock amoun in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking new amount\\n     * @param total the total locking amount\\n     */\\n    event Relocked(uint256 indexed sequencerId, uint256 amount, uint256 total);\\n\\n    /**\\n     * @dev Emitted when sequencer relocking in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param newAmount the updated lock amount.\\n     */\\n    event LockUpdate(\\n        uint256 indexed sequencerId,\\n        uint256 indexed nonce,\\n        uint256 indexed newAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer withdraw rewards in 'withdrawRewards' or 'unlockClaim'\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param recipient the address receive reward tokens\\n     * @param amount the reward amount.\\n     * @param totalAmount total rewards has liquidated\\n     */\\n    event ClaimRewards(\\n        uint256 indexed sequencerId,\\n        address recipient,\\n        uint256 indexed amount,\\n        uint256 indexed totalAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in '_unlock()'.\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param deactivationBatch  last batch for sequencer.\\n     * @param deactivationTime unlock block timestamp.\\n     * @param unlockClaimTime when user can claim locked token.\\n     * @param amount locking amount\\n     */\\n    event UnlockInit(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 deactivationBatch,\\n        uint256 deactivationTime,\\n        uint256 unlockClaimTime,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in 'unlockClaim()'\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     */\\n    event Unlocked(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 amount,\\n        uint256 total\\n    );\\n\\n    /**\\n     * @dev Emitted when batch update in  'batchSubmitRewards'\\n     * @param _newBatchId new batchId.\\n     */\\n    event BatchSubmitReward(uint256 _newBatchId);\\n\\n    /**\\n     * @dev Emitted when the sequencer public key is updated in 'updateSigner()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param oldSigner oldSigner old address of the sequencer.\\n     * @param newSigner newSigner new address of the sequencer.\\n     * @param signerPubkey signerPubkey public key of the sequencer.\\n     */\\n    event SignerChange(\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        address indexed oldSigner,\\n        address indexed newSigner,\\n        bytes signerPubkey\\n    );\\n\\n    function newSequencer(\\n        uint256 _id,\\n        address _owner,\\n        address _signer,\\n        uint256 _amount,\\n        uint256 _batchId,\\n        bytes calldata _signerPubkey\\n    ) external;\\n\\n    function increaseLocked(\\n        uint256 _seqId,\\n        uint256 _nonce,\\n        address _owner,\\n        uint256 _locked,\\n        uint256 _incoming,\\n        uint256 _fromReward\\n    ) external;\\n\\n    function initializeUnlock(\\n        uint256 _seqId,\\n        uint256 _reward,\\n        uint32 _l2gas,\\n        ISequencerInfo.Sequencer calldata _seq\\n    ) external payable;\\n\\n    function finalizeUnlock(\\n        address _owner,\\n        uint256 _seqId,\\n        uint256 _amount,\\n        uint256 _reward,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function liquidateReward(\\n        uint256 _seqId,\\n        uint256 _amount,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function distributeReward(uint256 _batchId, uint256 _totalReward) external;\\n\\n    function logSignerChange(\\n        uint256 sequencerId,\\n        address oldSigner,\\n        address newSigner,\\n        uint256 nonce,\\n        bytes calldata signerPubkey\\n    ) external;\\n}\",\"keccak256\":\"0xe63cc48d66aa1359f5b9048a3f21be6f2926130b0360cc495c23737dd7248f1e\",\"license\":\"MIT\"},\"interface/ILockingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ILockingInfo.sol\\\";\\nimport \\\"./ISequencerInfo.sol\\\";\\n\\ninterface ILockingPool is ISequencerInfo {\\n    struct SequencerData {\\n        uint256 amount; // sequencer current locked\\n        uint256 reward; // sequencer current reward that have not cleamed\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 updatedBatch; // batch id of the last updated\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consencus client\\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\\n    }\\n\\n    function lockFor(address _signer, uint256 _amount, bytes calldata _signerPubkey) external;\\n    function lockWithRewardRecipient(address _signer, address _rewardRecipient, uint256 _amount, bytes calldata _signerPubkey) external;\\n    function relock(uint256 _seqId, uint256 _amount, bool _lockReward) external;\\n    function withdrawRewards(uint256 _seqId, uint32 _l2Gas) external;\\n    function unlock( uint256 _seqId, uint32 _l2Gas) external payable;\\n    function unlockClaim(uint256 _seqId, uint32 _l2Gas) external payable;\\n    function escrow() external view returns (ILockingInfo);\\n    function sequencers(uint256 seqId) external view returns (SequencerData memory);\\n    function seqSigners(address signer) external view returns (uint256 seqId);\\n\\n    /**\\n     * @dev Emitted when WITHDRAWAL_DELAY is updated.\\n     * @param _cur current withdraw delay time\\n     * @param _prev previours withdraw delay time\\n     */\\n    event WithrawDelayTimeChange(uint256 _cur, uint256 _prev);\\n\\n    /**\\n     * @dev Emitted when the proxy update threshold in 'updateBlockReward()'.\\n     * @param newReward new block reward\\n     * @param oldReward  old block reward\\n     */\\n    event RewardUpdate(uint256 newReward, uint256 oldReward);\\n\\n    /**\\n     * @dev Emitted when mpc address update in 'UpdateMpc'\\n     * @param _newMpc new min lock.\\n     */\\n    event UpdateMpc(address _newMpc);\\n\\n    /**\\n     * @dev Emitted when SignerUpdateThrottle is updated\\n     * @param _n new min value\\n     */\\n    event SetSignerUpdateThrottle(uint256 _n);\\n}\",\"keccak256\":\"0x43a28aeb18dc696d8c141ca49d1ecb62341b01e9d18471c4df9921cd3f98f227\",\"license\":\"GPL-2.0-or-later\"},\"interface/ISequencerInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ISequencerInfo {\\n    error OwnedSequencer();\\n    error SignerExisted();\\n    error NoSuchSeq();\\n    error NullAddress();\\n    error SeqNotActive();\\n    error NotSeqOwner();\\n    error NotSeqSigner();\\n    error NoRewardRecipient();\\n    error NotWhitelisted();\\n\\n    // the sequencer status\\n    enum Status {\\n        Unavailabe, // placeholder for default value\\n        Inactive, // the sequencer will be Inactive if its owner starts unlock\\n        Active, // the sequencer is active when it locks tokens on the contract\\n        Unlocked // Exited, the sequencer has no locked tokens, and it's no longer produce blocks on L2\\n    }\\n\\n    struct Sequencer {\\n        uint256 amount; // sequencer current locked\\n        uint256 reward; // sequencer current reward that have not cleamed\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 updatedBatch; // batch id of the last updated\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consencus client\\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\\n        bytes pubkey; // sequencer signer pubkey\\n        address rewardRecipient; // sequencer rewarder recipient address\\n        Status status; // sequencer status\\n    }\\n\\n    /**\\n     * @dev Emitted if owner call 'setWhitelist'\\n     * @param _user the address who can lock token\\n     * @param _yes white address state\\n     */\\n    event SetWhitelist(address _user, bool _yes);\\n\\n    /**\\n     * @dev Emitted when reward recipient address update in 'setSequencerRewardRecipient'\\n     * @param _seqId the sequencerId\\n     * @param _recipient the address receive reward token\\n     */\\n    event SequencerRewardRecipientChanged(uint256 _seqId, address _recipient);\\n\\n    /**\\n     * @dev Emitted when sequencer owner is changed\\n     * @param _seqId the sequencerId\\n     * @param _owner the sequencer owner\\n     */\\n    event SequencerOwnerChanged(uint256 _seqId, address _owner);\\n\\n    function seqOwners(address owner) external returns (uint256 seqId);\\n}\",\"keccak256\":\"0x391c0da4e5953583f9d184d2646d4bc69654161f9ba5da0fa600c79a72b3c1ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e7a806100206000396000f3fe6080604052600436106100dd5760003560e01c80639de2ee211161007f578063ce6df54a11610059578063ce6df54a1461026e578063e597455414610297578063f7cee36a146102c2578063f8c8765e146102ed576100dd565b80639de2ee21146101ef578063a98d38f01461021a578063c3b550c814610243576100dd565b806356387b91116100bb57806356387b911461015457806367d93c811461017d57806376d9f95c1461019957806385d1e2b8146101c4576100dd565b806302fb0c5e146100e257806304a78fca1461010d5780631221e6a514610138575b600080fd5b3480156100ee57600080fd5b506100f7610316565b6040516101049190611266565b60405180910390f35b34801561011957600080fd5b50610122610329565b60405161012f919061129a565b60405180910390f35b610152600480360381019061014d9190611305565b61032f565b005b34801561016057600080fd5b5061017b60048036038101906101769190611305565b6105ae565b005b61019760048036038101906101929190611305565b6106d0565b005b3480156101a557600080fd5b506101ae61080e565b6040516101bb919061144e565b60405180910390f35b3480156101d057600080fd5b506101d96108ba565b6040516101e691906114c9565b60405180910390f35b3480156101fb57600080fd5b506102046108e0565b60405161021191906114f3565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c919061153a565b610904565b005b34801561024f57600080fd5b50610258610a29565b60405161026591906114f3565b60405180910390f35b34801561027a57600080fd5b50610295600480360381019061029091906116d9565b610a4f565b005b3480156102a357600080fd5b506102ac610ecc565b6040516102b9919061177d565b60405180910390f35b3480156102ce57600080fd5b506102d7610ef2565b6040516102e491906117b9565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f9190611850565b610f18565b005b600560149054906101000a900460ff1681565b60045481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b490611914565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638ddc74de34600454846040518463ffffffff1660e01b815260040161041d929190611943565b6000604051808303818588803b15801561043657600080fd5b505af115801561044a573d6000803e3d6000fd5b5050505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161050991906114f3565b602060405180830381865afa158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a9190611981565b6040518363ffffffff1660e01b81526004016105679291906119ae565b6020604051808303816000875af1158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa9190611a03565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063390611914565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317396687600454836040518363ffffffff1660e01b815260040161069b929190611943565b600060405180830381600087803b1580156106b557600080fd5b505af11580156106c9573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461075e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075590611914565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663262c0e6634600454846040518463ffffffff1660e01b81526004016107be929190611943565b6000604051808303818588803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b50505050506000600560146101000a81548160ff02191690831515021790555050565b6108166111cc565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ba7ccff6004546040518263ffffffff1660e01b8152600401610873919061129a565b61014060405180830381865afa158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b59190611b40565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610992576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098990611914565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663015bb1806004548360016040518463ffffffff1660e01b81526004016109f493929190611b6e565b600060405180830381600087803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad490611914565b60405180910390fd5b600060045414610b22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1990611c17565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610b8c5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b610bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc290611c83565b60405180910390fd5b60008211610c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0590611cef565b60405180910390fd5b83600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610cee9291906119ae565b6020604051808303816000875af1158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190611a03565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ad42030600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585856040518563ffffffff1660e01b8152600401610db59493929190611d8e565b600060405180830381600087803b158015610dcf57600080fd5b505af1158015610de3573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beb26755600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610e6491906114f3565b602060405180830381865afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190611981565b6004819055506001600560146101000a81548160ff02191690831515021790555050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610f226111a4565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610f705750825b9050600060018367ffffffffffffffff16148015610fa5575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610fb3575080155b15610fea576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561103a5760018560000160086101000a81548160ff0219169083151502179055505b886000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156111995760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516111909190611e29565b60405180910390a15b505050505050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60008115159050919050565b6112608161124b565b82525050565b600060208201905061127b6000830184611257565b92915050565b6000819050919050565b61129481611281565b82525050565b60006020820190506112af600083018461128b565b92915050565b6000604051905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b6112e2816112c9565b81146112ed57600080fd5b50565b6000813590506112ff816112d9565b92915050565b60006020828403121561131b5761131a6112bf565b5b6000611329848285016112f0565b91505092915050565b61133b81611281565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061136c82611341565b9050919050565b61137c81611361565b82525050565b610140820160008201516113996000850182611332565b5060208201516113ac6020850182611332565b5060408201516113bf6040850182611332565b5060608201516113d26060850182611332565b5060808201516113e56080850182611332565b5060a08201516113f860a0850182611332565b5060c082015161140b60c0850182611332565b5060e082015161141e60e0850182611332565b50610100820151611433610100850182611373565b50610120820151611448610120850182611373565b50505050565b6000610140820190506114646000830184611382565b92915050565b6000819050919050565b600061148f61148a61148584611341565b61146a565b611341565b9050919050565b60006114a182611474565b9050919050565b60006114b382611496565b9050919050565b6114c3816114a8565b82525050565b60006020820190506114de60008301846114ba565b92915050565b6114ed81611361565b82525050565b600060208201905061150860008301846114e4565b92915050565b61151781611281565b811461152257600080fd5b50565b6000813590506115348161150e565b92915050565b6000602082840312156115505761154f6112bf565b5b600061155e84828501611525565b91505092915050565b61157081611361565b811461157b57600080fd5b50565b60008135905061158d81611567565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115e68261159d565b810181811067ffffffffffffffff82111715611605576116046115ae565b5b80604052505050565b60006116186112b5565b905061162482826115dd565b919050565b600067ffffffffffffffff821115611644576116436115ae565b5b61164d8261159d565b9050602081019050919050565b82818337600083830152505050565b600061167c61167784611629565b61160e565b90508281526020810184848401111561169857611697611598565b5b6116a384828561165a565b509392505050565b600082601f8301126116c0576116bf611593565b5b81356116d0848260208601611669565b91505092915050565b600080600080608085870312156116f3576116f26112bf565b5b60006117018782880161157e565b94505060206117128782880161157e565b935050604061172387828801611525565b925050606085013567ffffffffffffffff811115611744576117436112c4565b5b611750878288016116ab565b91505092959194509250565b600061176782611496565b9050919050565b6117778161175c565b82525050565b6000602082019050611792600083018461176e565b92915050565b60006117a382611496565b9050919050565b6117b381611798565b82525050565b60006020820190506117ce60008301846117aa565b92915050565b60006117df82611361565b9050919050565b6117ef816117d4565b81146117fa57600080fd5b50565b60008135905061180c816117e6565b92915050565b600061181d82611361565b9050919050565b61182d81611812565b811461183857600080fd5b50565b60008135905061184a81611824565b92915050565b6000806000806080858703121561186a576118696112bf565b5b60006118788782880161157e565b9450506020611889878288016117fd565b935050604061189a8782880161183b565b92505060606118ab8782880161157e565b91505092959194509250565b600082825260208201905092915050565b7f53657175656e6365724167656e743a206f6e6c79206465616c65720000000000600082015250565b60006118fe601b836118b7565b9150611909826118c8565b602082019050919050565b6000602082019050818103600083015261192d816118f1565b9050919050565b61193d816112c9565b82525050565b6000604082019050611958600083018561128b565b6119656020830184611934565b9392505050565b60008151905061197b8161150e565b92915050565b600060208284031215611997576119966112bf565b5b60006119a58482850161196c565b91505092915050565b60006040820190506119c360008301856114e4565b6119d0602083018461128b565b9392505050565b6119e08161124b565b81146119eb57600080fd5b50565b6000815190506119fd816119d7565b92915050565b600060208284031215611a1957611a186112bf565b5b6000611a27848285016119ee565b91505092915050565b600080fd5b600081519050611a4481611567565b92915050565b60006101408284031215611a6157611a60611a30565b5b611a6c61014061160e565b90506000611a7c8482850161196c565b6000830152506020611a908482850161196c565b6020830152506040611aa48482850161196c565b6040830152506060611ab88482850161196c565b6060830152506080611acc8482850161196c565b60808301525060a0611ae08482850161196c565b60a08301525060c0611af48482850161196c565b60c08301525060e0611b088482850161196c565b60e083015250610100611b1d84828501611a35565b61010083015250610120611b3384828501611a35565b6101208301525092915050565b60006101408284031215611b5757611b566112bf565b5b6000611b6584828501611a4a565b91505092915050565b6000606082019050611b83600083018661128b565b611b90602083018561128b565b611b9d6040830184611257565b949350505050565b7f53657175656e6365724167656e743a2073657175656e63657220616c7265616460008201527f79206c6f636b6564000000000000000000000000000000000000000000000000602082015250565b6000611c016028836118b7565b9150611c0c82611ba5565b604082019050919050565b60006020820190508181036000830152611c3081611bf4565b9050919050565b7f53657175656e6365724167656e743a207a65726f206164647265737300000000600082015250565b6000611c6d601c836118b7565b9150611c7882611c37565b602082019050919050565b60006020820190508181036000830152611c9c81611c60565b9050919050565b7f53657175656e6365724167656e743a207a65726f20616d6f756e740000000000600082015250565b6000611cd9601b836118b7565b9150611ce482611ca3565b602082019050919050565b60006020820190508181036000830152611d0881611ccc565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d49578082015181840152602081019050611d2e565b60008484015250505050565b6000611d6082611d0f565b611d6a8185611d1a565b9350611d7a818560208601611d2b565b611d838161159d565b840191505092915050565b6000608082019050611da360008301876114e4565b611db060208301866114e4565b611dbd604083018561128b565b8181036060830152611dcf8184611d55565b905095945050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000611e13611e0e611e0984611dda565b61146a565b611de4565b9050919050565b611e2381611df8565b82525050565b6000602082019050611e3e6000830184611e1a565b9291505056fea26469706673582212206c7948bda4dde7a4757ef81e5c5d0260cdd2806a34e5aac158153b734eabf65464736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80639de2ee211161007f578063ce6df54a11610059578063ce6df54a1461026e578063e597455414610297578063f7cee36a146102c2578063f8c8765e146102ed576100dd565b80639de2ee21146101ef578063a98d38f01461021a578063c3b550c814610243576100dd565b806356387b91116100bb57806356387b911461015457806367d93c811461017d57806376d9f95c1461019957806385d1e2b8146101c4576100dd565b806302fb0c5e146100e257806304a78fca1461010d5780631221e6a514610138575b600080fd5b3480156100ee57600080fd5b506100f7610316565b6040516101049190611266565b60405180910390f35b34801561011957600080fd5b50610122610329565b60405161012f919061129a565b60405180910390f35b610152600480360381019061014d9190611305565b61032f565b005b34801561016057600080fd5b5061017b60048036038101906101769190611305565b6105ae565b005b61019760048036038101906101929190611305565b6106d0565b005b3480156101a557600080fd5b506101ae61080e565b6040516101bb919061144e565b60405180910390f35b3480156101d057600080fd5b506101d96108ba565b6040516101e691906114c9565b60405180910390f35b3480156101fb57600080fd5b506102046108e0565b60405161021191906114f3565b60405180910390f35b34801561022657600080fd5b50610241600480360381019061023c919061153a565b610904565b005b34801561024f57600080fd5b50610258610a29565b60405161026591906114f3565b60405180910390f35b34801561027a57600080fd5b50610295600480360381019061029091906116d9565b610a4f565b005b3480156102a357600080fd5b506102ac610ecc565b6040516102b9919061177d565b60405180910390f35b3480156102ce57600080fd5b506102d7610ef2565b6040516102e491906117b9565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f9190611850565b610f18565b005b600560149054906101000a900460ff1681565b60045481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b490611914565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638ddc74de34600454846040518463ffffffff1660e01b815260040161041d929190611943565b6000604051808303818588803b15801561043657600080fd5b505af115801561044a573d6000803e3d6000fd5b5050505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161050991906114f3565b602060405180830381865afa158015610526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054a9190611981565b6040518363ffffffff1660e01b81526004016105679291906119ae565b6020604051808303816000875af1158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa9190611a03565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063390611914565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317396687600454836040518363ffffffff1660e01b815260040161069b929190611943565b600060405180830381600087803b1580156106b557600080fd5b505af11580156106c9573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461075e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075590611914565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663262c0e6634600454846040518463ffffffff1660e01b81526004016107be929190611943565b6000604051808303818588803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b50505050506000600560146101000a81548160ff02191690831515021790555050565b6108166111cc565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ba7ccff6004546040518263ffffffff1660e01b8152600401610873919061129a565b61014060405180830381865afa158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b59190611b40565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610992576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098990611914565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663015bb1806004548360016040518463ffffffff1660e01b81526004016109f493929190611b6e565b600060405180830381600087803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b5050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad490611914565b60405180910390fd5b600060045414610b22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1990611c17565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610b8c5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b610bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc290611c83565b60405180910390fd5b60008211610c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0590611cef565b60405180910390fd5b83600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610cee9291906119ae565b6020604051808303816000875af1158015610d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d319190611a03565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ad42030600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585856040518563ffffffff1660e01b8152600401610db59493929190611d8e565b600060405180830381600087803b158015610dcf57600080fd5b505af1158015610de3573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beb26755600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610e6491906114f3565b602060405180830381865afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea59190611981565b6004819055506001600560146101000a81548160ff02191690831515021790555050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610f226111a4565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610f705750825b9050600060018367ffffffffffffffff16148015610fa5575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610fb3575080155b15610fea576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561103a5760018560000160086101000a81548160ff0219169083151502179055505b886000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156111995760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516111909190611e29565b60405180910390a15b505050505050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b60008115159050919050565b6112608161124b565b82525050565b600060208201905061127b6000830184611257565b92915050565b6000819050919050565b61129481611281565b82525050565b60006020820190506112af600083018461128b565b92915050565b6000604051905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b6112e2816112c9565b81146112ed57600080fd5b50565b6000813590506112ff816112d9565b92915050565b60006020828403121561131b5761131a6112bf565b5b6000611329848285016112f0565b91505092915050565b61133b81611281565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061136c82611341565b9050919050565b61137c81611361565b82525050565b610140820160008201516113996000850182611332565b5060208201516113ac6020850182611332565b5060408201516113bf6040850182611332565b5060608201516113d26060850182611332565b5060808201516113e56080850182611332565b5060a08201516113f860a0850182611332565b5060c082015161140b60c0850182611332565b5060e082015161141e60e0850182611332565b50610100820151611433610100850182611373565b50610120820151611448610120850182611373565b50505050565b6000610140820190506114646000830184611382565b92915050565b6000819050919050565b600061148f61148a61148584611341565b61146a565b611341565b9050919050565b60006114a182611474565b9050919050565b60006114b382611496565b9050919050565b6114c3816114a8565b82525050565b60006020820190506114de60008301846114ba565b92915050565b6114ed81611361565b82525050565b600060208201905061150860008301846114e4565b92915050565b61151781611281565b811461152257600080fd5b50565b6000813590506115348161150e565b92915050565b6000602082840312156115505761154f6112bf565b5b600061155e84828501611525565b91505092915050565b61157081611361565b811461157b57600080fd5b50565b60008135905061158d81611567565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115e68261159d565b810181811067ffffffffffffffff82111715611605576116046115ae565b5b80604052505050565b60006116186112b5565b905061162482826115dd565b919050565b600067ffffffffffffffff821115611644576116436115ae565b5b61164d8261159d565b9050602081019050919050565b82818337600083830152505050565b600061167c61167784611629565b61160e565b90508281526020810184848401111561169857611697611598565b5b6116a384828561165a565b509392505050565b600082601f8301126116c0576116bf611593565b5b81356116d0848260208601611669565b91505092915050565b600080600080608085870312156116f3576116f26112bf565b5b60006117018782880161157e565b94505060206117128782880161157e565b935050604061172387828801611525565b925050606085013567ffffffffffffffff811115611744576117436112c4565b5b611750878288016116ab565b91505092959194509250565b600061176782611496565b9050919050565b6117778161175c565b82525050565b6000602082019050611792600083018461176e565b92915050565b60006117a382611496565b9050919050565b6117b381611798565b82525050565b60006020820190506117ce60008301846117aa565b92915050565b60006117df82611361565b9050919050565b6117ef816117d4565b81146117fa57600080fd5b50565b60008135905061180c816117e6565b92915050565b600061181d82611361565b9050919050565b61182d81611812565b811461183857600080fd5b50565b60008135905061184a81611824565b92915050565b6000806000806080858703121561186a576118696112bf565b5b60006118788782880161157e565b9450506020611889878288016117fd565b935050604061189a8782880161183b565b92505060606118ab8782880161157e565b91505092959194509250565b600082825260208201905092915050565b7f53657175656e6365724167656e743a206f6e6c79206465616c65720000000000600082015250565b60006118fe601b836118b7565b9150611909826118c8565b602082019050919050565b6000602082019050818103600083015261192d816118f1565b9050919050565b61193d816112c9565b82525050565b6000604082019050611958600083018561128b565b6119656020830184611934565b9392505050565b60008151905061197b8161150e565b92915050565b600060208284031215611997576119966112bf565b5b60006119a58482850161196c565b91505092915050565b60006040820190506119c360008301856114e4565b6119d0602083018461128b565b9392505050565b6119e08161124b565b81146119eb57600080fd5b50565b6000815190506119fd816119d7565b92915050565b600060208284031215611a1957611a186112bf565b5b6000611a27848285016119ee565b91505092915050565b600080fd5b600081519050611a4481611567565b92915050565b60006101408284031215611a6157611a60611a30565b5b611a6c61014061160e565b90506000611a7c8482850161196c565b6000830152506020611a908482850161196c565b6020830152506040611aa48482850161196c565b6040830152506060611ab88482850161196c565b6060830152506080611acc8482850161196c565b60808301525060a0611ae08482850161196c565b60a08301525060c0611af48482850161196c565b60c08301525060e0611b088482850161196c565b60e083015250610100611b1d84828501611a35565b61010083015250610120611b3384828501611a35565b6101208301525092915050565b60006101408284031215611b5757611b566112bf565b5b6000611b6584828501611a4a565b91505092915050565b6000606082019050611b83600083018661128b565b611b90602083018561128b565b611b9d6040830184611257565b949350505050565b7f53657175656e6365724167656e743a2073657175656e63657220616c7265616460008201527f79206c6f636b6564000000000000000000000000000000000000000000000000602082015250565b6000611c016028836118b7565b9150611c0c82611ba5565b604082019050919050565b60006020820190508181036000830152611c3081611bf4565b9050919050565b7f53657175656e6365724167656e743a207a65726f206164647265737300000000600082015250565b6000611c6d601c836118b7565b9150611c7882611c37565b602082019050919050565b60006020820190508181036000830152611c9c81611c60565b9050919050565b7f53657175656e6365724167656e743a207a65726f20616d6f756e740000000000600082015250565b6000611cd9601b836118b7565b9150611ce482611ca3565b602082019050919050565b60006020820190508181036000830152611d0881611ccc565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d49578082015181840152602081019050611d2e565b60008484015250505050565b6000611d6082611d0f565b611d6a8185611d1a565b9350611d7a818560208601611d2b565b611d838161159d565b840191505092915050565b6000608082019050611da360008301876114e4565b611db060208301866114e4565b611dbd604083018561128b565b8181036060830152611dcf8184611d55565b905095945050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000611e13611e0e611e0984611dda565b61146a565b611de4565b9050919050565b611e2381611df8565b82525050565b6000602082019050611e3e6000830184611e1a565b9291505056fea26469706673582212206c7948bda4dde7a4757ef81e5c5d0260cdd2806a34e5aac158153b734eabf65464736f6c63430008180033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2406,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "dealer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2409,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "lockingPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILockingPool)3061"
      },
      {
        "astId": 2412,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "lockingInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILockingInfo)2938"
      },
      {
        "astId": 2415,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "metis",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)979"
      },
      {
        "astId": 2417,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "sequencerId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2419,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "sequencerSigner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2421,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "active",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)979": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILockingInfo)2938": {
        "encoding": "inplace",
        "label": "contract ILockingInfo",
        "numberOfBytes": "20"
      },
      "t_contract(ILockingPool)3061": {
        "encoding": "inplace",
        "label": "contract ILockingPool",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}