{
  "address": "0xE0857fB89346fe718f704EE1d763DC5346C1F223",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lockingPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_dealer",
          "type": "address"
        }
      ],
      "name": "SequencerAgentInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_signerPubKey",
          "type": "bytes"
        }
      ],
      "name": "SequencerLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_l2GasLimit",
          "type": "uint32"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dealer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDealerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseStakingAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dealer",
          "type": "address"
        },
        {
          "internalType": "contract ILockingPool",
          "name": "_lockingPool",
          "type": "address"
        },
        {
          "internalType": "contract ILockingInfo",
          "name": "_lockingInfo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_metis",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencerSigner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signerPubKey",
          "type": "bytes"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockingInfo",
      "outputs": [
        {
          "internalType": "contract ILockingInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockingPool",
      "outputs": [
        {
          "internalType": "contract ILockingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metis",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "l2Gas",
          "type": "uint32"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "l2Gas",
          "type": "uint32"
        }
      ],
      "name": "unlockClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawMetisFromAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawStakingAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xda58521b09b0f6fa5a00b337b67017861a41fbcf3e7d1a3e2b5081f23aac0c46",
  "receipt": {
    "to": null,
    "from": "0xc3BD53e8BB7F5a8f98C565aad28C9b618c84D8Fa",
    "contractAddress": "0xE0857fB89346fe718f704EE1d763DC5346C1F223",
    "transactionIndex": 50,
    "gasUsed": "1874818",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7c0b12459347798520d2d18877bc43f5dc86dbc22f6c5fbb0d9fe8cff68b3784",
    "transactionHash": "0xda58521b09b0f6fa5a00b337b67017861a41fbcf3e7d1a3e2b5081f23aac0c46",
    "logs": [],
    "blockNumber": 7111756,
    "cumulativeGasUsed": "10637474",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "8bd0e617df7d1a8110ed73c8d1057dd4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockingPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_dealer\",\"type\":\"address\"}],\"name\":\"SequencerAgentInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_signerPubKey\",\"type\":\"bytes\"}],\"name\":\"SequencerLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakingAmountIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakingAmountWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_l2GasLimit\",\"type\":\"uint32\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDealerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dealer\",\"type\":\"address\"},{\"internalType\":\"contract ILockingPool\",\"name\":\"_lockingPool\",\"type\":\"address\"},{\"internalType\":\"contract ILockingInfo\",\"name\":\"_lockingInfo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metis\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signerPubKey\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingInfo\",\"outputs\":[{\"internalType\":\"contract ILockingInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingPool\",\"outputs\":[{\"internalType\":\"contract ILockingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metis\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"l2Gas\",\"type\":\"uint32\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"l2Gas\",\"type\":\"uint32\"}],\"name\":\"unlockClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMetisFromAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakingAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SequencerAgent.sol\":\"SequencerAgent\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/SequencerAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interface/ILockingPool.sol\\\";\\nimport \\\"../interface/ILockingInfo.sol\\\";\\nimport \\\"../interface/ISequencerAgent.sol\\\";\\n\\ncontract SequencerAgent is ISequencerAgent, ContextUpgradeable{\\n    address public dealer;\\n    ILockingPool public lockingPool;\\n    ILockingInfo public lockingInfo;\\n    IERC20 public metis;\\n    \\n\\n    modifier onlyDealer() {\\n        require(msg.sender == dealer, \\\"SequencerAgent: only dealer\\\");\\n        _;\\n    }\\n\\n    function initialize(address _dealer, ILockingPool _lockingPool, ILockingInfo _lockingInfo, address _metis) external initializer {\\n        dealer = _dealer;\\n        lockingPool = _lockingPool;\\n        lockingInfo = _lockingInfo;\\n        metis = IERC20(_metis);\\n    }\\n\\n    function lock(address _sequencerSigner, address _rewardRecipient, uint256 _amount, bytes memory _signerPubKey) public onlyDealer {\\n        require(_sequencerSigner != address(0) && _rewardRecipient != address(0), \\\"SequencerAgent: zero address\\\");\\n        require(_amount > 0, \\\"SequencerAgent: zero amount\\\");\\n\\n        IERC20(ILockingInfo(lockingInfo).l1Token()).transferFrom(msg.sender, address(this), _amount);\\n\\n        metis.approve(address(lockingInfo), type(uint256).max);\\n        lockingPool.lockWithRewardRecipient(_sequencerSigner, _rewardRecipient, _amount, _signerPubKey);\\n        emit SequencerLocked(_sequencerSigner, _amount, _signerPubKey);\\n    }\\n\\n    function increaseStakingAmount(\\n        uint256 sequencerId,\\n        uint256 _amount\\n    ) external onlyDealer{\\n        require(_amount > 0, \\\"SequencerAgent: invalid amount\\\");\\n        IERC20(ILockingInfo(lockingInfo).l1Token()).approve(address(lockingInfo), _amount);\\n        lockingPool.relock(sequencerId, _amount, false);\\n        emit StakingAmountIncreased(_amount);\\n    }\\n\\n    // l2GasLimit * discount < msg.value\\n    function claimRewards(\\n        uint256 sequencerId,\\n        uint32 _l2GasLimit\\n    ) external payable onlyDealer {\\n        lockingPool.withdrawRewards{value: msg.value}(sequencerId, _l2GasLimit);\\n    }\\n\\n    function withdrawStakingAmount(\\n        uint256 sequencerId,\\n        address _recipient,\\n        uint256 _amount\\n    ) external payable onlyDealer() {\\n        require(_amount > 0, \\\"SequencerAgent: invalid amount\\\");\\n        require(\\n            _recipient != address(0),\\n            \\\"SequencerAgent: invalid recipient\\\"\\n        );\\n        lockingPool.withdraw(sequencerId, _amount);\\n        emit StakingAmountWithdrawn(_recipient, _amount);\\n    }\\n\\n\\n    function unlock(uint256 sequencerId, uint32 l2Gas) public payable onlyDealer {\\n        lockingPool.unlock{value: msg.value}(sequencerId, l2Gas);\\n    }\\n\\n    function unlockClaim(uint256 sequencerId, uint32 l2Gas) public payable onlyDealer {\\n        lockingPool.unlockClaim{value: msg.value}(sequencerId, l2Gas);\\n        metis.transfer(dealer, metis.balanceOf(address(this)));\\n    }\\n\\n    function withdrawMetisFromAgent( uint256 _amount) external onlyDealer {\\n        IERC20(metis).transfer(msg.sender, _amount);\\n    }\\n\\n    function getDealerAddress() external view returns (address) {\\n        return dealer;\\n    }\\n}\\n\",\"keccak256\":\"0x4e26c1181d2c1f6eaf512872e6365ca09cb83b5569c8239a96b776108a9f7720\",\"license\":\"MIT\"},\"interface/ILockingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ISequencerInfo} from \\\"./ISequencerInfo.sol\\\";\\nimport {ILockingInfo as ILockingInfoRaw} from \\\"./ILockingInfoRaw.sol\\\";\\n\\ninterface ILockingInfo is ILockingInfoRaw {\\n    function bridge() external view returns(address);\\n    function l1Token() external view returns(address);\\n    function l2Token() external view returns(address);\\n    function minLock() external view returns(uint256);\\n    function maxLock() external view returns(uint256);\\n    function l2ChainId() external view returns(uint256);\\n\\n}\",\"keccak256\":\"0x47636e867b96101aa2d6993aeb465d52636621ea5f893a205df5ede833426a72\",\"license\":\"MIT\"},\"interface/ILockingInfoRaw.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ISequencerInfo} from \\\"./ISequencerInfo.sol\\\";\\n\\ninterface ILockingInfo {\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMinAmounts'\\n     * @param _newMinLock new min lock.\\n     */\\n    event SetMinLock(uint256 _newMinLock);\\n\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMaxAmounts'\\n     * @param _newMaxLock new max lock.\\n     */\\n    event SetMaxLock(uint256 _newMaxLock);\\n\\n    /**\\n     * @dev Emitted when the reward payer is changed\\n     * @param _payer new reward payer\\n     */\\n    event SetRewardPayer(address _payer);\\n\\n    /**\\n     * @dev Emitted when sequencer locks in '_lockFor()' in LockingPool.\\n     * @param signer sequencer address.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param activationBatch sequencer's first epoch as proposer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     * @param signerPubkey public key of the sequencer\\n     */\\n    event Locked(\\n        address indexed signer,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 indexed activationBatch,\\n        uint256 amount,\\n        uint256 total,\\n        bytes signerPubkey\\n    );\\n\\n    /**\\n     * @dev Emitted when the sequencer increase lock amount in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking new amount\\n     * @param total the total locking amount\\n     */\\n    event Relocked(uint256 indexed sequencerId, uint256 amount, uint256 total);\\n\\n    /**\\n     * @dev Emitted when the sequencer reduce lock amount in 'withdraw()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount withdraw new amount\\n     */\\n    event Withdraw(uint256 indexed sequencerId, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when sequencer relocking in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param newAmount the updated lock amount.\\n     */\\n    event LockUpdate(\\n        uint256 indexed sequencerId,\\n        uint256 indexed nonce,\\n        uint256 indexed newAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer withdraw rewards in 'withdrawRewards' or 'unlockClaim'\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param recipient the address receive reward tokens\\n     * @param amount the reward amount.\\n     * @param totalAmount total rewards has liquidated\\n     */\\n    event ClaimRewards(\\n        uint256 indexed sequencerId,\\n        address recipient,\\n        uint256 indexed amount,\\n        uint256 indexed totalAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in '_unlock()'.\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param deactivationBatch  last batch for sequencer.\\n     * @param deactivationTime unlock block timestamp.\\n     * @param unlockClaimTime when user can claim locked token.\\n     * @param amount locking amount\\n     */\\n    event UnlockInit(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 deactivationBatch,\\n        uint256 deactivationTime,\\n        uint256 unlockClaimTime,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in 'unlockClaim()'\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     */\\n    event Unlocked(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 amount,\\n        uint256 total\\n    );\\n\\n    /**\\n     * @dev Emitted when batch update in  'batchSubmitRewards'\\n     * @param _newBatchId new batchId.\\n     *\\n     *      Note from maintainer:\\n     *      for compatibility, the event is retained\\n     */\\n    event BatchSubmitReward(uint256 _newBatchId);\\n\\n    /**\\n     * @dev Emitted when the sequencer public key is updated in 'updateSigner()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param oldSigner oldSigner old address of the sequencer.\\n     * @param newSigner newSigner new address of the sequencer.\\n     * @param signerPubkey signerPubkey public key of the sequencer.\\n     */\\n    event SignerChange(\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        address indexed oldSigner,\\n        address indexed newSigner,\\n        bytes signerPubkey\\n    );\\n\\n    function newSequencer(\\n        uint256 _id,\\n        address _owner,\\n        address _signer,\\n        uint256 _amount,\\n        uint256 _batchId,\\n        bytes calldata _signerPubkey\\n    ) external;\\n\\n    function increaseLocked(\\n        uint256 _seqId,\\n        uint256 _nonce,\\n        address _owner,\\n        uint256 _locked,\\n        uint256 _incoming,\\n        uint256 _fromReward\\n    ) external;\\n\\n    function withdrawLocking(\\n        uint256 _seqId,\\n        address _owner,\\n        uint256 _nonce,\\n        uint256 _amount,\\n        uint256 _locked\\n    ) external;\\n\\n    function initializeUnlock(\\n        uint256 _seqId,\\n        uint256 _reward,\\n        uint32 _l2gas,\\n        ISequencerInfo.Sequencer calldata _seq\\n    ) external payable;\\n\\n    function finalizeUnlock(\\n        address _owner,\\n        uint256 _seqId,\\n        uint256 _amount,\\n        uint256 _reward,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function liquidateReward(\\n        uint256 _seqId,\\n        uint256 _amount,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function distributeReward(uint256 _batchId, uint256 _totalReward) external;\\n\\n    function logSignerChange(\\n        uint256 sequencerId,\\n        address oldSigner,\\n        address newSigner,\\n        uint256 nonce,\\n        bytes calldata signerPubkey\\n    ) external;\\n}\",\"keccak256\":\"0x6f3e6d86896060f4474907518d8c1410faba6f39757b95203602d969be1c10fe\",\"license\":\"MIT\"},\"interface/ILockingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ILockingInfo.sol\\\";\\ninterface ILockingPool is ISequencerInfo {\\n    struct SequencerData {\\n        uint256 amount; // sequencer current locked\\n        uint256 reward; // sequencer current reward that have not cleamed\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 updatedBatch; // batch id of the last updated\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consencus client\\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\\n    }\\n\\n    function lockFor(address _signer, uint256 _amount, bytes calldata _signerPubkey) external;\\n    function lockWithRewardRecipient(address _signer, address _rewardRecipient, uint256 _amount, bytes calldata _signerPubkey) external;\\n    function relock(uint256 _seqId, uint256 _amount, bool _lockReward) external;\\n    function withdrawRewards(uint256 _seqId, uint32 _l2Gas) external payable;\\n    function unlock( uint256 _seqId, uint32 _l2Gas) external payable;\\n    function unlockClaim(uint256 _seqId, uint32 _l2Gas) external payable;\\n    function escrow() external view returns (ILockingInfo);\\n    function sequencers(uint256 seqId) external view returns (SequencerData memory);\\n    function seqSigners(address signer) external view returns (uint256 seqId);\\n\\n    /**\\n     * @dev Emitted when WITHDRAWAL_DELAY is updated.\\n     * @param _cur current withdraw delay time\\n     * @param _prev previours withdraw delay time\\n     */\\n    event WithrawDelayTimeChange(uint256 _cur, uint256 _prev);\\n\\n    /**\\n     * @dev Emitted when the proxy update threshold in 'updateBlockReward()'.\\n     * @param newReward new block reward\\n     * @param oldReward  old block reward\\n     */\\n    event RewardUpdate(uint256 newReward, uint256 oldReward);\\n\\n    /**\\n     * @dev Emitted when mpc address update in 'UpdateMpc'\\n     * @param _newMpc new min lock.\\n     */\\n    event UpdateMpc(address _newMpc);\\n\\n    /**\\n     * @dev Emitted when SignerUpdateThrottle is updated\\n     * @param _n new min value\\n     */\\n    event SetSignerUpdateThrottle(uint256 _n);\\n    function withdraw(uint256 _seqId, uint256 _amount) external;\\n}\",\"keccak256\":\"0xafe0f90dc6e981cbe01fd3fe5b1e23a69963fc2fbc5084d39eb48f63bfb6ae99\",\"license\":\"GPL-2.0-or-later\"},\"interface/ISequencerAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\nimport \\\"../interface/ILockingPool.sol\\\";\\nimport \\\"../interface/ILockingInfo.sol\\\";\\n\\ninterface ISequencerAgent {\\n    event SequencerAgentInitialized(address _lockingPool, address _l1Token, address _dealer);\\n    event StakingAmountIncreased(uint256 _amount);\\n    event RewardsClaimed(uint256 _amount);\\n    event StakingAmountWithdrawn(address indexed _recipient, uint256 _amount);\\n    event SequencerLocked(address _signer, uint256 _amount, bytes _signerPubKey);\\n\\n\\n    function initialize(address _dealer, ILockingPool _lockingPool, ILockingInfo _lockingInfo, address _metis) external;\\n\\n    function lock(address _sequencerSigner, address _rewardRecipient, uint256 _amount, bytes memory _signerPubKey)  external;\\n\\n    function increaseStakingAmount(uint256 sequencerId,uint256 _amount) external;\\n\\n    function withdrawStakingAmount(uint256 sequencerId,address _recipient, uint256 _amount) external payable;\\n\\n    function unlock(uint256 sequencerId,uint32 l2Gas) external payable;\\n\\n    function unlockClaim(uint256 sequencerId,uint32 l2Gas) external payable;\\n\\n    function claimRewards(uint256 sequencerId,uint32 _l2GasLimit) external payable;\\n\\n    function withdrawMetisFromAgent( uint256 _amount) external;\\n    \\n    function getDealerAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd3b71aa7db8678209c97e336007ad5a99ffbe5a0e42663568a9ca6274e7887bf\",\"license\":\"MIT\"},\"interface/ISequencerInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\ninterface ISequencerInfo {\\n    error OwnedSequencer();\\n    error SignerExisted();\\n    error NoSuchSeq();\\n    error NullAddress();\\n    error SeqNotActive();\\n    error NotSeqOwner();\\n    error NotSeqSigner();\\n    error NoRewardRecipient();\\n    error NotWhitelisted();\\n\\n    // the sequencer status\\n    enum Status {\\n        Unavailabe, // placeholder for default value\\n        Inactive, // the sequencer will be Inactive if its owner starts unlock\\n        Active, // the sequencer is active when it locks tokens on the contract\\n        Unlocked // Exited, the sequencer has no locked tokens, and it's no longer produce blocks on L2\\n    }\\n\\n    struct Sequencer {\\n        uint256 amount; // sequencer current locked\\n        uint256 reward; // sequencer current reward that have not cleamed\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 updatedBatch; // batch id of the last updated\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consencus client\\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\\n        bytes pubkey; // sequencer signer pubkey\\n        address rewardRecipient; // sequencer rewarder recipient address\\n        Status status; // sequencer status\\n    }\\n\\n    /**\\n     * @dev Emitted if owner call 'setWhitelist'\\n     * @param _user the address who can lock token\\n     * @param _yes white address state\\n     */\\n    event SetWhitelist(address _user, bool _yes);\\n\\n    /**\\n     * @dev Emitted when reward recipient address update in 'setSequencerRewardRecipient'\\n     * @param _seqId the sequencerId\\n     * @param _recipient the address receive reward token\\n     */\\n    event SequencerRewardRecipientChanged(uint256 _seqId, address _recipient);\\n\\n    /**\\n     * @dev Emitted when sequencer owner is changed\\n     * @param _seqId the sequencerId\\n     * @param _owner the sequencer owner\\n     */\\n    event SequencerOwnerChanged(uint256 _seqId, address _owner);\\n\\n    function seqOwners(address owner) external returns (uint256 seqId);\\n}\",\"keccak256\":\"0x889528505bf29299e390906967ff8b171abbee0990d4de1f9ba93a4754167e53\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061210e806100206000396000f3fe6080604052600436106100c25760003560e01c80638ddc74de1161007f578063e597455411610059578063e597455414610208578063efe7ab2814610233578063f7cee36a1461025e578063f8c8765e14610289576100c2565b80638ddc74de146101985780639de2ee21146101b4578063ce6df54a146101df576100c2565b8063084d9732146100c7578063262c0e66146100f057806361928ecf1461010c5780636d8b821d146101285780637b2b14e81461014457806385d1e2b81461016d575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190611596565b6102b2565b005b61010a60048036038101906101059190611612565b610581565b005b61012660048036038101906101219190611612565b6106a3565b005b610142600480360381019061013d91906116b0565b6107c5565b005b34801561015057600080fd5b5061016b60048036038101906101669190611703565b6109e7565b005b34801561017957600080fd5b50610182610b19565b60405161018f919061178f565b60405180910390f35b6101b260048036038101906101ad9190611612565b610b3f565b005b3480156101c057600080fd5b506101c9610dbd565b6040516101d691906117b9565b60405180910390f35b3480156101eb57600080fd5b506102066004803603810190610201919061191a565b610de1565b005b34801561021457600080fd5b5061021d611223565b60405161022a91906119be565b60405180910390f35b34801561023f57600080fd5b50610248611249565b60405161025591906117b9565b60405180910390f35b34801561026a57600080fd5b50610273611272565b60405161028091906119fa565b60405180910390f35b34801561029557600080fd5b506102b060048036038101906102ab9190611a91565b611298565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033790611b55565b60405180910390fd5b60008111610383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037a90611bc1565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104149190611bf6565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610470929190611c32565b6020604051808303816000875af115801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b39190611c93565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663015bb180838360006040518463ffffffff1660e01b815260040161051493929190611ccf565b600060405180830381600087803b15801561052e57600080fd5b505af1158015610542573d6000803e3d6000fd5b505050507fd935a9bea639b2f1fc5491469854ff222597497dd304a82491c17495938022ba816040516105759190611d06565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690611b55565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663262c0e663484846040518463ffffffff1660e01b815260040161066d929190611d30565b6000604051808303818588803b15801561068657600080fd5b505af115801561069a573d6000803e3d6000fd5b50505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072890611b55565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663173966873484846040518463ffffffff1660e01b815260040161078f929190611d30565b6000604051808303818588803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b50505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a90611b55565b60405180910390fd5b60008111610896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088d90611bc1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc90611dcb565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e7084836040518363ffffffff1660e01b8152600401610962929190611deb565b600060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f6ef7a26d50cec3f1a210bed887413d426c9c13575a17872c54e00c4287ac5dce826040516109da9190611d06565b60405180910390a2505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c90611b55565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ad2929190611c32565b6020604051808303816000875af1158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190611c93565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc490611b55565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638ddc74de3484846040518463ffffffff1660e01b8152600401610c2b929190611d30565b6000604051808303818588803b158015610c4457600080fd5b505af1158015610c58573d6000803e3d6000fd5b5050505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d1791906117b9565b602060405180830381865afa158015610d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d589190611e29565b6040518363ffffffff1660e01b8152600401610d75929190611c32565b6020604051808303816000875af1158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db89190611c93565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6690611b55565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610ed95750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b610f18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0f90611ea2565b60405180910390fd5b60008211610f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5290611f0e565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190611bf6565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161102893929190611f2e565b6020604051808303816000875af1158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b9190611c93565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161110b929190611c32565b6020604051808303816000875af115801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190611c93565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ad42030858585856040518563ffffffff1660e01b81526004016111b09493929190611fe4565b600060405180830381600087803b1580156111ca57600080fd5b505af11580156111de573d6000803e3d6000fd5b505050507f32f2c212b245f6ea5fafe13042df4625f05eaa5d4f4e06dd04b1110620b1623684838360405161121593929190612030565b60405180910390a150505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006112a2611524565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156112f05750825b9050600060018367ffffffffffffffff16148015611325575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611333575080155b1561136a576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156113ba5760018560000160086101000a81548160ff0219169083151502179055505b886000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156115195760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161151091906120bd565b60405180910390a15b505050505050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61157381611560565b811461157e57600080fd5b50565b6000813590506115908161156a565b92915050565b600080604083850312156115ad576115ac611556565b5b60006115bb85828601611581565b92505060206115cc85828601611581565b9150509250929050565b600063ffffffff82169050919050565b6115ef816115d6565b81146115fa57600080fd5b50565b60008135905061160c816115e6565b92915050565b6000806040838503121561162957611628611556565b5b600061163785828601611581565b9250506020611648858286016115fd565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061167d82611652565b9050919050565b61168d81611672565b811461169857600080fd5b50565b6000813590506116aa81611684565b92915050565b6000806000606084860312156116c9576116c8611556565b5b60006116d786828701611581565b93505060206116e88682870161169b565b92505060406116f986828701611581565b9150509250925092565b60006020828403121561171957611718611556565b5b600061172784828501611581565b91505092915050565b6000819050919050565b600061175561175061174b84611652565b611730565b611652565b9050919050565b60006117678261173a565b9050919050565b60006117798261175c565b9050919050565b6117898161176e565b82525050565b60006020820190506117a46000830184611780565b92915050565b6117b381611672565b82525050565b60006020820190506117ce60008301846117aa565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611827826117de565b810181811067ffffffffffffffff82111715611846576118456117ef565b5b80604052505050565b600061185961154c565b9050611865828261181e565b919050565b600067ffffffffffffffff821115611885576118846117ef565b5b61188e826117de565b9050602081019050919050565b82818337600083830152505050565b60006118bd6118b88461186a565b61184f565b9050828152602081018484840111156118d9576118d86117d9565b5b6118e484828561189b565b509392505050565b600082601f830112611901576119006117d4565b5b81356119118482602086016118aa565b91505092915050565b6000806000806080858703121561193457611933611556565b5b60006119428782880161169b565b94505060206119538782880161169b565b935050604061196487828801611581565b925050606085013567ffffffffffffffff8111156119855761198461155b565b5b611991878288016118ec565b91505092959194509250565b60006119a88261175c565b9050919050565b6119b88161199d565b82525050565b60006020820190506119d360008301846119af565b92915050565b60006119e48261175c565b9050919050565b6119f4816119d9565b82525050565b6000602082019050611a0f60008301846119eb565b92915050565b6000611a2082611672565b9050919050565b611a3081611a15565b8114611a3b57600080fd5b50565b600081359050611a4d81611a27565b92915050565b6000611a5e82611672565b9050919050565b611a6e81611a53565b8114611a7957600080fd5b50565b600081359050611a8b81611a65565b92915050565b60008060008060808587031215611aab57611aaa611556565b5b6000611ab98782880161169b565b9450506020611aca87828801611a3e565b9350506040611adb87828801611a7c565b9250506060611aec8782880161169b565b91505092959194509250565b600082825260208201905092915050565b7f53657175656e6365724167656e743a206f6e6c79206465616c65720000000000600082015250565b6000611b3f601b83611af8565b9150611b4a82611b09565b602082019050919050565b60006020820190508181036000830152611b6e81611b32565b9050919050565b7f53657175656e6365724167656e743a20696e76616c696420616d6f756e740000600082015250565b6000611bab601e83611af8565b9150611bb682611b75565b602082019050919050565b60006020820190508181036000830152611bda81611b9e565b9050919050565b600081519050611bf081611684565b92915050565b600060208284031215611c0c57611c0b611556565b5b6000611c1a84828501611be1565b91505092915050565b611c2c81611560565b82525050565b6000604082019050611c4760008301856117aa565b611c546020830184611c23565b9392505050565b60008115159050919050565b611c7081611c5b565b8114611c7b57600080fd5b50565b600081519050611c8d81611c67565b92915050565b600060208284031215611ca957611ca8611556565b5b6000611cb784828501611c7e565b91505092915050565b611cc981611c5b565b82525050565b6000606082019050611ce46000830186611c23565b611cf16020830185611c23565b611cfe6040830184611cc0565b949350505050565b6000602082019050611d1b6000830184611c23565b92915050565b611d2a816115d6565b82525050565b6000604082019050611d456000830185611c23565b611d526020830184611d21565b9392505050565b7f53657175656e6365724167656e743a20696e76616c696420726563697069656e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611db5602183611af8565b9150611dc082611d59565b604082019050919050565b60006020820190508181036000830152611de481611da8565b9050919050565b6000604082019050611e006000830185611c23565b611e0d6020830184611c23565b9392505050565b600081519050611e238161156a565b92915050565b600060208284031215611e3f57611e3e611556565b5b6000611e4d84828501611e14565b91505092915050565b7f53657175656e6365724167656e743a207a65726f206164647265737300000000600082015250565b6000611e8c601c83611af8565b9150611e9782611e56565b602082019050919050565b60006020820190508181036000830152611ebb81611e7f565b9050919050565b7f53657175656e6365724167656e743a207a65726f20616d6f756e740000000000600082015250565b6000611ef8601b83611af8565b9150611f0382611ec2565b602082019050919050565b60006020820190508181036000830152611f2781611eeb565b9050919050565b6000606082019050611f4360008301866117aa565b611f5060208301856117aa565b611f5d6040830184611c23565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f9f578082015181840152602081019050611f84565b60008484015250505050565b6000611fb682611f65565b611fc08185611f70565b9350611fd0818560208601611f81565b611fd9816117de565b840191505092915050565b6000608082019050611ff960008301876117aa565b61200660208301866117aa565b6120136040830185611c23565b81810360608301526120258184611fab565b905095945050505050565b600060608201905061204560008301866117aa565b6120526020830185611c23565b81810360408301526120648184611fab565b9050949350505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006120a76120a261209d8461206e565b611730565b612078565b9050919050565b6120b78161208c565b82525050565b60006020820190506120d260008301846120ae565b9291505056fea26469706673582212203392d9b6e4b63f3a3ccfae9e89d4bb98e593d7200a2b477f8bed544ed895500064736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80638ddc74de1161007f578063e597455411610059578063e597455414610208578063efe7ab2814610233578063f7cee36a1461025e578063f8c8765e14610289576100c2565b80638ddc74de146101985780639de2ee21146101b4578063ce6df54a146101df576100c2565b8063084d9732146100c7578063262c0e66146100f057806361928ecf1461010c5780636d8b821d146101285780637b2b14e81461014457806385d1e2b81461016d575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190611596565b6102b2565b005b61010a60048036038101906101059190611612565b610581565b005b61012660048036038101906101219190611612565b6106a3565b005b610142600480360381019061013d91906116b0565b6107c5565b005b34801561015057600080fd5b5061016b60048036038101906101669190611703565b6109e7565b005b34801561017957600080fd5b50610182610b19565b60405161018f919061178f565b60405180910390f35b6101b260048036038101906101ad9190611612565b610b3f565b005b3480156101c057600080fd5b506101c9610dbd565b6040516101d691906117b9565b60405180910390f35b3480156101eb57600080fd5b506102066004803603810190610201919061191a565b610de1565b005b34801561021457600080fd5b5061021d611223565b60405161022a91906119be565b60405180910390f35b34801561023f57600080fd5b50610248611249565b60405161025591906117b9565b60405180910390f35b34801561026a57600080fd5b50610273611272565b60405161028091906119fa565b60405180910390f35b34801561029557600080fd5b506102b060048036038101906102ab9190611a91565b611298565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033790611b55565b60405180910390fd5b60008111610383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037a90611bc1565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104149190611bf6565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610470929190611c32565b6020604051808303816000875af115801561048f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b39190611c93565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663015bb180838360006040518463ffffffff1660e01b815260040161051493929190611ccf565b600060405180830381600087803b15801561052e57600080fd5b505af1158015610542573d6000803e3d6000fd5b505050507fd935a9bea639b2f1fc5491469854ff222597497dd304a82491c17495938022ba816040516105759190611d06565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690611b55565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663262c0e663484846040518463ffffffff1660e01b815260040161066d929190611d30565b6000604051808303818588803b15801561068657600080fd5b505af115801561069a573d6000803e3d6000fd5b50505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610731576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072890611b55565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663173966873484846040518463ffffffff1660e01b815260040161078f929190611d30565b6000604051808303818588803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b50505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a90611b55565b60405180910390fd5b60008111610896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088d90611bc1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc90611dcb565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e7084836040518363ffffffff1660e01b8152600401610962929190611deb565b600060405180830381600087803b15801561097c57600080fd5b505af1158015610990573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f6ef7a26d50cec3f1a210bed887413d426c9c13575a17872c54e00c4287ac5dce826040516109da9190611d06565b60405180910390a2505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c90611b55565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ad2929190611c32565b6020604051808303816000875af1158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190611c93565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc490611b55565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638ddc74de3484846040518463ffffffff1660e01b8152600401610c2b929190611d30565b6000604051808303818588803b158015610c4457600080fd5b505af1158015610c58573d6000803e3d6000fd5b5050505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d1791906117b9565b602060405180830381865afa158015610d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d589190611e29565b6040518363ffffffff1660e01b8152600401610d75929190611c32565b6020604051808303816000875af1158015610d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db89190611c93565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6690611b55565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610ed95750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b610f18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0f90611ea2565b60405180910390fd5b60008211610f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5290611f0e565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190611bf6565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161102893929190611f2e565b6020604051808303816000875af1158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b9190611c93565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161110b929190611c32565b6020604051808303816000875af115801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190611c93565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ad42030858585856040518563ffffffff1660e01b81526004016111b09493929190611fe4565b600060405180830381600087803b1580156111ca57600080fd5b505af11580156111de573d6000803e3d6000fd5b505050507f32f2c212b245f6ea5fafe13042df4625f05eaa5d4f4e06dd04b1110620b1623684838360405161121593929190612030565b60405180910390a150505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006112a2611524565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff161480156112f05750825b9050600060018367ffffffffffffffff16148015611325575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015611333575080155b1561136a576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156113ba5760018560000160086101000a81548160ff0219169083151502179055505b886000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156115195760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161151091906120bd565b60405180910390a15b505050505050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61157381611560565b811461157e57600080fd5b50565b6000813590506115908161156a565b92915050565b600080604083850312156115ad576115ac611556565b5b60006115bb85828601611581565b92505060206115cc85828601611581565b9150509250929050565b600063ffffffff82169050919050565b6115ef816115d6565b81146115fa57600080fd5b50565b60008135905061160c816115e6565b92915050565b6000806040838503121561162957611628611556565b5b600061163785828601611581565b9250506020611648858286016115fd565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061167d82611652565b9050919050565b61168d81611672565b811461169857600080fd5b50565b6000813590506116aa81611684565b92915050565b6000806000606084860312156116c9576116c8611556565b5b60006116d786828701611581565b93505060206116e88682870161169b565b92505060406116f986828701611581565b9150509250925092565b60006020828403121561171957611718611556565b5b600061172784828501611581565b91505092915050565b6000819050919050565b600061175561175061174b84611652565b611730565b611652565b9050919050565b60006117678261173a565b9050919050565b60006117798261175c565b9050919050565b6117898161176e565b82525050565b60006020820190506117a46000830184611780565b92915050565b6117b381611672565b82525050565b60006020820190506117ce60008301846117aa565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611827826117de565b810181811067ffffffffffffffff82111715611846576118456117ef565b5b80604052505050565b600061185961154c565b9050611865828261181e565b919050565b600067ffffffffffffffff821115611885576118846117ef565b5b61188e826117de565b9050602081019050919050565b82818337600083830152505050565b60006118bd6118b88461186a565b61184f565b9050828152602081018484840111156118d9576118d86117d9565b5b6118e484828561189b565b509392505050565b600082601f830112611901576119006117d4565b5b81356119118482602086016118aa565b91505092915050565b6000806000806080858703121561193457611933611556565b5b60006119428782880161169b565b94505060206119538782880161169b565b935050604061196487828801611581565b925050606085013567ffffffffffffffff8111156119855761198461155b565b5b611991878288016118ec565b91505092959194509250565b60006119a88261175c565b9050919050565b6119b88161199d565b82525050565b60006020820190506119d360008301846119af565b92915050565b60006119e48261175c565b9050919050565b6119f4816119d9565b82525050565b6000602082019050611a0f60008301846119eb565b92915050565b6000611a2082611672565b9050919050565b611a3081611a15565b8114611a3b57600080fd5b50565b600081359050611a4d81611a27565b92915050565b6000611a5e82611672565b9050919050565b611a6e81611a53565b8114611a7957600080fd5b50565b600081359050611a8b81611a65565b92915050565b60008060008060808587031215611aab57611aaa611556565b5b6000611ab98782880161169b565b9450506020611aca87828801611a3e565b9350506040611adb87828801611a7c565b9250506060611aec8782880161169b565b91505092959194509250565b600082825260208201905092915050565b7f53657175656e6365724167656e743a206f6e6c79206465616c65720000000000600082015250565b6000611b3f601b83611af8565b9150611b4a82611b09565b602082019050919050565b60006020820190508181036000830152611b6e81611b32565b9050919050565b7f53657175656e6365724167656e743a20696e76616c696420616d6f756e740000600082015250565b6000611bab601e83611af8565b9150611bb682611b75565b602082019050919050565b60006020820190508181036000830152611bda81611b9e565b9050919050565b600081519050611bf081611684565b92915050565b600060208284031215611c0c57611c0b611556565b5b6000611c1a84828501611be1565b91505092915050565b611c2c81611560565b82525050565b6000604082019050611c4760008301856117aa565b611c546020830184611c23565b9392505050565b60008115159050919050565b611c7081611c5b565b8114611c7b57600080fd5b50565b600081519050611c8d81611c67565b92915050565b600060208284031215611ca957611ca8611556565b5b6000611cb784828501611c7e565b91505092915050565b611cc981611c5b565b82525050565b6000606082019050611ce46000830186611c23565b611cf16020830185611c23565b611cfe6040830184611cc0565b949350505050565b6000602082019050611d1b6000830184611c23565b92915050565b611d2a816115d6565b82525050565b6000604082019050611d456000830185611c23565b611d526020830184611d21565b9392505050565b7f53657175656e6365724167656e743a20696e76616c696420726563697069656e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000611db5602183611af8565b9150611dc082611d59565b604082019050919050565b60006020820190508181036000830152611de481611da8565b9050919050565b6000604082019050611e006000830185611c23565b611e0d6020830184611c23565b9392505050565b600081519050611e238161156a565b92915050565b600060208284031215611e3f57611e3e611556565b5b6000611e4d84828501611e14565b91505092915050565b7f53657175656e6365724167656e743a207a65726f206164647265737300000000600082015250565b6000611e8c601c83611af8565b9150611e9782611e56565b602082019050919050565b60006020820190508181036000830152611ebb81611e7f565b9050919050565b7f53657175656e6365724167656e743a207a65726f20616d6f756e740000000000600082015250565b6000611ef8601b83611af8565b9150611f0382611ec2565b602082019050919050565b60006020820190508181036000830152611f2781611eeb565b9050919050565b6000606082019050611f4360008301866117aa565b611f5060208301856117aa565b611f5d6040830184611c23565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611f9f578082015181840152602081019050611f84565b60008484015250505050565b6000611fb682611f65565b611fc08185611f70565b9350611fd0818560208601611f81565b611fd9816117de565b840191505092915050565b6000608082019050611ff960008301876117aa565b61200660208301866117aa565b6120136040830185611c23565b81810360608301526120258184611fab565b905095945050505050565b600060608201905061204560008301866117aa565b6120526020830185611c23565b81810360408301526120648184611fab565b9050949350505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006120a76120a261209d8461206e565b611730565b612078565b9050919050565b6120b78161208c565b82525050565b60006020820190506120d260008301846120ae565b9291505056fea26469706673582212203392d9b6e4b63f3a3ccfae9e89d4bb98e593d7200a2b477f8bed544ed895500064736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3551,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "dealer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3554,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "lockingPool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILockingPool)4494"
      },
      {
        "astId": 3557,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "lockingInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILockingInfo)4145"
      },
      {
        "astId": 3560,
        "contract": "contracts/SequencerAgent.sol:SequencerAgent",
        "label": "metis",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)979"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)979": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILockingInfo)4145": {
        "encoding": "inplace",
        "label": "contract ILockingInfo",
        "numberOfBytes": "20"
      },
      "t_contract(ILockingPool)4494": {
        "encoding": "inplace",
        "label": "contract ILockingPool",
        "numberOfBytes": "20"
      }
    }
  }
}