{
  "address": "0xadCdDb3ee010eD3Aa5714ab1f05F37B12462a894",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "oldValue",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newValue",
          "type": "uint32"
        }
      ],
      "name": "L2GasSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "L2MetisMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "SequencerAgentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "SequencerAgentTemplateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "SequencerRelocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldValue",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "WithdrawRewardsSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activeSequencerCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeSequencerIds",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addAgent",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metis",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockingPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Bridge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2ChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_l2Gas",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_l2Minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2RewardDispatcher",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Gas",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2RewardDispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "agentId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "sequencerSigner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signerPubKey",
          "type": "bytes"
        }
      ],
      "name": "lockFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockingInfo",
      "outputs": [
        {
          "internalType": "contract ILockingInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockingPool",
      "outputs": [
        {
          "internalType": "contract ILockingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messenger",
      "outputs": [
        {
          "internalType": "contract ICrossDomainMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metis",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalProcessed",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerAgentCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerAgentTemplate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "sequencerAgents",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "agentId",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_l2Gas",
          "type": "uint32"
        }
      ],
      "name": "setL2Gas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencerAgentTemplate",
          "type": "address"
        }
      ],
      "name": "setSequencerAgentTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_withdrawRewards",
          "type": "bool"
        }
      ],
      "name": "setWithdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sumRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "agentId",
          "type": "uint32"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "agentId",
          "type": "uint32"
        }
      ],
      "name": "unlockClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d5a80f920f18c0e0e0fa084d6b55bc5642bc42af62ce827180748e6c9fb5b58",
  "receipt": {
    "to": null,
    "from": "0xc3BD53e8BB7F5a8f98C565aad28C9b618c84D8Fa",
    "contractAddress": "0xadCdDb3ee010eD3Aa5714ab1f05F37B12462a894",
    "transactionIndex": 82,
    "gasUsed": "3539849",
    "logsBloom": "0x
    "blockHash": "0x6118fe4152fc00ec523fd4d78187f2f7c95f9ad3000d0ea7a3328a1311f42761",
    "transactionHash": "0x1d5a80f920f18c0e0e0fa084d6b55bc5642bc42af62ce827180748e6c9fb5b58",
    "logs": [],
    "blockNumber": 6970547,
    "cumulativeGasUsed": "15216011",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "5699b87d94e6d0b9e18c4ecce821ab9f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"}],\"name\":\"L2GasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"L2MetisMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"SequencerAgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"SequencerAgentTemplateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"SequencerRelocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"WithdrawRewardsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeSequencerCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeSequencerIds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addAgent\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_l2Gas\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_l2Minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2RewardDispatcher\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Gas\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2RewardDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"agentId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sequencerSigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signerPubKey\",\"type\":\"bytes\"}],\"name\":\"lockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingInfo\",\"outputs\":[{\"internalType\":\"contract ILockingInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingPool\",\"outputs\":[{\"internalType\":\"contract ILockingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"contract ICrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metis\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProcessed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerAgentCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerAgentTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"sequencerAgents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"agentId\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_l2Gas\",\"type\":\"uint32\"}],\"name\":\"setL2Gas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerAgentTemplate\",\"type\":\"address\"}],\"name\":\"setSequencerAgentTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withdrawRewards\",\"type\":\"bool\"}],\"name\":\"setWithdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"agentId\",\"type\":\"uint32\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"agentId\",\"type\":\"uint32\"}],\"name\":\"unlockClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"L2GasSet(uint32,uint32)\":{\"params\":{\"oldValue\":\"The old L2 gas limit.        \"}},\"L2MetisMinted(uint256)\":{\"params\":{\"amount\":\"The amount of Metis tokens that have been minted.\"}},\"SequencerAgentAdded(uint32,address)\":{\"params\":{\"agent\":\"address of the agent\",\"index\":\"index of the agent\"}},\"SequencerAgentTemplateSet(address,address)\":{\"params\":{\"newValue\":\"The address of the new sequencer agent template.\",\"oldValue\":\"The address of the old sequencer agent template.\"}},\"SequencerRelocked(uint32,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of Metis tokens that have been added to the lock.\",\"index\":\"The index of the sequencer agent in the sequencer list.\",\"reward\":\"The amount of additional rewards that have been locked.\"}},\"WithdrawRewardsSet(bool,bool)\":{\"params\":{\"newValue\":\"The new withdrawRewards.\",\"oldValue\":\"The old withdrawRewards.\"}}},\"kind\":\"dev\",\"methods\":{\"activeSequencerCount()\":{\"returns\":{\"_0\":\"The number of active sequencers.\"}},\"addAgent()\":{\"returns\":{\"_0\":\"The index of the new sequencer agent.\"}},\"implementation()\":{\"returns\":{\"_0\":\"The implementation address\"}},\"lockFor(uint32,address,uint256,bytes)\":{\"params\":{\"agentId\":\"The index of the sequencer agent.\",\"amount\":\"The amount of Metis tokens to lock.\",\"sequencerSigner\":\"The address of the sequencer signer.\",\"signerPubKey\":\"The public key of the sequencer signer.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"relock()\":{\"details\":\"The `relock` function will transfer Metis tokens from the Dealer contract to the sequencer agent contract, and then call the `relock` function on the sequencer agent contract.\",\"returns\":{\"totalProcessed\":\"The total amount of Metis tokens and rewards that have been relocked.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setL2Gas(uint32)\":{\"details\":\"The L2 gas limit is used when minting eMetis tokens on Layer 2.\",\"params\":{\"_l2Gas\":\"The new L2 gas limit.\"}},\"setSequencerAgentTemplate(address)\":{\"params\":{\"_sequencerAgentTemplate\":\"The address of the new sequencer agent template.\"}},\"setWithdrawRewards(bool)\":{\"params\":{\"_withdrawRewards\":\"The new value of the withdrawRewards flag.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock(uint32)\":{\"params\":{\"agentId\":\"The index of the sequencer agent.\"}},\"unlockClaim(uint32)\":{\"params\":{\"agentId\":\"The index of the sequencer agent.\"}}},\"title\":\"Dealer\",\"version\":1},\"userdoc\":{\"events\":{\"L2GasSet(uint32,uint32)\":{\"notice\":\"Emits when the L2 gas limit is set.\"},\"L2MetisMinted(uint256)\":{\"notice\":\"Emits when Metis tokens are minted on Layer 2.\"},\"SequencerAgentAdded(uint32,address)\":{\"notice\":\"Emits when a new sequencer agent is added\"},\"SequencerAgentTemplateSet(address,address)\":{\"notice\":\"Emits when the sequencer agent template is set.\"},\"SequencerRelocked(uint32,uint256,uint256)\":{\"notice\":\"Emits when additional Metis tokens and rewards are locked for a sequencer.\"},\"WithdrawRewardsSet(bool,bool)\":{\"notice\":\"Emits when withdrawRewards is set.\"}},\"kind\":\"user\",\"methods\":{\"activeSequencerCount()\":{\"notice\":\"Returns the number of active sequencers.\"},\"activeSequencerIds(uint256)\":{\"notice\":\"The list of active sequencer agent IDs.\"},\"addAgent()\":{\"notice\":\"Adds a new sequencer agent.\"},\"implementation()\":{\"notice\":\"Use Dealer as a beacon of BeaconProxy for SequencerAgent\"},\"initialize(address,address,address,uint256,uint32,address,address)\":{\"notice\":\"Initializes the contract.\"},\"l2ChainId()\":{\"notice\":\"The ID of the L2 chain.\"},\"l2Gas()\":{\"notice\":\"L2 gas limit.\"},\"l2Minter()\":{\"notice\":\"The address of the L2 MetisMinter contract.\"},\"l2RewardDispatcher()\":{\"notice\":\"The address of the L2 RewardDispatcher contract.\"},\"lockFor(uint32,address,uint256,bytes)\":{\"notice\":\"Locks Metis tokens for a new sequencer.\"},\"lockingInfo()\":{\"notice\":\"The LockingInfo contract address.\"},\"lockingPool()\":{\"notice\":\"The LockingPool contract address.\"},\"messenger()\":{\"notice\":\"The L2 messenger contract.\"},\"metis()\":{\"notice\":\"The Metis token.\"},\"relock()\":{\"notice\":\"Facilitates the process of augmenting the locked Metis tokens and rewards for all currently active sequencers.\"},\"sequencerAgentCount()\":{\"notice\":\"The number of sequencer agents.\"},\"sequencerAgentTemplate()\":{\"notice\":\"The template contract for sequencer agents.\"},\"sequencerAgents(uint32)\":{\"notice\":\"The list of sequencer agents.\"},\"setActive(uint32,bool)\":{\"notice\":\"Sets the active status of a sequencer agent.\"},\"setL2Gas(uint32)\":{\"notice\":\"Sets the L2 gas limit.\"},\"setSequencerAgentTemplate(address)\":{\"notice\":\"Sets the sequencer agent template.\"},\"setWithdrawRewards(bool)\":{\"notice\":\"set withdraw rewards\"},\"sumRewards()\":{\"notice\":\"The sum of rewards of all sequencers.\"},\"totalLocked()\":{\"notice\":\"Returns the total amount of Metis tokens that have been locked for all sequencers.\"},\"unlock(uint32)\":{\"notice\":\"Unlock Metis tokens and terminate the sequencer.\"},\"unlockClaim(uint32)\":{\"notice\":\"The `unlockClaim` function allows a sequencer to claim their Metis tokens after the unlocking waiting period has elapsed.\"},\"withdrawRewards()\":{\"notice\":\"withdraw rewards\"}},\"notice\":\"The Dealer contract is responsible for the allocation of Metis tokens from Layer 2 to the LockingPool for sequencers, through sequencer agents.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dealer.sol\":\"Dealer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] so that it can be accessed externally.\\n *\\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\\n * the beacon to not upgrade the implementation maliciously.\\n *\\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\\n * an inconsistent state where the beacon storage slot does not match the beacon address.\\n */\\ncontract BeaconProxy is Proxy {\\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\\n    address private immutable _beacon;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\\n        _beacon = beacon;\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Returns the beacon.\\n     */\\n    function _getBeacon() internal view virtual returns (address) {\\n        return _beacon;\\n    }\\n}\\n\",\"keccak256\":\"0x387ebdcb365b8e620f26645d2b34a161cd39eedfb0219e8baff55630c5ae113c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/Dealer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interface/ICrossDomainEnabled.sol\\\";\\nimport \\\"../interface/ILockingPool.sol\\\";\\nimport \\\"../interface/IVeMetisMinter.sol\\\";\\nimport \\\"../interface/ICrossDomainMessenger.sol\\\";\\nimport \\\"./SequencerAgent.sol\\\";\\n\\n\\n/// @title Dealer\\n/// @notice The Dealer contract is responsible for the allocation of Metis tokens from Layer 2 to the LockingPool for sequencers, through sequencer agents.\\ncontract Dealer is OwnableUpgradeable {\\n\\n    /// @notice Emits when a new sequencer agent is added\\n    /// @param index index of the agent\\n    /// @param agent address of the agent\\n    event SequencerAgentAdded(uint32 index, address agent);\\n\\n    /// @notice Emits when additional Metis tokens and rewards are locked for a sequencer.\\n    /// @param index The index of the sequencer agent in the sequencer list.\\n    /// @param amount The amount of Metis tokens that have been added to the lock.\\n    /// @param reward The amount of additional rewards that have been locked.\\n    event SequencerRelocked(uint32 index, uint256 amount, uint256 reward);\\n\\n    /// @notice Emits when Metis tokens are minted on Layer 2.\\n    /// @param amount The amount of Metis tokens that have been minted.\\n    event L2MetisMinted(uint256 amount);\\n\\n    /// @notice Emits when the sequencer agent template is set.\\n    /// @param oldValue The address of the old sequencer agent template.\\n    /// @param newValue The address of the new sequencer agent template.\\n    event SequencerAgentTemplateSet(address indexed oldValue, address indexed newValue);\\n\\n    /// @notice Emits when the L2 gas limit is set.\\n    /// @param oldValue The old L2 gas limit.        \\n    event L2GasSet(uint32 oldValue, uint32 newValue);\\n\\n    /// @notice Emits when withdrawRewards is set.\\n    /// @param oldValue The old withdrawRewards.\\n    /// @param newValue The new withdrawRewards.\\n    event WithdrawRewardsSet(bool oldValue, bool newValue);\\n\\n    /// @notice The template contract for sequencer agents.\\n    address public sequencerAgentTemplate;\\n\\n    /// @notice The Metis token.\\n    IERC20 public metis;\\n\\n    /// @notice The LockingPool contract address.\\n    ILockingPool public lockingPool;\\n\\n    /// @notice The LockingInfo contract address.\\n    ILockingInfo public lockingInfo;\\n\\n    /// @notice The L2 messenger contract.\\n    ICrossDomainMessenger public messenger;\\n\\n    /// @notice The ID of the L2 chain.\\n    uint256 public l2ChainId;\\n\\n    /// @notice The address of the L2 MetisMinter contract.\\n    address public l2Minter;\\n\\n    /// @notice The address of the L2 RewardDispatcher contract.\\n    address public l2RewardDispatcher;\\n\\n    /// @notice The list of sequencer agents.\\n    mapping(uint32 => address) public sequencerAgents;\\n\\n    /// @notice The number of sequencer agents.\\n    uint32 public sequencerAgentCount;\\n\\n    /// @notice The list of active sequencer agent IDs.\\n    uint32[] public activeSequencerIds;\\n\\n    /// @notice The sum of rewards of all sequencers.\\n    uint256 public sumRewards;\\n\\n    /// @notice L2 gas limit.\\n    uint32 public l2Gas;\\n\\n    /// @notice withdraw rewards\\n    bool public withdrawRewards;\\n\\n    /// @notice Initializes the contract.\\n    function initialize( \\n        address _metis, \\n        address _lockingPool, \\n        address _l1Bridge, \\n        uint256 _l2ChainId, \\n        uint32 _l2Gas, \\n        address _l2Minter, \\n        address _l2RewardDispatcher\\n        ) public initializer {\\n        require( _metis != address(0) && _lockingPool != address(0) && _l1Bridge != address(0) && _l2Minter != address(0) && _l2RewardDispatcher != address(0), \\\"Dealer: zero address\\\");\\n        __Ownable_init(msg.sender);\\n        metis = IERC20(_metis);\\n        lockingPool = ILockingPool(_lockingPool);\\n        lockingInfo = lockingPool.escrow();\\n        messenger = ICrossDomainMessenger(ICrossDomainEnabled(_l1Bridge).messenger());\\n        l2ChainId = _l2ChainId;\\n        l2Gas = _l2Gas;\\n        l2Minter = _l2Minter;\\n        l2RewardDispatcher = _l2RewardDispatcher;\\n\\n    }\\n\\n    /// @notice Returns the number of active sequencers.\\n    /// @return The number of active sequencers.\\n    function activeSequencerCount() external view returns (uint32) {\\n        return uint32(activeSequencerIds.length);\\n    }\\n\\n    /// @notice set withdraw rewards\\n    /// @param _withdrawRewards The new value of the withdrawRewards flag.\\n    function setWithdrawRewards(bool _withdrawRewards) external onlyOwner {\\n        bool _old = withdrawRewards;\\n        withdrawRewards = _withdrawRewards;\\n        emit WithdrawRewardsSet(_old, _withdrawRewards);\\n    }\\n\\n    /// @notice Adds a new sequencer agent.\\n    /// @return The index of the new sequencer agent.\\n    function addAgent() external onlyOwner returns (uint32) {\\n        bytes memory data = abi.encodeWithSelector(SequencerAgent.initialize.selector, address(this), lockingPool, lockingInfo, address(metis));\\n        address clone = address(new BeaconProxy(address(this), data));\\n        uint32 index = sequencerAgentCount;\\n        sequencerAgents[index] = clone;\\n        emit SequencerAgentAdded(index, clone);\\n        sequencerAgentCount++;\\n        return index;\\n    }\\n\\n    /// @notice Locks Metis tokens for a new sequencer.\\n    /// @param agentId The index of the sequencer agent.\\n    /// @param sequencerSigner The address of the sequencer signer.\\n    /// @param amount The amount of Metis tokens to lock.\\n    /// @param signerPubKey The public key of the sequencer signer.\\n    function lockFor(uint32 agentId, address sequencerSigner, uint256 amount, bytes memory signerPubKey) external onlyOwner {\\n        address agent = sequencerAgents[agentId];\\n        IERC20(metis).transferFrom(msg.sender, agent, amount);\\n        SequencerAgent(agent).lock(sequencerSigner, l2Minter, amount, signerPubKey);\\n        _setActive(agentId, true);\\n    }\\n\\n    /// @notice Unlock Metis tokens and terminate the sequencer.\\n    /// @param agentId The index of the sequencer agent.\\n    function unlock(uint32 agentId) external payable onlyOwner {\\n        SequencerAgent(sequencerAgents[agentId]).unlock(l2Gas);\\n        _removeFromActiveList(agentId);\\n    }\\n\\n    /// @notice The `unlockClaim` function allows a sequencer to claim their Metis tokens after the unlocking waiting period has elapsed.\\n    /// @param agentId The index of the sequencer agent.\\n    function unlockClaim(uint32 agentId) external payable onlyOwner {\\n        SequencerAgent(sequencerAgents[agentId]).unlockClaim(l2Gas);\\n    }\\n\\n    /// @notice Facilitates the process of augmenting the locked Metis tokens and rewards for all currently active sequencers.\\n    /// @dev The `relock` function will transfer Metis tokens from the Dealer contract to the sequencer agent contract, and then call the `relock` function on the sequencer agent contract.\\n    /// @return totalProcessed The total amount of Metis tokens and rewards that have been relocked.\\n    function relock() external payable returns (uint256 totalProcessed) {\\n        require(activeSequencerIds.length > 0, \\\"Dealer: no active sequencer\\\");\\n\\n        uint maxLock = lockingInfo.maxLock();\\n        uint256 undistributedAmount = metis.balanceOf(address(this));\\n        uint256 totalRewards = 0;\\n\\n        for (uint32 i = 0; i < activeSequencerIds.length; i++) {\\n            uint32 agentId = activeSequencerIds[i];\\n            SequencerAgent agent = SequencerAgent(sequencerAgents[agentId]);\\n            ILockingPool.SequencerData memory seq = agent.sequencerData();\\n            (uint256 reward, uint256 locked) = (seq.reward, seq.amount);\\n            totalRewards += reward;\\n\\n            // The lock quota means the amount of Metis tokens that can be locked for the sequencer, due to the maximum lock amount.\\n            uint256 lockQuota = locked < maxLock ? maxLock - locked : 0;\\n\\n            // The amount of Metis tokens that can be locked is the minimum of the lock quota and the undistributed amount.\\n            uint256 lockAmount = Math.min(lockQuota, undistributedAmount);\\n\\n            // The undistributed amount should be reduced by the amount of Metis tokens that have been locked.\\n            undistributedAmount -= lockAmount;\\n\\n            // If there is not any lock amount or reward, the process should be skipped.\\n            uint256 toBeProcessed = lockAmount + reward;\\n            if (toBeProcessed == 0) {\\n                continue;\\n            }\\n\\n            totalProcessed += toBeProcessed;\\n\\n            // The rewards are withdrawn if the `withdrawRewards` flag is set to true, or if the locked amount plus the amount to be processed exceeds the maximum lock amount.\\n            bool _withdrawRewards = withdrawRewards || locked + toBeProcessed > maxLock;\\n            if (_withdrawRewards && reward > 0) {\\n                agent.withdrawRewards(l2Gas);\\n            }\\n\\n            // If the lock amount is not zero, or if we decided to convert the rewards to lock amount, the `relock` function is called.\\n            if (!_withdrawRewards || lockAmount > 0) {\\n                IERC20(metis).transfer(address(agent), lockAmount);\\n                agent.relock(lockAmount);\\n                emit SequencerRelocked(agentId, lockAmount, reward);\\n            }\\n        }\\n\\n        // In the event of any rewards, the MetisMinter contract on Layer 2 is invoked to mint eMetis tokens. These tokens are then distributed as rewards to seMetis holders.\\n        if (totalRewards > 0) {\\n            _mintL2EMetis(totalRewards);\\n            sumRewards += totalRewards;\\n        }\\n    }\\n\\n    /// @notice Sets the active status of a sequencer agent.\\n    function setActive(uint32 agentId, bool active) external onlyOwner {\\n        _setActive(agentId, active);\\n    }\\n\\n    /// @notice Sets the sequencer agent template.\\n    /// @param _sequencerAgentTemplate The address of the new sequencer agent template.\\n    function setSequencerAgentTemplate(address _sequencerAgentTemplate) external onlyOwner {\\n        require(_sequencerAgentTemplate != address(0), \\\"Dealer: zero address\\\");\\n        sequencerAgentTemplate = _sequencerAgentTemplate;\\n    }\\n\\n    /// @notice Sets the L2 gas limit.\\n    /// @param _l2Gas The new L2 gas limit.\\n    /// @dev The L2 gas limit is used when minting eMetis tokens on Layer 2.\\n    function setL2Gas(uint32 _l2Gas) external onlyOwner {\\n        uint32 _old = l2Gas;\\n        l2Gas = _l2Gas;\\n        emit L2GasSet(_old, _l2Gas);\\n    }\\n\\n    /// @notice Returns the total amount of Metis tokens that have been locked for all sequencers.\\n    function totalLocked() external view returns (uint256) {\\n        uint256 total = 0;\\n        for (uint32 i = 0; i < activeSequencerIds.length; i++) {\\n            uint32 agentId = activeSequencerIds[i];\\n            SequencerAgent agent = SequencerAgent(sequencerAgents[agentId]);\\n            uint256 locked = agent.sequencerData().amount;\\n            total += locked;\\n        }\\n        return total;\\n    }\\n\\n    /// @notice Use Dealer as a beacon of BeaconProxy for SequencerAgent\\n    /// @return The implementation address\\n    function implementation() external view returns (address) {\\n        return sequencerAgentTemplate;\\n    }\\n\\n    /// @notice Sets the active status of a sequencer agent.\\n    function _setActive(uint32 agentId, bool active) internal {\\n        if (active) {\\n            for (uint32 i = 0; i < activeSequencerIds.length; i++) {\\n                require(activeSequencerIds[i] != agentId, \\\"Dealer: already active\\\");\\n            }\\n            activeSequencerIds.push(agentId);\\n        } else {\\n            _removeFromActiveList(agentId);\\n        }\\n    }\\n\\n    /// @notice mint veMetis on Layer 2\\n    /// @param amount Metis amount\\n    function _mintL2EMetis(uint256 amount) internal {\\n        bytes memory message = abi.encodeWithSelector(IVeMetisMinter.mintFromL1.selector, amount);\\n        messenger.sendMessageViaChainId{value:msg.value}(l2ChainId, l2Minter, message, l2Gas);\\n        emit L2MetisMinted(amount);\\n    }\\n\\n    /// @notice Removes a sequencer agent from the active list.\\n    /// @param agentId The index of the sequencer agent.\\n    /// @dev The sequencer agent is removed from the active list by swapping it with the last element in the list, and then popping the last element.\\n    function _removeFromActiveList(uint32 agentId) internal returns (uint32 index) {\\n        index = _findFromActiveList(agentId);\\n        require(index < type(uint32).max, \\\"Dealer: not active\\\");\\n        activeSequencerIds[index] = activeSequencerIds[activeSequencerIds.length - 1];\\n        activeSequencerIds.pop();\\n    }\\n\\n    /// @notice Finds the index of a sequencer agent in the active list.\\n    /// @param agentId The index of the sequencer agent.\\n    /// @return The index of the sequencer agent in the active list.\\n    function _findFromActiveList(uint32 agentId) internal view returns (uint32) {\\n        for (uint32 index = 0; index < activeSequencerIds.length; index++) {\\n            if (activeSequencerIds[index] == agentId) {\\n                return index;\\n            }\\n        }\\n        return type(uint32).max;\\n    }\\n}\",\"keccak256\":\"0x5f888e0b6e01ff542a01a9ba60a63efdaacecef416aee2753ccdfdc3c0795ff7\",\"license\":\"MIT\"},\"contracts/SequencerAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interface/ILockingPool.sol\\\";\\nimport \\\"../interface/ILockingInfo.sol\\\";\\n\\ncontract SequencerAgent is ContextUpgradeable {\\n    address public dealer;\\n    ILockingPool public lockingPool;\\n    ILockingInfo public lockingInfo;\\n    IERC20 public metis;\\n    uint256 public sequencerId;\\n    address public sequencerSigner;\\n    bool public active;\\n\\n    modifier onlyDealer() {\\n        require(msg.sender == dealer, \\\"SequencerAgent: only dealer\\\");\\n        _;\\n    }\\n\\n    function initialize(address _dealer, ILockingPool _lockingPool, ILockingInfo _lockingInfo, address _metis) external initializer {\\n        dealer = _dealer;\\n        lockingPool = _lockingPool;\\n        lockingInfo = _lockingInfo;\\n        metis = IERC20(_metis);\\n    }\\n\\n    function lock(address _sequencerSigner, address _rewardRecipient, uint256 _amount, bytes memory _signerPubKey) public onlyDealer {\\n        require(sequencerId == 0, \\\"SequencerAgent: sequencer already locked\\\");\\n        require(_sequencerSigner != address(0) && _rewardRecipient != address(0), \\\"SequencerAgent: zero address\\\");\\n        require(_amount > 0, \\\"SequencerAgent: zero amount\\\");\\n\\n        sequencerSigner = _sequencerSigner;\\n        metis.approve(address(lockingInfo), type(uint256).max);\\n        lockingPool.lockWithRewardRecipient(sequencerSigner, _rewardRecipient, _amount, _signerPubKey);\\n        sequencerId = lockingPool.seqSigners(sequencerSigner);\\n        active = true;\\n    }\\n\\n    function relock(uint256 amount) public onlyDealer {\\n        lockingPool.relock(sequencerId, amount, true);\\n    }\\n\\n    function withdrawRewards(uint32 l2Gas) public onlyDealer {\\n        lockingPool.withdrawRewards(sequencerId, l2Gas);\\n    }\\n\\n    function sequencerData() public view returns (ILockingPool.SequencerData memory) {\\n        return lockingPool.sequencers(sequencerId);\\n    }\\n\\n    function unlock(uint32 l2Gas) public payable onlyDealer {\\n        lockingPool.unlock{value: msg.value}(sequencerId, l2Gas);\\n        active = false;\\n    }\\n\\n    function unlockClaim(uint32 l2Gas) public payable onlyDealer {\\n        lockingPool.unlockClaim{value: msg.value}(sequencerId, l2Gas);\\n        IERC20(metis).transfer(dealer, IERC20(metis).balanceOf(address(this)));\\n    }\\n}\",\"keccak256\":\"0xe9673f5dbd9cf1928a47f48b976298ddc584a2e46d256097c1c9aa0ba92114a6\",\"license\":\"MIT\"},\"interface/ICrossDomainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICrossDomainEnabled {\\n    function messenger() external view returns (address);\\n}\",\"keccak256\":\"0x2806d6261202f57849c4e98c2f5786882886e45c67751c2b38dd5f9d0456a7fa\",\"license\":\"MIT\"},\"interface/ICrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ICrossDomainMessenger\\n */\\ninterface ICrossDomainMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce,\\n        uint256 gasLimit,\\n        uint256 chainId\\n    );\\n    event RelayedMessage(bytes32 indexed msgHash);\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n    \\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external payable;\\n\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _chainId L2 chain id.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessageViaChainId(\\n        uint256 _chainId,\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external payable;\\n\\n    function replayMessageViaChainId(\\n        uint256 _chainId,\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _queueIndex,\\n        uint32 _oldGasLimit,\\n        uint32 _newGasLimit\\n    )external;\\n}\",\"keccak256\":\"0xfc7bee4eda45bec59ba5ebf35ab65e4d9dbc0092407a67b33e4e338e6be1336f\",\"license\":\"MIT\"},\"interface/ILockingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ISequencerInfo} from \\\"./ISequencerInfo.sol\\\";\\n\\ninterface ILockingInfo {\\n    function minLock() external view returns(uint256);\\n    function maxLock() external view returns(uint256);\\n\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMinAmounts'\\n     * @param _newMinLock new min lock.\\n     */\\n    event SetMinLock(uint256 _newMinLock);\\n\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMaxAmounts'\\n     * @param _newMaxLock new max lock.\\n     */\\n    event SetMaxLock(uint256 _newMaxLock);\\n\\n    /**\\n     * @dev Emitted when the reward payer is changed\\n     * @param _payer new reward payer\\n     */\\n    event SetRewardPayer(address _payer);\\n\\n    /**\\n     * @dev Emitted when sequencer locks in '_lockFor()' in LockingPool.\\n     * @param signer sequencer address.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param activationBatch sequencer's first epoch as proposer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     * @param signerPubkey public key of the sequencer\\n     */\\n    event Locked(\\n        address indexed signer,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 indexed activationBatch,\\n        uint256 amount,\\n        uint256 total,\\n        bytes signerPubkey\\n    );\\n\\n    /**\\n     * @dev Emitted when the sequencer increase lock amoun in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking new amount\\n     * @param total the total locking amount\\n     */\\n    event Relocked(uint256 indexed sequencerId, uint256 amount, uint256 total);\\n\\n    /**\\n     * @dev Emitted when sequencer relocking in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param newAmount the updated lock amount.\\n     */\\n    event LockUpdate(\\n        uint256 indexed sequencerId,\\n        uint256 indexed nonce,\\n        uint256 indexed newAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer withdraw rewards in 'withdrawRewards' or 'unlockClaim'\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param recipient the address receive reward tokens\\n     * @param amount the reward amount.\\n     * @param totalAmount total rewards has liquidated\\n     */\\n    event ClaimRewards(\\n        uint256 indexed sequencerId,\\n        address recipient,\\n        uint256 indexed amount,\\n        uint256 indexed totalAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in '_unlock()'.\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param deactivationBatch  last batch for sequencer.\\n     * @param deactivationTime unlock block timestamp.\\n     * @param unlockClaimTime when user can claim locked token.\\n     * @param amount locking amount\\n     */\\n    event UnlockInit(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 deactivationBatch,\\n        uint256 deactivationTime,\\n        uint256 unlockClaimTime,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in 'unlockClaim()'\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     */\\n    event Unlocked(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 amount,\\n        uint256 total\\n    );\\n\\n    /**\\n     * @dev Emitted when batch update in  'batchSubmitRewards'\\n     * @param _newBatchId new batchId.\\n     */\\n    event BatchSubmitReward(uint256 _newBatchId);\\n\\n    /**\\n     * @dev Emitted when the sequencer public key is updated in 'updateSigner()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param oldSigner oldSigner old address of the sequencer.\\n     * @param newSigner newSigner new address of the sequencer.\\n     * @param signerPubkey signerPubkey public key of the sequencer.\\n     */\\n    event SignerChange(\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        address indexed oldSigner,\\n        address indexed newSigner,\\n        bytes signerPubkey\\n    );\\n\\n    function newSequencer(\\n        uint256 _id,\\n        address _owner,\\n        address _signer,\\n        uint256 _amount,\\n        uint256 _batchId,\\n        bytes calldata _signerPubkey\\n    ) external;\\n\\n    function increaseLocked(\\n        uint256 _seqId,\\n        uint256 _nonce,\\n        address _owner,\\n        uint256 _locked,\\n        uint256 _incoming,\\n        uint256 _fromReward\\n    ) external;\\n\\n    function initializeUnlock(\\n        uint256 _seqId,\\n        uint256 _reward,\\n        uint32 _l2gas,\\n        ISequencerInfo.Sequencer calldata _seq\\n    ) external payable;\\n\\n    function finalizeUnlock(\\n        address _owner,\\n        uint256 _seqId,\\n        uint256 _amount,\\n        uint256 _reward,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function liquidateReward(\\n        uint256 _seqId,\\n        uint256 _amount,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function distributeReward(uint256 _batchId, uint256 _totalReward) external;\\n\\n    function logSignerChange(\\n        uint256 sequencerId,\\n        address oldSigner,\\n        address newSigner,\\n        uint256 nonce,\\n        bytes calldata signerPubkey\\n    ) external;\\n}\",\"keccak256\":\"0xe63cc48d66aa1359f5b9048a3f21be6f2926130b0360cc495c23737dd7248f1e\",\"license\":\"MIT\"},\"interface/ILockingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ILockingInfo.sol\\\";\\nimport \\\"./ISequencerInfo.sol\\\";\\n\\ninterface ILockingPool is ISequencerInfo {\\n    struct SequencerData {\\n        uint256 amount; // sequencer current locked\\n        uint256 reward; // sequencer current reward that have not cleamed\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 updatedBatch; // batch id of the last updated\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consencus client\\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\\n    }\\n\\n    function lockFor(address _signer, uint256 _amount, bytes calldata _signerPubkey) external;\\n    function lockWithRewardRecipient(address _signer, address _rewardRecipient, uint256 _amount, bytes calldata _signerPubkey) external;\\n    function relock(uint256 _seqId, uint256 _amount, bool _lockReward) external;\\n    function withdrawRewards(uint256 _seqId, uint32 _l2Gas) external;\\n    function unlock( uint256 _seqId, uint32 _l2Gas) external payable;\\n    function unlockClaim(uint256 _seqId, uint32 _l2Gas) external payable;\\n    function escrow() external view returns (ILockingInfo);\\n    function sequencers(uint256 seqId) external view returns (SequencerData memory);\\n    function seqSigners(address signer) external view returns (uint256 seqId);\\n\\n    /**\\n     * @dev Emitted when WITHDRAWAL_DELAY is updated.\\n     * @param _cur current withdraw delay time\\n     * @param _prev previours withdraw delay time\\n     */\\n    event WithrawDelayTimeChange(uint256 _cur, uint256 _prev);\\n\\n    /**\\n     * @dev Emitted when the proxy update threshold in 'updateBlockReward()'.\\n     * @param newReward new block reward\\n     * @param oldReward  old block reward\\n     */\\n    event RewardUpdate(uint256 newReward, uint256 oldReward);\\n\\n    /**\\n     * @dev Emitted when mpc address update in 'UpdateMpc'\\n     * @param _newMpc new min lock.\\n     */\\n    event UpdateMpc(address _newMpc);\\n\\n    /**\\n     * @dev Emitted when SignerUpdateThrottle is updated\\n     * @param _n new min value\\n     */\\n    event SetSignerUpdateThrottle(uint256 _n);\\n}\",\"keccak256\":\"0x43a28aeb18dc696d8c141ca49d1ecb62341b01e9d18471c4df9921cd3f98f227\",\"license\":\"GPL-2.0-or-later\"},\"interface/ISequencerInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ISequencerInfo {\\n    error OwnedSequencer();\\n    error SignerExisted();\\n    error NoSuchSeq();\\n    error NullAddress();\\n    error SeqNotActive();\\n    error NotSeqOwner();\\n    error NotSeqSigner();\\n    error NoRewardRecipient();\\n    error NotWhitelisted();\\n\\n    // the sequencer status\\n    enum Status {\\n        Unavailabe, // placeholder for default value\\n        Inactive, // the sequencer will be Inactive if its owner starts unlock\\n        Active, // the sequencer is active when it locks tokens on the contract\\n        Unlocked // Exited, the sequencer has no locked tokens, and it's no longer produce blocks on L2\\n    }\\n\\n    struct Sequencer {\\n        uint256 amount; // sequencer current locked\\n        uint256 reward; // sequencer current reward that have not cleamed\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 updatedBatch; // batch id of the last updated\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consencus client\\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\\n        bytes pubkey; // sequencer signer pubkey\\n        address rewardRecipient; // sequencer rewarder recipient address\\n        Status status; // sequencer status\\n    }\\n\\n    /**\\n     * @dev Emitted if owner call 'setWhitelist'\\n     * @param _user the address who can lock token\\n     * @param _yes white address state\\n     */\\n    event SetWhitelist(address _user, bool _yes);\\n\\n    /**\\n     * @dev Emitted when reward recipient address update in 'setSequencerRewardRecipient'\\n     * @param _seqId the sequencerId\\n     * @param _recipient the address receive reward token\\n     */\\n    event SequencerRewardRecipientChanged(uint256 _seqId, address _recipient);\\n\\n    /**\\n     * @dev Emitted when sequencer owner is changed\\n     * @param _seqId the sequencerId\\n     * @param _owner the sequencer owner\\n     */\\n    event SequencerOwnerChanged(uint256 _seqId, address _owner);\\n\\n    function seqOwners(address owner) external returns (uint256 seqId);\\n}\",\"keccak256\":\"0x391c0da4e5953583f9d184d2646d4bc69654161f9ba5da0fa600c79a72b3c1ac\",\"license\":\"MIT\"},\"interface/IVeMetisMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IVeMetisMinter {\\n    function mint(address user, uint256 amount) external;\\n\\n    function mintFromL1(uint256 amount) external;\\n\\n    function depositToL1Dealer(uint256 amount) external payable;\\n}\",\"keccak256\":\"0x19711cc1c9f794c07bf02cca34f9895ef30b1372ca32b5c7a9d1d46147ac158c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613f65806100206000396000f3fe608060405260043610620001fa5760003560e01c80638da5cb5b116200010f578063d6ae3cd511620000a3578063eb2c5798116200006d578063eb2c579814620006bb578063efa412d014620006e9578063f2fde38b1462000717578063f7cee36a146200074557620001fa565b8063d6ae3cd514620005fd578063e5974554146200062d578063e92d61e5146200065d578063e956eaf1146200068d57620001fa565b8063af372db711620000e5578063af372db7146200054f578063b699ce5f146200057d578063c53b573d14620005ab578063c7b8981c14620005cd57620001fa565b80638da5cb5b14620004bf5780638db8ad8814620004ef5780639e935704146200051f57620001fa565b80633cbb6979116200019357806367d93c81116200015d57806367d93c811462000425578063715018a614620004455780637ca4f8b0146200045f57806385d1e2b8146200048f57620001fa565b80633cbb69791462000351578063457cb58614620003815780635689141214620003c55780635c60da1b14620003f557620001fa565b80631abdaf6a11620001d55780631abdaf6a146200027f57806333bec7e714620002c357806335cd359914620002f15780633cb747bf146200032157620001fa565b8063080e1e4e14620001ff5780631152eb41146200022f5780631221e6a5146200025f575b600080fd5b3480156200020c57600080fd5b506200021762000775565b6040516200022691906200262d565b60405180910390f35b3480156200023c57600080fd5b50620002476200079b565b6040516200025691906200266b565b60405180910390f35b6200027d6004803603810190620002779190620026cd565b620007a8565b005b3480156200028c57600080fd5b50620002ab6004803603810190620002a591906200273a565b62000875565b604051620002ba91906200266b565b60405180910390f35b348015620002d057600080fd5b50620002ef6004803603810190620002e99190620026cd565b620008b0565b005b348015620002fe57600080fd5b506200030962000931565b6040516200031891906200266b565b60405180910390f35b3480156200032e57600080fd5b506200033962000b60565b604051620003489190620027d7565b60405180910390f35b3480156200035e57600080fd5b506200036962000b86565b6040516200037891906200266b565b60405180910390f35b3480156200038e57600080fd5b50620003ad6004803603810190620003a79190620026cd565b62000b9c565b604051620003bc91906200262d565b60405180910390f35b348015620003d257600080fd5b50620003dd62000bcf565b604051620003ec919062002805565b60405180910390f35b3480156200040257600080fd5b506200040d62000d24565b6040516200041c91906200262d565b60405180910390f35b6200044360048036038101906200043d9190620026cd565b62000d4d565b005b3480156200045257600080fd5b506200045d62000e26565b005b3480156200046c57600080fd5b506200047762000e3e565b60405162000486919062002805565b60405180910390f35b3480156200049c57600080fd5b50620004a762000e44565b604051620004b6919062002847565b60405180910390f35b348015620004cc57600080fd5b50620004d762000e6a565b604051620004e691906200262d565b60405180910390f35b348015620004fc57600080fd5b506200050762000ea4565b6040516200051691906200262d565b60405180910390f35b3480156200052c57600080fd5b506200053762000ec8565b6040516200054691906200266b565b60405180910390f35b3480156200055c57600080fd5b506200057b6004803603810190620005759190620029f7565b62000ede565b005b3480156200058a57600080fd5b50620005a96004803603810190620005a3919062002a88565b6200107f565b005b620005b56200162d565b604051620005c4919062002805565b60405180910390f35b348015620005da57600080fd5b50620005e562001bee565b604051620005f4919062002b58565b60405180910390f35b3480156200060a57600080fd5b506200061562001c01565b60405162000624919062002805565b60405180910390f35b3480156200063a57600080fd5b506200064562001c07565b60405162000654919062002b9a565b60405180910390f35b3480156200066a57600080fd5b506200067562001c2d565b6040516200068491906200262d565b60405180910390f35b3480156200069a57600080fd5b50620006b96004803603810190620006b3919062002be8565b62001c53565b005b348015620006c857600080fd5b50620006e76004803603810190620006e1919062002c2f565b62001c6d565b005b348015620006f657600080fd5b506200071560048036038101906200070f919062002c61565b62001d2c565b005b3480156200072457600080fd5b506200074360048036038101906200073d919062002c2f565b62001da3565b005b3480156200075257600080fd5b506200075d62001e30565b6040516200076c919062002cb8565b60405180910390f35b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a80549050905090565b620007b262001e56565b600860008263ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631221e6a5600c60009054906101000a900463ffffffff166040518263ffffffff1660e01b81526004016200083e91906200266b565b600060405180830381600087803b1580156200085957600080fd5b505af11580156200086e573d6000803e3d6000fd5b5050505050565b600a81815481106200088657600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b620008ba62001e56565b6000600c60009054906101000a900463ffffffff16905081600c60006101000a81548163ffffffff021916908363ffffffff1602179055507f4042b09a75e5a67c8cc2a57e00de6d29fb5202b7207afba895eb8b5cc3e2179e81836040516200092592919062002cd5565b60405180910390a15050565b60006200093d62001e56565b600063f8c8765e60e01b30600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602401620009c6949392919062002d02565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000308260405162000a3790620025da565b62000a4492919062002dd8565b604051809103906000f08015801562000a61573d6000803e3d6000fd5b5090506000600960009054906101000a900463ffffffff16905081600860008363ffffffff1663ffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffcdf0e51b92207a6c5cfa485e975b62686da57da9499feafd12185ee26a860d9818360405162000b0c92919062002e0c565b60405180910390a16009600081819054906101000a900463ffffffff168092919062000b389062002e68565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080935050505090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900463ffffffff1681565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000905060005b600a805490508163ffffffff16101562000d1c576000600a8263ffffffff168154811062000c0c5762000c0b62002e99565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690506000600860008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166376d9f95c6040518163ffffffff1660e01b815260040161014060405180830381865afa15801562000cc7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ced91906200300a565b600001519050808562000d0191906200303d565b9450505050808062000d139062002e68565b91505062000bd9565b508091505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b62000d5762001e56565b600860008263ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166367d93c81600c60009054906101000a900463ffffffff166040518263ffffffff1660e01b815260040162000de391906200266b565b600060405180830381600087803b15801562000dfe57600080fd5b505af115801562000e13573d6000803e3d6000fd5b5050505062000e228162001ee6565b5050565b62000e3062001e56565b62000e3c600062002030565b565b600b5481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008062000e7762002109565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900463ffffffff1681565b62000ee862001e56565b6000600860008663ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3383866040518463ffffffff1660e01b815260040162000f8d9392919062003078565b6020604051808303816000875af115801562000fad573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd39190620030cc565b508073ffffffffffffffffffffffffffffffffffffffff1663ce6df54a85600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686866040518563ffffffff1660e01b8152600401620010379493929190620030fe565b600060405180830381600087803b1580156200105257600080fd5b505af115801562001067573d6000803e3d6000fd5b505050506200107885600162002131565b5050505050565b60006200108b6200225e565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015620010da5750825b9050600060018367ffffffffffffffff1614801562001110575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156200111f575080155b1562001157576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315620011a85760018560000160086101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614158015620012135750600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614155b80156200124d5750600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614155b8015620012875750600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b8015620012c15750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b62001303576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012fa90620031b3565b60405180910390fd5b6200130e3362002286565b8b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2fdcc176040518163ffffffff1660e01b8152600401602060405180830381865afa158015620013fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200142491906200321a565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508973ffffffffffffffffffffffffffffffffffffffff16633cb747bf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620014b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014d691906200324c565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508860058190555087600c60006101000a81548163ffffffff021916908363ffffffff16021790555086600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156200161f5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051620016169190620032d5565b60405180910390a15b505050505050505050505050565b600080600a805490501162001679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620016709062003342565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c0b3e466040518163ffffffff1660e01b8152600401602060405180830381865afa158015620016e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200170f919062003364565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016200177091906200262d565b602060405180830381865afa1580156200178e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017b4919062003364565b90506000805b600a805490508163ffffffff16101562001bb6576000600a8263ffffffff1681548110620017ed57620017ec62002e99565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690506000600860008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166376d9f95c6040518163ffffffff1660e01b815260040161014060405180830381865afa158015620018a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018ce91906200300a565b905060008082602001518360000151915091508187620018ef91906200303d565b965060008982106200190357600062001912565b818a62001911919062003396565b5b9050600062001922828b6200229e565b9050808a62001932919062003396565b9950600084826200194491906200303d565b9050600081036200195d57505050505050505062001ba0565b808d6200196b91906200303d565b9c506000600c60049054906101000a900460ff16806200199757508c82866200199591906200303d565b115b9050808015620019a75750600086115b1562001a2f578773ffffffffffffffffffffffffffffffffffffffff166356387b91600c60009054906101000a900463ffffffff166040518263ffffffff1660e01b8152600401620019fa91906200266b565b600060405180830381600087803b15801562001a1557600080fd5b505af115801562001a2a573d6000803e3d6000fd5b505050505b80158062001a3d5750600083115b1562001b9657600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89856040518363ffffffff1660e01b815260040162001aa2929190620033d1565b6020604051808303816000875af115801562001ac2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ae89190620030cc565b508773ffffffffffffffffffffffffffffffffffffffff1663a98d38f0846040518263ffffffff1660e01b815260040162001b24919062002805565b600060405180830381600087803b15801562001b3f57600080fd5b505af115801562001b54573d6000803e3d6000fd5b505050507fb8aafdec9bacdc76bfea3c330063c391a2904d4f91e71f97a91534f3c8ce4ab589848860405162001b8d93929190620033fe565b60405180910390a15b5050505050505050505b808062001bad9062002e68565b915050620017ba565b50600081111562001be85762001bcc81620022b9565b80600b600082825462001be091906200303d565b925050819055505b50505090565b600c60049054906101000a900460ff1681565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62001c5d62001e56565b62001c69828262002131565b5050565b62001c7762001e56565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362001ce9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ce090620031b3565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b62001d3662001e56565b6000600c60049054906101000a900460ff16905081600c60046101000a81548160ff0219169083151502179055507fba50596d5d8d3fffda559f307b84b1b0bdba201192d70b393820eab501346b1e818360405162001d979291906200343b565b60405180910390a15050565b62001dad62001e56565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362001e225760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162001e1991906200262d565b60405180910390fd5b62001e2d8162002030565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62001e6062002440565b73ffffffffffffffffffffffffffffffffffffffff1662001e8062000e6a565b73ffffffffffffffffffffffffffffffffffffffff161462001ee45762001ea662002440565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040162001edb91906200262d565b60405180910390fd5b565b600062001ef38262002448565b905063ffffffff80168163ffffffff161062001f46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001f3d90620034b8565b60405180910390fd5b600a6001600a8054905062001f5c919062003396565b8154811062001f705762001f6f62002e99565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16600a8263ffffffff168154811062001fb35762001fb262002e99565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550600a80548062001ffb5762001ffa620034da565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055919050565b60006200203c62002109565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b80156200224d5760005b600a805490508163ffffffff161015620021f8578263ffffffff16600a8263ffffffff168154811062002173576200217262002e99565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1603620021e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620021d99062003559565b60405180910390fd5b8080620021ef9062002e68565b9150506200213b565b50600a8290806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff1602179055506200225a565b620022588262001ee6565b505b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b62002290620024e8565b6200229b816200252b565b50565b6000818310620022af5781620022b1565b825b905092915050565b600063eb82afb360e01b82604051602401620022d6919062002805565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344dd5ed634600554600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600c60009054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401620023cf94939291906200357b565b6000604051808303818588803b158015620023e957600080fd5b505af1158015620023fe573d6000803e3d6000fd5b50505050507fd644e527c1896057ce642adfbc00f04d6b23d4c2fb30529522184d151dc087dc8260405162002434919062002805565b60405180910390a15050565b600033905090565b600080600090505b600a805490508163ffffffff161015620024da578263ffffffff16600a8263ffffffff168154811062002488576200248762002e99565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1603620024c45780915050620024e3565b8080620024d19062002e68565b91505062002450565b5063ffffffff90505b919050565b620024f2620025b8565b62002529576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b62002535620024e8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620025aa5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620025a191906200262d565b60405180910390fd5b620025b58162002030565b50565b6000620025c46200225e565b60000160089054906101000a900460ff16905090565b61096080620035d083390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200261582620025e8565b9050919050565b620026278162002608565b82525050565b60006020820190506200264460008301846200261c565b92915050565b600063ffffffff82169050919050565b62002665816200264a565b82525050565b60006020820190506200268260008301846200265a565b92915050565b6000604051905090565b600080fd5b600080fd5b620026a7816200264a565b8114620026b357600080fd5b50565b600081359050620026c7816200269c565b92915050565b600060208284031215620026e657620026e562002692565b5b6000620026f684828501620026b6565b91505092915050565b6000819050919050565b6200271481620026ff565b81146200272057600080fd5b50565b600081359050620027348162002709565b92915050565b60006020828403121562002753576200275262002692565b5b6000620027638482850162002723565b91505092915050565b6000819050919050565b600062002797620027916200278b84620025e8565b6200276c565b620025e8565b9050919050565b6000620027ab8262002776565b9050919050565b6000620027bf826200279e565b9050919050565b620027d181620027b2565b82525050565b6000602082019050620027ee6000830184620027c6565b92915050565b620027ff81620026ff565b82525050565b60006020820190506200281c6000830184620027f4565b92915050565b60006200282f826200279e565b9050919050565b620028418162002822565b82525050565b60006020820190506200285e600083018462002836565b92915050565b6200286f8162002608565b81146200287b57600080fd5b50565b6000813590506200288f8162002864565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620028ea826200289f565b810181811067ffffffffffffffff821117156200290c576200290b620028b0565b5b80604052505050565b60006200292162002688565b90506200292f8282620028df565b919050565b600067ffffffffffffffff821115620029525762002951620028b0565b5b6200295d826200289f565b9050602081019050919050565b82818337600083830152505050565b6000620029906200298a8462002934565b62002915565b905082815260208101848484011115620029af57620029ae6200289a565b5b620029bc8482856200296a565b509392505050565b600082601f830112620029dc57620029db62002895565b5b8135620029ee84826020860162002979565b91505092915050565b6000806000806080858703121562002a145762002a1362002692565b5b600062002a2487828801620026b6565b945050602062002a37878288016200287e565b935050604062002a4a8782880162002723565b925050606085013567ffffffffffffffff81111562002a6e5762002a6d62002697565b5b62002a7c87828801620029c4565b91505092959194509250565b600080600080600080600060e0888a03121562002aaa5762002aa962002692565b5b600062002aba8a828b016200287e565b975050602062002acd8a828b016200287e565b965050604062002ae08a828b016200287e565b955050606062002af38a828b0162002723565b945050608062002b068a828b01620026b6565b93505060a062002b198a828b016200287e565b92505060c062002b2c8a828b016200287e565b91505092959891949750929550565b60008115159050919050565b62002b528162002b3b565b82525050565b600060208201905062002b6f600083018462002b47565b92915050565b600062002b82826200279e565b9050919050565b62002b948162002b75565b82525050565b600060208201905062002bb1600083018462002b89565b92915050565b62002bc28162002b3b565b811462002bce57600080fd5b50565b60008135905062002be28162002bb7565b92915050565b6000806040838503121562002c025762002c0162002692565b5b600062002c1285828601620026b6565b925050602062002c258582860162002bd1565b9150509250929050565b60006020828403121562002c485762002c4762002692565b5b600062002c58848285016200287e565b91505092915050565b60006020828403121562002c7a5762002c7962002692565b5b600062002c8a8482850162002bd1565b91505092915050565b600062002ca0826200279e565b9050919050565b62002cb28162002c93565b82525050565b600060208201905062002ccf600083018462002ca7565b92915050565b600060408201905062002cec60008301856200265a565b62002cfb60208301846200265a565b9392505050565b600060808201905062002d1960008301876200261c565b62002d28602083018662002836565b62002d37604083018562002ca7565b62002d4660608301846200261c565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562002d8b57808201518184015260208101905062002d6e565b60008484015250505050565b600062002da48262002d4f565b62002db0818562002d5a565b935062002dc281856020860162002d6b565b62002dcd816200289f565b840191505092915050565b600060408201905062002def60008301856200261c565b818103602083015262002e03818462002d97565b90509392505050565b600060408201905062002e2360008301856200265a565b62002e3260208301846200261c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062002e75826200264a565b915063ffffffff820362002e8e5762002e8d62002e39565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b60008151905062002ede8162002709565b92915050565b60008151905062002ef58162002864565b92915050565b6000610140828403121562002f155762002f1462002ec8565b5b62002f2261014062002915565b9050600062002f348482850162002ecd565b600083015250602062002f4a8482850162002ecd565b602083015250604062002f608482850162002ecd565b604083015250606062002f768482850162002ecd565b606083015250608062002f8c8482850162002ecd565b60808301525060a062002fa28482850162002ecd565b60a08301525060c062002fb88482850162002ecd565b60c08301525060e062002fce8482850162002ecd565b60e08301525061010062002fe58482850162002ee4565b6101008301525061012062002ffd8482850162002ee4565b6101208301525092915050565b6000610140828403121562003024576200302362002692565b5b6000620030348482850162002efb565b91505092915050565b60006200304a82620026ff565b91506200305783620026ff565b925082820190508082111562003072576200307162002e39565b5b92915050565b60006060820190506200308f60008301866200261c565b6200309e60208301856200261c565b620030ad6040830184620027f4565b949350505050565b600081519050620030c68162002bb7565b92915050565b600060208284031215620030e557620030e462002692565b5b6000620030f584828501620030b5565b91505092915050565b60006080820190506200311560008301876200261c565b6200312460208301866200261c565b620031336040830185620027f4565b818103606083015262003147818462002d97565b905095945050505050565b600082825260208201905092915050565b7f4465616c65723a207a65726f2061646472657373000000000000000000000000600082015250565b60006200319b60148362003152565b9150620031a88262003163565b602082019050919050565b60006020820190508181036000830152620031ce816200318c565b9050919050565b6000620031e28262002608565b9050919050565b620031f481620031d5565b81146200320057600080fd5b50565b6000815190506200321481620031e9565b92915050565b60006020828403121562003233576200323262002692565b5b6000620032438482850162003203565b91505092915050565b60006020828403121562003265576200326462002692565b5b6000620032758482850162002ee4565b91505092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000620032bd620032b7620032b1846200327e565b6200276c565b62003288565b9050919050565b620032cf816200329c565b82525050565b6000602082019050620032ec6000830184620032c4565b92915050565b7f4465616c65723a206e6f206163746976652073657175656e6365720000000000600082015250565b60006200332a601b8362003152565b91506200333782620032f2565b602082019050919050565b600060208201905081810360008301526200335d816200331b565b9050919050565b6000602082840312156200337d576200337c62002692565b5b60006200338d8482850162002ecd565b91505092915050565b6000620033a382620026ff565b9150620033b083620026ff565b9250828203905081811115620033cb57620033ca62002e39565b5b92915050565b6000604082019050620033e860008301856200261c565b620033f76020830184620027f4565b9392505050565b60006060820190506200341560008301866200265a565b620034246020830185620027f4565b620034336040830184620027f4565b949350505050565b600060408201905062003452600083018562002b47565b62003461602083018462002b47565b9392505050565b7f4465616c65723a206e6f74206163746976650000000000000000000000000000600082015250565b6000620034a060128362003152565b9150620034ad8262003468565b602082019050919050565b60006020820190508181036000830152620034d38162003491565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4465616c65723a20616c72656164792061637469766500000000000000000000600082015250565b60006200354160168362003152565b91506200354e8262003509565b602082019050919050565b60006020820190508181036000830152620035748162003532565b9050919050565b6000608082019050620035926000830187620027f4565b620035a160208301866200261c565b8181036040830152620035b5818562002d97565b9050620035c660608301846200265a565b9594505050505056fe60a060405260405161096038038061096083398181016040528101906100259190610684565b610035828261007060201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050610795565b61007f8261016360201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff167f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e60405160405180910390a26000815111156101505761014a8273ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013e91906106e0565b8261030660201b60201c565b5061015f565b61015e61039060201b60201c565b5b5050565b60008173ffffffffffffffffffffffffffffffffffffffff163b036101bf57806040517f64ced0ec0000000000000000000000000000000000000000000000000000000081526004016101b6919061071c565b60405180910390fd5b806101f27fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6103cd60201b60201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a491906106e0565b905060008173ffffffffffffffffffffffffffffffffffffffff163b0361030257806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016102f9919061071c565b60405180910390fd5b5050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051610330919061077e565b600060405180830381855af49150503d806000811461036b576040519150601f19603f3d011682016040523d82523d6000602084013e610370565b606091505b50915091506103868583836103d760201b60201c565b9250505092915050565b60003411156103cb576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000819050919050565b6060826103f2576103ed8261046c60201b60201c565b610464565b6000825114801561041a575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561045c57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401610453919061071c565b60405180910390fd5b819050610465565b5b9392505050565b60008151111561047f5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104f0826104c5565b9050919050565b610500816104e5565b811461050b57600080fd5b50565b60008151905061051d816104f7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105768261052d565b810181811067ffffffffffffffff821117156105955761059461053e565b5b80604052505050565b60006105a86104b1565b90506105b4828261056d565b919050565b600067ffffffffffffffff8211156105d4576105d361053e565b5b6105dd8261052d565b9050602081019050919050565b60005b838110156106085780820151818401526020810190506105ed565b60008484015250505050565b6000610627610622846105b9565b61059e565b90508281526020810184848401111561064357610642610528565b5b61064e8482856105ea565b509392505050565b600082601f83011261066b5761066a610523565b5b815161067b848260208601610614565b91505092915050565b6000806040838503121561069b5761069a6104bb565b5b60006106a98582860161050e565b925050602083015167ffffffffffffffff8111156106ca576106c96104c0565b5b6106d685828601610656565b9150509250929050565b6000602082840312156106f6576106f56104bb565b5b60006107048482850161050e565b91505092915050565b610716816104e5565b82525050565b6000602082019050610731600083018461070d565b92915050565b600081519050919050565b600081905092915050565b600061075882610737565b6107628185610742565b93506107728185602086016105ea565b80840191505092915050565b600061078a828461074d565b915081905092915050565b6080516101b16107af600039600060c701526101b16000f3fe608060405261000c61000e565b005b61001e610019610020565b61009d565b565b600061002a6100c3565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610074573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610098919061014e565b905090565b3660008037600080366000845af43d6000803e80600081146100be573d6000f35b3d6000fd5b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061011b826100f0565b9050919050565b61012b81610110565b811461013657600080fd5b50565b60008151905061014881610122565b92915050565b600060208284031215610164576101636100eb565b5b600061017284828501610139565b9150509291505056fea2646970667358221220318efb3add371acc6afd6545498a71373c16dc1386e578ed8c02b6ac326dd4ca64736f6c63430008140033a26469706673582212206b4c9ee802e7f73d0249829f13a387931e28e0bf7ede67d8f713047dd60a73f464736f6c63430008140033",
  "deployedBytecode": "0x608060405260043610620001fa5760003560e01c80638da5cb5b116200010f578063d6ae3cd511620000a3578063eb2c5798116200006d578063eb2c579814620006bb578063efa412d014620006e9578063f2fde38b1462000717578063f7cee36a146200074557620001fa565b8063d6ae3cd514620005fd578063e5974554146200062d578063e92d61e5146200065d578063e956eaf1146200068d57620001fa565b8063af372db711620000e5578063af372db7146200054f578063b699ce5f146200057d578063c53b573d14620005ab578063c7b8981c14620005cd57620001fa565b80638da5cb5b14620004bf5780638db8ad8814620004ef5780639e935704146200051f57620001fa565b80633cbb6979116200019357806367d93c81116200015d57806367d93c811462000425578063715018a614620004455780637ca4f8b0146200045f57806385d1e2b8146200048f57620001fa565b80633cbb69791462000351578063457cb58614620003815780635689141214620003c55780635c60da1b14620003f557620001fa565b80631abdaf6a11620001d55780631abdaf6a146200027f57806333bec7e714620002c357806335cd359914620002f15780633cb747bf146200032157620001fa565b8063080e1e4e14620001ff5780631152eb41146200022f5780631221e6a5146200025f575b600080fd5b3480156200020c57600080fd5b506200021762000775565b6040516200022691906200262d565b60405180910390f35b3480156200023c57600080fd5b50620002476200079b565b6040516200025691906200266b565b60405180910390f35b6200027d6004803603810190620002779190620026cd565b620007a8565b005b3480156200028c57600080fd5b50620002ab6004803603810190620002a591906200273a565b62000875565b604051620002ba91906200266b565b60405180910390f35b348015620002d057600080fd5b50620002ef6004803603810190620002e99190620026cd565b620008b0565b005b348015620002fe57600080fd5b506200030962000931565b6040516200031891906200266b565b60405180910390f35b3480156200032e57600080fd5b506200033962000b60565b604051620003489190620027d7565b60405180910390f35b3480156200035e57600080fd5b506200036962000b86565b6040516200037891906200266b565b60405180910390f35b3480156200038e57600080fd5b50620003ad6004803603810190620003a79190620026cd565b62000b9c565b604051620003bc91906200262d565b60405180910390f35b348015620003d257600080fd5b50620003dd62000bcf565b604051620003ec919062002805565b60405180910390f35b3480156200040257600080fd5b506200040d62000d24565b6040516200041c91906200262d565b60405180910390f35b6200044360048036038101906200043d9190620026cd565b62000d4d565b005b3480156200045257600080fd5b506200045d62000e26565b005b3480156200046c57600080fd5b506200047762000e3e565b60405162000486919062002805565b60405180910390f35b3480156200049c57600080fd5b50620004a762000e44565b604051620004b6919062002847565b60405180910390f35b348015620004cc57600080fd5b50620004d762000e6a565b604051620004e691906200262d565b60405180910390f35b348015620004fc57600080fd5b506200050762000ea4565b6040516200051691906200262d565b60405180910390f35b3480156200052c57600080fd5b506200053762000ec8565b6040516200054691906200266b565b60405180910390f35b3480156200055c57600080fd5b506200057b6004803603810190620005759190620029f7565b62000ede565b005b3480156200058a57600080fd5b50620005a96004803603810190620005a3919062002a88565b6200107f565b005b620005b56200162d565b604051620005c4919062002805565b60405180910390f35b348015620005da57600080fd5b50620005e562001bee565b604051620005f4919062002b58565b60405180910390f35b3480156200060a57600080fd5b506200061562001c01565b60405162000624919062002805565b60405180910390f35b3480156200063a57600080fd5b506200064562001c07565b60405162000654919062002b9a565b60405180910390f35b3480156200066a57600080fd5b506200067562001c2d565b6040516200068491906200262d565b60405180910390f35b3480156200069a57600080fd5b50620006b96004803603810190620006b3919062002be8565b62001c53565b005b348015620006c857600080fd5b50620006e76004803603810190620006e1919062002c2f565b62001c6d565b005b348015620006f657600080fd5b506200071560048036038101906200070f919062002c61565b62001d2c565b005b3480156200072457600080fd5b506200074360048036038101906200073d919062002c2f565b62001da3565b005b3480156200075257600080fd5b506200075d62001e30565b6040516200076c919062002cb8565b60405180910390f35b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a80549050905090565b620007b262001e56565b600860008263ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631221e6a5600c60009054906101000a900463ffffffff166040518263ffffffff1660e01b81526004016200083e91906200266b565b600060405180830381600087803b1580156200085957600080fd5b505af11580156200086e573d6000803e3d6000fd5b5050505050565b600a81815481106200088657600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b620008ba62001e56565b6000600c60009054906101000a900463ffffffff16905081600c60006101000a81548163ffffffff021916908363ffffffff1602179055507f4042b09a75e5a67c8cc2a57e00de6d29fb5202b7207afba895eb8b5cc3e2179e81836040516200092592919062002cd5565b60405180910390a15050565b60006200093d62001e56565b600063f8c8765e60e01b30600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602401620009c6949392919062002d02565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000308260405162000a3790620025da565b62000a4492919062002dd8565b604051809103906000f08015801562000a61573d6000803e3d6000fd5b5090506000600960009054906101000a900463ffffffff16905081600860008363ffffffff1663ffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ffcdf0e51b92207a6c5cfa485e975b62686da57da9499feafd12185ee26a860d9818360405162000b0c92919062002e0c565b60405180910390a16009600081819054906101000a900463ffffffff168092919062000b389062002e68565b91906101000a81548163ffffffff021916908363ffffffff1602179055505080935050505090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900463ffffffff1681565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000905060005b600a805490508163ffffffff16101562000d1c576000600a8263ffffffff168154811062000c0c5762000c0b62002e99565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690506000600860008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166376d9f95c6040518163ffffffff1660e01b815260040161014060405180830381865afa15801562000cc7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ced91906200300a565b600001519050808562000d0191906200303d565b9450505050808062000d139062002e68565b91505062000bd9565b508091505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b62000d5762001e56565b600860008263ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166367d93c81600c60009054906101000a900463ffffffff166040518263ffffffff1660e01b815260040162000de391906200266b565b600060405180830381600087803b15801562000dfe57600080fd5b505af115801562000e13573d6000803e3d6000fd5b5050505062000e228162001ee6565b5050565b62000e3062001e56565b62000e3c600062002030565b565b600b5481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008062000e7762002109565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900463ffffffff1681565b62000ee862001e56565b6000600860008663ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3383866040518463ffffffff1660e01b815260040162000f8d9392919062003078565b6020604051808303816000875af115801562000fad573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd39190620030cc565b508073ffffffffffffffffffffffffffffffffffffffff1663ce6df54a85600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686866040518563ffffffff1660e01b8152600401620010379493929190620030fe565b600060405180830381600087803b1580156200105257600080fd5b505af115801562001067573d6000803e3d6000fd5b505050506200107885600162002131565b5050505050565b60006200108b6200225e565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015620010da5750825b9050600060018367ffffffffffffffff1614801562001110575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156200111f575080155b1562001157576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315620011a85760018560000160086101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614158015620012135750600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614155b80156200124d5750600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614155b8015620012875750600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b8015620012c15750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b62001303576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012fa90620031b3565b60405180910390fd5b6200130e3362002286565b8b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2fdcc176040518163ffffffff1660e01b8152600401602060405180830381865afa158015620013fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200142491906200321a565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508973ffffffffffffffffffffffffffffffffffffffff16633cb747bf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620014b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014d691906200324c565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508860058190555087600c60006101000a81548163ffffffff021916908363ffffffff16021790555086600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083156200161f5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051620016169190620032d5565b60405180910390a15b505050505050505050505050565b600080600a805490501162001679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620016709062003342565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c0b3e466040518163ffffffff1660e01b8152600401602060405180830381865afa158015620016e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200170f919062003364565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016200177091906200262d565b602060405180830381865afa1580156200178e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017b4919062003364565b90506000805b600a805490508163ffffffff16101562001bb6576000600a8263ffffffff1681548110620017ed57620017ec62002e99565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690506000600860008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166376d9f95c6040518163ffffffff1660e01b815260040161014060405180830381865afa158015620018a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018ce91906200300a565b905060008082602001518360000151915091508187620018ef91906200303d565b965060008982106200190357600062001912565b818a62001911919062003396565b5b9050600062001922828b6200229e565b9050808a62001932919062003396565b9950600084826200194491906200303d565b9050600081036200195d57505050505050505062001ba0565b808d6200196b91906200303d565b9c506000600c60049054906101000a900460ff16806200199757508c82866200199591906200303d565b115b9050808015620019a75750600086115b1562001a2f578773ffffffffffffffffffffffffffffffffffffffff166356387b91600c60009054906101000a900463ffffffff166040518263ffffffff1660e01b8152600401620019fa91906200266b565b600060405180830381600087803b15801562001a1557600080fd5b505af115801562001a2a573d6000803e3d6000fd5b505050505b80158062001a3d5750600083115b1562001b9657600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89856040518363ffffffff1660e01b815260040162001aa2929190620033d1565b6020604051808303816000875af115801562001ac2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ae89190620030cc565b508773ffffffffffffffffffffffffffffffffffffffff1663a98d38f0846040518263ffffffff1660e01b815260040162001b24919062002805565b600060405180830381600087803b15801562001b3f57600080fd5b505af115801562001b54573d6000803e3d6000fd5b505050507fb8aafdec9bacdc76bfea3c330063c391a2904d4f91e71f97a91534f3c8ce4ab589848860405162001b8d93929190620033fe565b60405180910390a15b5050505050505050505b808062001bad9062002e68565b915050620017ba565b50600081111562001be85762001bcc81620022b9565b80600b600082825462001be091906200303d565b925050819055505b50505090565b600c60049054906101000a900460ff1681565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62001c5d62001e56565b62001c69828262002131565b5050565b62001c7762001e56565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362001ce9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ce090620031b3565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b62001d3662001e56565b6000600c60049054906101000a900460ff16905081600c60046101000a81548160ff0219169083151502179055507fba50596d5d8d3fffda559f307b84b1b0bdba201192d70b393820eab501346b1e818360405162001d979291906200343b565b60405180910390a15050565b62001dad62001e56565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362001e225760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040162001e1991906200262d565b60405180910390fd5b62001e2d8162002030565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62001e6062002440565b73ffffffffffffffffffffffffffffffffffffffff1662001e8062000e6a565b73ffffffffffffffffffffffffffffffffffffffff161462001ee45762001ea662002440565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040162001edb91906200262d565b60405180910390fd5b565b600062001ef38262002448565b905063ffffffff80168163ffffffff161062001f46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001f3d90620034b8565b60405180910390fd5b600a6001600a8054905062001f5c919062003396565b8154811062001f705762001f6f62002e99565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16600a8263ffffffff168154811062001fb35762001fb262002e99565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff160217905550600a80548062001ffb5762001ffa620034da565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055919050565b60006200203c62002109565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b80156200224d5760005b600a805490508163ffffffff161015620021f8578263ffffffff16600a8263ffffffff168154811062002173576200217262002e99565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1603620021e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620021d99062003559565b60405180910390fd5b8080620021ef9062002e68565b9150506200213b565b50600a8290806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff1602179055506200225a565b620022588262001ee6565b505b5050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b62002290620024e8565b6200229b816200252b565b50565b6000818310620022af5781620022b1565b825b905092915050565b600063eb82afb360e01b82604051602401620022d6919062002805565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344dd5ed634600554600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600c60009054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401620023cf94939291906200357b565b6000604051808303818588803b158015620023e957600080fd5b505af1158015620023fe573d6000803e3d6000fd5b50505050507fd644e527c1896057ce642adfbc00f04d6b23d4c2fb30529522184d151dc087dc8260405162002434919062002805565b60405180910390a15050565b600033905090565b600080600090505b600a805490508163ffffffff161015620024da578263ffffffff16600a8263ffffffff168154811062002488576200248762002e99565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1603620024c45780915050620024e3565b8080620024d19062002e68565b91505062002450565b5063ffffffff90505b919050565b620024f2620025b8565b62002529576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b62002535620024e8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620025aa5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620025a191906200262d565b60405180910390fd5b620025b58162002030565b50565b6000620025c46200225e565b60000160089054906101000a900460ff16905090565b61096080620035d083390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200261582620025e8565b9050919050565b620026278162002608565b82525050565b60006020820190506200264460008301846200261c565b92915050565b600063ffffffff82169050919050565b62002665816200264a565b82525050565b60006020820190506200268260008301846200265a565b92915050565b6000604051905090565b600080fd5b600080fd5b620026a7816200264a565b8114620026b357600080fd5b50565b600081359050620026c7816200269c565b92915050565b600060208284031215620026e657620026e562002692565b5b6000620026f684828501620026b6565b91505092915050565b6000819050919050565b6200271481620026ff565b81146200272057600080fd5b50565b600081359050620027348162002709565b92915050565b60006020828403121562002753576200275262002692565b5b6000620027638482850162002723565b91505092915050565b6000819050919050565b600062002797620027916200278b84620025e8565b6200276c565b620025e8565b9050919050565b6000620027ab8262002776565b9050919050565b6000620027bf826200279e565b9050919050565b620027d181620027b2565b82525050565b6000602082019050620027ee6000830184620027c6565b92915050565b620027ff81620026ff565b82525050565b60006020820190506200281c6000830184620027f4565b92915050565b60006200282f826200279e565b9050919050565b620028418162002822565b82525050565b60006020820190506200285e600083018462002836565b92915050565b6200286f8162002608565b81146200287b57600080fd5b50565b6000813590506200288f8162002864565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620028ea826200289f565b810181811067ffffffffffffffff821117156200290c576200290b620028b0565b5b80604052505050565b60006200292162002688565b90506200292f8282620028df565b919050565b600067ffffffffffffffff821115620029525762002951620028b0565b5b6200295d826200289f565b9050602081019050919050565b82818337600083830152505050565b6000620029906200298a8462002934565b62002915565b905082815260208101848484011115620029af57620029ae6200289a565b5b620029bc8482856200296a565b509392505050565b600082601f830112620029dc57620029db62002895565b5b8135620029ee84826020860162002979565b91505092915050565b6000806000806080858703121562002a145762002a1362002692565b5b600062002a2487828801620026b6565b945050602062002a37878288016200287e565b935050604062002a4a8782880162002723565b925050606085013567ffffffffffffffff81111562002a6e5762002a6d62002697565b5b62002a7c87828801620029c4565b91505092959194509250565b600080600080600080600060e0888a03121562002aaa5762002aa962002692565b5b600062002aba8a828b016200287e565b975050602062002acd8a828b016200287e565b965050604062002ae08a828b016200287e565b955050606062002af38a828b0162002723565b945050608062002b068a828b01620026b6565b93505060a062002b198a828b016200287e565b92505060c062002b2c8a828b016200287e565b91505092959891949750929550565b60008115159050919050565b62002b528162002b3b565b82525050565b600060208201905062002b6f600083018462002b47565b92915050565b600062002b82826200279e565b9050919050565b62002b948162002b75565b82525050565b600060208201905062002bb1600083018462002b89565b92915050565b62002bc28162002b3b565b811462002bce57600080fd5b50565b60008135905062002be28162002bb7565b92915050565b6000806040838503121562002c025762002c0162002692565b5b600062002c1285828601620026b6565b925050602062002c258582860162002bd1565b9150509250929050565b60006020828403121562002c485762002c4762002692565b5b600062002c58848285016200287e565b91505092915050565b60006020828403121562002c7a5762002c7962002692565b5b600062002c8a8482850162002bd1565b91505092915050565b600062002ca0826200279e565b9050919050565b62002cb28162002c93565b82525050565b600060208201905062002ccf600083018462002ca7565b92915050565b600060408201905062002cec60008301856200265a565b62002cfb60208301846200265a565b9392505050565b600060808201905062002d1960008301876200261c565b62002d28602083018662002836565b62002d37604083018562002ca7565b62002d4660608301846200261c565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562002d8b57808201518184015260208101905062002d6e565b60008484015250505050565b600062002da48262002d4f565b62002db0818562002d5a565b935062002dc281856020860162002d6b565b62002dcd816200289f565b840191505092915050565b600060408201905062002def60008301856200261c565b818103602083015262002e03818462002d97565b90509392505050565b600060408201905062002e2360008301856200265a565b62002e3260208301846200261c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062002e75826200264a565b915063ffffffff820362002e8e5762002e8d62002e39565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b60008151905062002ede8162002709565b92915050565b60008151905062002ef58162002864565b92915050565b6000610140828403121562002f155762002f1462002ec8565b5b62002f2261014062002915565b9050600062002f348482850162002ecd565b600083015250602062002f4a8482850162002ecd565b602083015250604062002f608482850162002ecd565b604083015250606062002f768482850162002ecd565b606083015250608062002f8c8482850162002ecd565b60808301525060a062002fa28482850162002ecd565b60a08301525060c062002fb88482850162002ecd565b60c08301525060e062002fce8482850162002ecd565b60e08301525061010062002fe58482850162002ee4565b6101008301525061012062002ffd8482850162002ee4565b6101208301525092915050565b6000610140828403121562003024576200302362002692565b5b6000620030348482850162002efb565b91505092915050565b60006200304a82620026ff565b91506200305783620026ff565b925082820190508082111562003072576200307162002e39565b5b92915050565b60006060820190506200308f60008301866200261c565b6200309e60208301856200261c565b620030ad6040830184620027f4565b949350505050565b600081519050620030c68162002bb7565b92915050565b600060208284031215620030e557620030e462002692565b5b6000620030f584828501620030b5565b91505092915050565b60006080820190506200311560008301876200261c565b6200312460208301866200261c565b620031336040830185620027f4565b818103606083015262003147818462002d97565b905095945050505050565b600082825260208201905092915050565b7f4465616c65723a207a65726f2061646472657373000000000000000000000000600082015250565b60006200319b60148362003152565b9150620031a88262003163565b602082019050919050565b60006020820190508181036000830152620031ce816200318c565b9050919050565b6000620031e28262002608565b9050919050565b620031f481620031d5565b81146200320057600080fd5b50565b6000815190506200321481620031e9565b92915050565b60006020828403121562003233576200323262002692565b5b6000620032438482850162003203565b91505092915050565b60006020828403121562003265576200326462002692565b5b6000620032758482850162002ee4565b91505092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000620032bd620032b7620032b1846200327e565b6200276c565b62003288565b9050919050565b620032cf816200329c565b82525050565b6000602082019050620032ec6000830184620032c4565b92915050565b7f4465616c65723a206e6f206163746976652073657175656e6365720000000000600082015250565b60006200332a601b8362003152565b91506200333782620032f2565b602082019050919050565b600060208201905081810360008301526200335d816200331b565b9050919050565b6000602082840312156200337d576200337c62002692565b5b60006200338d8482850162002ecd565b91505092915050565b6000620033a382620026ff565b9150620033b083620026ff565b9250828203905081811115620033cb57620033ca62002e39565b5b92915050565b6000604082019050620033e860008301856200261c565b620033f76020830184620027f4565b9392505050565b60006060820190506200341560008301866200265a565b620034246020830185620027f4565b620034336040830184620027f4565b949350505050565b600060408201905062003452600083018562002b47565b62003461602083018462002b47565b9392505050565b7f4465616c65723a206e6f74206163746976650000000000000000000000000000600082015250565b6000620034a060128362003152565b9150620034ad8262003468565b602082019050919050565b60006020820190508181036000830152620034d38162003491565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4465616c65723a20616c72656164792061637469766500000000000000000000600082015250565b60006200354160168362003152565b91506200354e8262003509565b602082019050919050565b60006020820190508181036000830152620035748162003532565b9050919050565b6000608082019050620035926000830187620027f4565b620035a160208301866200261c565b8181036040830152620035b5818562002d97565b9050620035c660608301846200265a565b9594505050505056fe60a060405260405161096038038061096083398181016040528101906100259190610684565b610035828261007060201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050610795565b61007f8261016360201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff167f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e60405160405180910390a26000815111156101505761014a8273ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013e91906106e0565b8261030660201b60201c565b5061015f565b61015e61039060201b60201c565b5b5050565b60008173ffffffffffffffffffffffffffffffffffffffff163b036101bf57806040517f64ced0ec0000000000000000000000000000000000000000000000000000000081526004016101b6919061071c565b60405180910390fd5b806101f27fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6103cd60201b60201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a491906106e0565b905060008173ffffffffffffffffffffffffffffffffffffffff163b0361030257806040517f4c9c8ce30000000000000000000000000000000000000000000000000000000081526004016102f9919061071c565b60405180910390fd5b5050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051610330919061077e565b600060405180830381855af49150503d806000811461036b576040519150601f19603f3d011682016040523d82523d6000602084013e610370565b606091505b50915091506103868583836103d760201b60201c565b9250505092915050565b60003411156103cb576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000819050919050565b6060826103f2576103ed8261046c60201b60201c565b610464565b6000825114801561041a575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561045c57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401610453919061071c565b60405180910390fd5b819050610465565b5b9392505050565b60008151111561047f5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104f0826104c5565b9050919050565b610500816104e5565b811461050b57600080fd5b50565b60008151905061051d816104f7565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105768261052d565b810181811067ffffffffffffffff821117156105955761059461053e565b5b80604052505050565b60006105a86104b1565b90506105b4828261056d565b919050565b600067ffffffffffffffff8211156105d4576105d361053e565b5b6105dd8261052d565b9050602081019050919050565b60005b838110156106085780820151818401526020810190506105ed565b60008484015250505050565b6000610627610622846105b9565b61059e565b90508281526020810184848401111561064357610642610528565b5b61064e8482856105ea565b509392505050565b600082601f83011261066b5761066a610523565b5b815161067b848260208601610614565b91505092915050565b6000806040838503121561069b5761069a6104bb565b5b60006106a98582860161050e565b925050602083015167ffffffffffffffff8111156106ca576106c96104c0565b5b6106d685828601610656565b9150509250929050565b6000602082840312156106f6576106f56104bb565b5b60006107048482850161050e565b91505092915050565b610716816104e5565b82525050565b6000602082019050610731600083018461070d565b92915050565b600081519050919050565b600081905092915050565b600061075882610737565b6107628185610742565b93506107728185602086016105ea565b80840191505092915050565b600061078a828461074d565b915081905092915050565b6080516101b16107af600039600060c701526101b16000f3fe608060405261000c61000e565b005b61001e610019610020565b61009d565b565b600061002a6100c3565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610074573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610098919061014e565b905090565b3660008037600080366000845af43d6000803e80600081146100be573d6000f35b3d6000fd5b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061011b826100f0565b9050919050565b61012b81610110565b811461013657600080fd5b50565b60008151905061014881610122565b92915050565b600060208284031215610164576101636100eb565b5b600061017284828501610139565b9150509291505056fea2646970667358221220318efb3add371acc6afd6545498a71373c16dc1386e578ed8c02b6ac326dd4ca64736f6c63430008140033a26469706673582212206b4c9ee802e7f73d0249829f13a387931e28e0bf7ede67d8f713047dd60a73f464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "L2GasSet(uint32,uint32)": {
        "params": {
          "oldValue": "The old L2 gas limit.        "
        }
      },
      "L2MetisMinted(uint256)": {
        "params": {
          "amount": "The amount of Metis tokens that have been minted."
        }
      },
      "SequencerAgentAdded(uint32,address)": {
        "params": {
          "agent": "address of the agent",
          "index": "index of the agent"
        }
      },
      "SequencerAgentTemplateSet(address,address)": {
        "params": {
          "newValue": "The address of the new sequencer agent template.",
          "oldValue": "The address of the old sequencer agent template."
        }
      },
      "SequencerRelocked(uint32,uint256,uint256)": {
        "params": {
          "amount": "The amount of Metis tokens that have been added to the lock.",
          "index": "The index of the sequencer agent in the sequencer list.",
          "reward": "The amount of additional rewards that have been locked."
        }
      },
      "WithdrawRewardsSet(bool,bool)": {
        "params": {
          "newValue": "The new withdrawRewards.",
          "oldValue": "The old withdrawRewards."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "activeSequencerCount()": {
        "returns": {
          "_0": "The number of active sequencers."
        }
      },
      "addAgent()": {
        "returns": {
          "_0": "The index of the new sequencer agent."
        }
      },
      "implementation()": {
        "returns": {
          "_0": "The implementation address"
        }
      },
      "lockFor(uint32,address,uint256,bytes)": {
        "params": {
          "agentId": "The index of the sequencer agent.",
          "amount": "The amount of Metis tokens to lock.",
          "sequencerSigner": "The address of the sequencer signer.",
          "signerPubKey": "The public key of the sequencer signer."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "relock()": {
        "details": "The `relock` function will transfer Metis tokens from the Dealer contract to the sequencer agent contract, and then call the `relock` function on the sequencer agent contract.",
        "returns": {
          "totalProcessed": "The total amount of Metis tokens and rewards that have been relocked."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setL2Gas(uint32)": {
        "details": "The L2 gas limit is used when minting eMetis tokens on Layer 2.",
        "params": {
          "_l2Gas": "The new L2 gas limit."
        }
      },
      "setSequencerAgentTemplate(address)": {
        "params": {
          "_sequencerAgentTemplate": "The address of the new sequencer agent template."
        }
      },
      "setWithdrawRewards(bool)": {
        "params": {
          "_withdrawRewards": "The new value of the withdrawRewards flag."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock(uint32)": {
        "params": {
          "agentId": "The index of the sequencer agent."
        }
      },
      "unlockClaim(uint32)": {
        "params": {
          "agentId": "The index of the sequencer agent."
        }
      }
    },
    "title": "Dealer",
    "version": 1
  },
  "userdoc": {
    "events": {
      "L2GasSet(uint32,uint32)": {
        "notice": "Emits when the L2 gas limit is set."
      },
      "L2MetisMinted(uint256)": {
        "notice": "Emits when Metis tokens are minted on Layer 2."
      },
      "SequencerAgentAdded(uint32,address)": {
        "notice": "Emits when a new sequencer agent is added"
      },
      "SequencerAgentTemplateSet(address,address)": {
        "notice": "Emits when the sequencer agent template is set."
      },
      "SequencerRelocked(uint32,uint256,uint256)": {
        "notice": "Emits when additional Metis tokens and rewards are locked for a sequencer."
      },
      "WithdrawRewardsSet(bool,bool)": {
        "notice": "Emits when withdrawRewards is set."
      }
    },
    "kind": "user",
    "methods": {
      "activeSequencerCount()": {
        "notice": "Returns the number of active sequencers."
      },
      "activeSequencerIds(uint256)": {
        "notice": "The list of active sequencer agent IDs."
      },
      "addAgent()": {
        "notice": "Adds a new sequencer agent."
      },
      "implementation()": {
        "notice": "Use Dealer as a beacon of BeaconProxy for SequencerAgent"
      },
      "initialize(address,address,address,uint256,uint32,address,address)": {
        "notice": "Initializes the contract."
      },
      "l2ChainId()": {
        "notice": "The ID of the L2 chain."
      },
      "l2Gas()": {
        "notice": "L2 gas limit."
      },
      "l2Minter()": {
        "notice": "The address of the L2 MetisMinter contract."
      },
      "l2RewardDispatcher()": {
        "notice": "The address of the L2 RewardDispatcher contract."
      },
      "lockFor(uint32,address,uint256,bytes)": {
        "notice": "Locks Metis tokens for a new sequencer."
      },
      "lockingInfo()": {
        "notice": "The LockingInfo contract address."
      },
      "lockingPool()": {
        "notice": "The LockingPool contract address."
      },
      "messenger()": {
        "notice": "The L2 messenger contract."
      },
      "metis()": {
        "notice": "The Metis token."
      },
      "relock()": {
        "notice": "Facilitates the process of augmenting the locked Metis tokens and rewards for all currently active sequencers."
      },
      "sequencerAgentCount()": {
        "notice": "The number of sequencer agents."
      },
      "sequencerAgentTemplate()": {
        "notice": "The template contract for sequencer agents."
      },
      "sequencerAgents(uint32)": {
        "notice": "The list of sequencer agents."
      },
      "setActive(uint32,bool)": {
        "notice": "Sets the active status of a sequencer agent."
      },
      "setL2Gas(uint32)": {
        "notice": "Sets the L2 gas limit."
      },
      "setSequencerAgentTemplate(address)": {
        "notice": "Sets the sequencer agent template."
      },
      "setWithdrawRewards(bool)": {
        "notice": "set withdraw rewards"
      },
      "sumRewards()": {
        "notice": "The sum of rewards of all sequencers."
      },
      "totalLocked()": {
        "notice": "Returns the total amount of Metis tokens that have been locked for all sequencers."
      },
      "unlock(uint32)": {
        "notice": "Unlock Metis tokens and terminate the sequencer."
      },
      "unlockClaim(uint32)": {
        "notice": "The `unlockClaim` function allows a sequencer to claim their Metis tokens after the unlocking waiting period has elapsed."
      },
      "withdrawRewards()": {
        "notice": "withdraw rewards"
      }
    },
    "notice": "The Dealer contract is responsible for the allocation of Metis tokens from Layer 2 to the LockingPool for sequencers, through sequencer agents.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2455,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "sequencerAgentTemplate",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2459,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "metis",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)979"
      },
      {
        "astId": 2463,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "lockingPool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILockingPool)3930"
      },
      {
        "astId": 2467,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "lockingInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILockingInfo)3807"
      },
      {
        "astId": 2471,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "messenger",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICrossDomainMessenger)3597"
      },
      {
        "astId": 2474,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "l2ChainId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2477,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "l2Minter",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2480,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "l2RewardDispatcher",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2485,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "sequencerAgents",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 2488,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "sequencerAgentCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint32"
      },
      {
        "astId": 2492,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "activeSequencerIds",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 2495,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "sumRewards",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2498,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "l2Gas",
        "offset": 0,
        "slot": "12",
        "type": "t_uint32"
      },
      {
        "astId": 2501,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "withdrawRewards",
        "offset": 4,
        "slot": "12",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICrossDomainMessenger)3597": {
        "encoding": "inplace",
        "label": "contract ICrossDomainMessenger",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)979": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILockingInfo)3807": {
        "encoding": "inplace",
        "label": "contract ILockingInfo",
        "numberOfBytes": "20"
      },
      "t_contract(ILockingPool)3930": {
        "encoding": "inplace",
        "label": "contract ILockingPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}