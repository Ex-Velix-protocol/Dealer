{
  "address": "0xDfBE9aD7B0ef46247e9C3DA59a691A2e2AA46406",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isRelocked",
          "type": "bool"
        }
      ],
      "name": "IsSequencerRelocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "oldValue",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newValue",
          "type": "uint32"
        }
      ],
      "name": "L2GasSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "L2MetisMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sequencerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "SequencerAgentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "SequencerAgentTemplateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sequencerSigner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "SequencerInitialBalanceLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "SequencerRelocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sequencerSigner",
          "type": "address"
        }
      ],
      "name": "SequencerTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakingAmountWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldValue",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "WithdrawRewardsSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "active",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeSequencerIds",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_metis",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockingPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Bridge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2ChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_l2Gas",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_l2Minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2RewardDispatcher",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Gas",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2RewardDispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencerSigner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signerPubKey",
          "type": "bytes"
        }
      ],
      "name": "lockFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockingInfo",
      "outputs": [
        {
          "internalType": "contract ILockingInfo",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockingPool",
      "outputs": [
        {
          "internalType": "contract ILockingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messenger",
      "outputs": [
        {
          "internalType": "contract ICrossDomainMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metis",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalProcessed",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerAgentCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerAgentTemplate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "sequencerAgents",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "activationBatch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "updatedBatch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deactivationBatch",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deactivationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockClaimTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            }
          ],
          "internalType": "struct ILockingPool.SequencerData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_l2Gas",
          "type": "uint32"
        }
      ],
      "name": "setL2Gas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2MinterAddress",
          "type": "address"
        }
      ],
      "name": "setL2Minter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2RewardDispatcher",
          "type": "address"
        }
      ],
      "name": "setL2RewardDispatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_redemptionQueue",
          "type": "address"
        }
      ],
      "name": "setRedemptionQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sumRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockClaim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawStakingAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d581c290d8a424347dc7a4dd5af305df1a2c6b54560966f08ea95ebec0c74a3",
  "receipt": {
    "to": null,
    "from": "0xc3BD53e8BB7F5a8f98C565aad28C9b618c84D8Fa",
    "contractAddress": "0xDfBE9aD7B0ef46247e9C3DA59a691A2e2AA46406",
    "transactionIndex": 55,
    "gasUsed": "3049434",
    "logsBloom": "0x
    "blockHash": "0x6dd42966a310932b1674a0f40929f6ddbbd7126797d4a91d7804fa458253aed9",
    "transactionHash": "0x6d581c290d8a424347dc7a4dd5af305df1a2c6b54560966f08ea95ebec0c74a3",
    "logs": [],
    "blockNumber": 7074998,
    "cumulativeGasUsed": "7962203",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 42,
  "solcInputHash": "f814f4d9c7a131ac80dcf6a1dc09c6e8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRelocked\",\"type\":\"bool\"}],\"name\":\"IsSequencerRelocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"oldValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"}],\"name\":\"L2GasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"L2MetisMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequencerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"SequencerAgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"SequencerAgentTemplateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sequencerSigner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SequencerInitialBalanceLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"SequencerRelocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sequencerSigner\",\"type\":\"address\"}],\"name\":\"SequencerTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingAmountWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"WithdrawRewardsSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeSequencerIds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_metis\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Bridge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_l2Gas\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_l2Minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2RewardDispatcher\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Gas\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2RewardDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencerSigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signerPubKey\",\"type\":\"bytes\"}],\"name\":\"lockFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingInfo\",\"outputs\":[{\"internalType\":\"contract ILockingInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingPool\",\"outputs\":[{\"internalType\":\"contract ILockingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"contract ICrossDomainMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metis\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalProcessed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerAgentCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerAgentTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"sequencerAgents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activationBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deactivationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"internalType\":\"struct ILockingPool.SequencerData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_l2Gas\",\"type\":\"uint32\"}],\"name\":\"setL2Gas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2MinterAddress\",\"type\":\"address\"}],\"name\":\"setL2Minter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2RewardDispatcher\",\"type\":\"address\"}],\"name\":\"setL2RewardDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_redemptionQueue\",\"type\":\"address\"}],\"name\":\"setRedemptionQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakingAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"IsSequencerRelocked(bool)\":{\"params\":{\"isRelocked\":\"The status of the sequencer.\"}},\"L2GasSet(uint32,uint32)\":{\"params\":{\"oldValue\":\"The old L2 gas limit.        \"}},\"L2MetisMinted(uint256)\":{\"params\":{\"amount\":\"The amount of Metis tokens that have been minted.\"}},\"RewardsWithdrawn(uint256,uint256)\":{\"params\":{\"reward\":\"The amount of rewards that have been withdrawn.\",\"sequencerId\":\"The ID of the sequencer.\"}},\"SequencerAgentAdded(uint32,address)\":{\"params\":{\"agent\":\"address of the agent\",\"index\":\"index of the agent\"}},\"SequencerAgentTemplateSet(address,address)\":{\"params\":{\"newValue\":\"The address of the new sequencer agent template.\",\"oldValue\":\"The address of the old sequencer agent template.\"}},\"SequencerInitialBalanceLocked(address,uint256,bool)\":{\"params\":{\"active\":\"The status of the sequencer.\",\"amount\":\"The amount of Metis tokens that have been locked.\",\"sequencerSigner\":\"The address of the sequencer signer.\"}},\"SequencerRelocked(uint32,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of Metis tokens that have been added to the lock.\",\"index\":\"The index of the sequencer agent in the sequencer list.\",\"reward\":\"The amount of additional rewards that have been locked.\"}},\"SequencerTerminated(address)\":{\"params\":{\"sequencerSigner\":\"The address of the sequencer signer.\"}},\"StakingAmountWithdrawn(address,uint256)\":{\"params\":{\"amount\":\"The amount of Metis tokens that have been deposited.\",\"recipient\":\"The recipient of the  Metis token on  L2 (redemptionQueue).\"}},\"WithdrawRewardsSet(bool,bool)\":{\"params\":{\"newValue\":\"The new withdrawRewards.\",\"oldValue\":\"The old withdrawRewards.\"}}},\"kind\":\"dev\",\"methods\":{\"lockFor(address,uint256,bytes)\":{\"params\":{\"_amount\":\"The amount of Metis tokens to lock.\",\"_sequencerSigner\":\"The address of the sequencer signer.\",\"_signerPubKey\":\"The public key of the sequencer signer.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"relock()\":{\"details\":\"The `relock` function will transfer Metis tokens from the Dealer contract to the sequencer agent contract, and then call the `relock` function on the sequencer agent contract.\",\"returns\":{\"totalProcessed\":\"The total amount of Metis tokens and rewards that have been relocked.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setL2Gas(uint32)\":{\"details\":\"The L2 gas limit is used when minting eMetis tokens on Layer 2.\",\"params\":{\"_l2Gas\":\"The new L2 gas limit.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawStakingAmount(uint256)\":{\"params\":{\"amount\":\"The amount of Metis tokens to withdraw.\"}}},\"title\":\"Dealer\",\"version\":1},\"userdoc\":{\"events\":{\"IsSequencerRelocked(bool)\":{\"notice\":\"Emits when the sequencer is relocked.\"},\"L2GasSet(uint32,uint32)\":{\"notice\":\"Emits when the L2 gas limit is set.\"},\"L2MetisMinted(uint256)\":{\"notice\":\"Emits when Metis tokens are minted on Layer 2.\"},\"RewardsWithdrawn(uint256,uint256)\":{\"notice\":\"Emits when the rewards are withdrawn.\"},\"SequencerAgentAdded(uint32,address)\":{\"notice\":\"Emits when a new sequencer agent is added\"},\"SequencerAgentTemplateSet(address,address)\":{\"notice\":\"Emits when the sequencer agent template is set.\"},\"SequencerInitialBalanceLocked(address,uint256,bool)\":{\"notice\":\"Emits when the sequencer initial balance is locked.\"},\"SequencerRelocked(uint32,uint256,uint256)\":{\"notice\":\"Emits when additional Metis tokens and rewards are locked for a sequencer.\"},\"SequencerTerminated(address)\":{\"notice\":\"Emits when the sequencer is terminated.\"},\"StakingAmountWithdrawn(address,uint256)\":{\"notice\":\"Withdaws Metis token and deposits Metis tokens into the redemption queue.\"},\"WithdrawRewardsSet(bool,bool)\":{\"notice\":\"Emits when withdrawRewards is set.\"}},\"kind\":\"user\",\"methods\":{\"activeSequencerIds(uint256)\":{\"notice\":\"The list of active sequencer agent IDs.\"},\"initialize(address,address,address,uint256,uint32,address,address)\":{\"notice\":\"Initializes the contract.\"},\"l2ChainId()\":{\"notice\":\"The ID of the L2 chain.\"},\"l2Gas()\":{\"notice\":\"L2 gas limit.\"},\"l2Minter()\":{\"notice\":\"The address of the L2 MetisMinter contract.\"},\"l2RewardDispatcher()\":{\"notice\":\"The address of the L2 RewardDispatcher contract.\"},\"lockFor(address,uint256,bytes)\":{\"notice\":\"Locks Metis tokens for a new sequencer.\"},\"lockingInfo()\":{\"notice\":\"The LockingInfo contract address.\"},\"lockingPool()\":{\"notice\":\"The LockingPool contract address.\"},\"messenger()\":{\"notice\":\"The L2 messenger contract.\"},\"metis()\":{\"notice\":\"The Metis token.\"},\"relock()\":{\"notice\":\"Facilitates the process of augmenting the locked Metis tokens and rewards for all currently active sequencers.\"},\"sequencerAgentCount()\":{\"notice\":\"The number of sequencer agents.\"},\"sequencerAgentTemplate()\":{\"notice\":\"The template contract for sequencer agents.\"},\"sequencerAgents(uint32)\":{\"notice\":\"The list of sequencer agents.\"},\"setL2Gas(uint32)\":{\"notice\":\"Sets the L2 gas limit.\"},\"sumRewards()\":{\"notice\":\"The sum of rewards of all sequencers.\"},\"totalLocked()\":{\"notice\":\"Returns the total amount of Metis tokens that have been locked for all sequencers.\"},\"unlock()\":{\"notice\":\"Unlock Metis tokens and terminate the sequencer.\"},\"unlockClaim()\":{\"notice\":\"The `unlockClaim` function allows a sequencer to claim their Metis tokens after the unlocking waiting period has elapsed.\"},\"withdrawRewards()\":{\"notice\":\"withdraw rewards\"},\"withdrawStakingAmount(uint256)\":{\"notice\":\"withdraw locked Metis tokens and deposits them into the redemptionQueue.\"}},\"notice\":\"The Dealer contract is responsible for the allocation of Metis tokens from Layer 2 to the LockingPool for sequencers, through sequencer agents.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dealer.sol\":\"Dealer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] so that it can be accessed externally.\\n *\\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\\n * the beacon to not upgrade the implementation maliciously.\\n *\\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\\n * an inconsistent state where the beacon storage slot does not match the beacon address.\\n */\\ncontract BeaconProxy is Proxy {\\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\\n    address private immutable _beacon;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\\n        _beacon = beacon;\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Returns the beacon.\\n     */\\n    function _getBeacon() internal view virtual returns (address) {\\n        return _beacon;\\n    }\\n}\\n\",\"keccak256\":\"0x387ebdcb365b8e620f26645d2b34a161cd39eedfb0219e8baff55630c5ae113c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/Dealer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interface/ICrossDomainEnabled.sol\\\";\\nimport \\\"../interface/ILockingPool.sol\\\";\\nimport \\\"../interface/IVeMetisMinter.sol\\\";\\nimport \\\"../interface/ICrossDomainMessenger.sol\\\";\\nimport \\\"../interface/IL1ERC20Bridge.sol\\\";\\n\\n\\n/// @title Dealer\\n/// @notice The Dealer contract is responsible for the allocation of Metis tokens from Layer 2 to the LockingPool for sequencers, through sequencer agents.\\ncontract Dealer is OwnableUpgradeable {\\n\\n    /// @notice Emits when a new sequencer agent is added\\n    /// @param index index of the agent\\n    /// @param agent address of the agent\\n    event SequencerAgentAdded(uint32 index, address agent);\\n\\n    /// @notice Emits when additional Metis tokens and rewards are locked for a sequencer.\\n    /// @param index The index of the sequencer agent in the sequencer list.\\n    /// @param amount The amount of Metis tokens that have been added to the lock.\\n    /// @param reward The amount of additional rewards that have been locked.\\n    event SequencerRelocked(uint32 index, uint256 amount, uint256 reward);\\n\\n    /// @notice Emits when Metis tokens are minted on Layer 2.\\n    /// @param amount The amount of Metis tokens that have been minted.\\n    event L2MetisMinted(uint256 amount);\\n\\n    /// @notice Emits when the sequencer agent template is set.\\n    /// @param oldValue The address of the old sequencer agent template.\\n    /// @param newValue The address of the new sequencer agent template.\\n    event SequencerAgentTemplateSet(address indexed oldValue, address indexed newValue);\\n\\n    /// @notice Emits when the L2 gas limit is set.\\n    /// @param oldValue The old L2 gas limit.        \\n    event L2GasSet(uint32 oldValue, uint32 newValue);\\n\\n    /// @notice Emits when withdrawRewards is set.\\n    /// @param oldValue The old withdrawRewards.\\n    /// @param newValue The new withdrawRewards.\\n    event WithdrawRewardsSet(bool oldValue, bool newValue);\\n\\n    /// @notice The template contract for sequencer agents.\\n    address public sequencerAgentTemplate;\\n\\n    /// @notice The Metis token.\\n    IERC20 public metis;\\n\\n    /// @notice The LockingPool contract address.\\n    ILockingPool public lockingPool;\\n\\n    /// @notice The LockingInfo contract address.\\n    ILockingInfo public lockingInfo;\\n\\n    /// @notice The L2 messenger contract.\\n    ICrossDomainMessenger public messenger;\\n\\n    /// @notice The ID of the L2 chain.\\n    uint256 public l2ChainId;\\n\\n    /// @notice The address of the L2 MetisMinter contract.\\n    address public l2Minter;\\n\\n    /// @notice The address of the L2 RewardDispatcher contract.\\n    address public l2RewardDispatcher;\\n\\n    /// @notice The list of sequencer agents.\\n    mapping(uint32 => address) public sequencerAgents;\\n\\n    /// @notice The number of sequencer agents.\\n    uint32 public sequencerAgentCount;\\n\\n    /// @notice The list of active sequencer agent IDs.\\n    uint32[] public activeSequencerIds;\\n\\n    /// @notice The sum of rewards of all sequencers.\\n    uint256 public sumRewards;\\n\\n    /// @notice L2 gas limit.\\n    uint32 public l2Gas;\\n\\n    /// @notice withdraw rewards\\n    bool public withdrawRewards;\\n\\n    uint256 public sequencerId;\\n    address public sequencerSigner;\\n    bool public active;\\n    address public redemptionQueue;\\n    /// @notice Withdaws Metis token and deposits Metis tokens into the redemption queue.\\n    /// @param recipient The recipient of the  Metis token on  L2 (redemptionQueue).\\n    /// @param amount The amount of Metis tokens that have been deposited.\\n    event StakingAmountWithdrawn(address indexed recipient, uint256 amount);\\n\\n    /// @notice Emits when the sequencer initial balance is locked.\\n    /// @param sequencerSigner The address of the sequencer signer.\\n    /// @param amount The amount of Metis tokens that have been locked.\\n    /// @param active The status of the sequencer.\\n    event SequencerInitialBalanceLocked(address indexed sequencerSigner, uint256 amount,bool active);\\n\\n    /// @notice Emits when the sequencer is terminated.\\n    /// @param sequencerSigner The address of the sequencer signer.\\n    event SequencerTerminated(address indexed sequencerSigner);\\n\\n    /// @notice Emits when the rewards are withdrawn.\\n    /// @param sequencerId The ID of the sequencer.\\n    /// @param reward The amount of rewards that have been withdrawn.\\n    event RewardsWithdrawn(uint256 indexed sequencerId, uint256 reward);\\n\\n    /// @notice Emits when the sequencer is relocked.\\n    /// @param isRelocked The status of the sequencer.\\n    event IsSequencerRelocked(bool isRelocked);\\n\\n    /// @notice Initializes the contract.\\n    function initialize( \\n        address _metis, \\n        address _lockingPool, \\n        address _l1Bridge, \\n        uint256 _l2ChainId, \\n        uint32 _l2Gas, \\n        address _l2Minter, \\n        address _l2RewardDispatcher\\n        ) public initializer {\\n        require( _metis != address(0) && _lockingPool != address(0) && _l1Bridge != address(0) && _l2Minter != address(0) && _l2RewardDispatcher != address(0), \\\"Dealer: zero address\\\");\\n        __Ownable_init(msg.sender);\\n        metis = IERC20(_metis);\\n        lockingPool = ILockingPool(_lockingPool);\\n        lockingInfo = lockingPool.escrow();\\n        messenger = ICrossDomainMessenger(ICrossDomainEnabled(_l1Bridge).messenger());\\n        l2ChainId = _l2ChainId;\\n        l2Gas = _l2Gas;\\n        l2Minter = _l2Minter;\\n        l2RewardDispatcher = _l2RewardDispatcher;\\n\\n    }\\n\\n    /// @notice Locks Metis tokens for a new sequencer.\\n    /// @param _sequencerSigner The address of the sequencer signer.\\n    /// @param _amount The amount of Metis tokens to lock.\\n    /// @param _signerPubKey The public key of the sequencer signer.\\n    function lockFor(\\n        address _sequencerSigner,\\n        uint256 _amount,\\n        bytes memory _signerPubKey\\n    ) external onlyOwner {\\n        // Check if the Dealer contract has sufficient Metis balance\\n        uint256 dealerBalance = metis.balanceOf(address(this));\\n        require(dealerBalance >= _amount, \\\"Dealer: Insufficient Metis balance\\\");\\n\\n        sequencerSigner = _sequencerSigner;\\n\\n        // Approve the LockingInfo contract to spend the specified amount of tokens\\n        require(\\n            metis.approve(address(lockingInfo), type(uint256).max),\\n            \\\"Dealer: Approval to LockingInfo failed\\\"\\n        );\\n\\n        // Attempt to lock the tokens by calling LockingPool's lockFor function\\n        lockingPool.lockWithRewardRecipient(sequencerSigner,l2Minter, _amount, _signerPubKey);\\n\\n        // Retrieve and store the sequencer ID for tracking purposes\\n        sequencerId = lockingPool.seqSigners(sequencerSigner);\\n        active = true;\\n        emit SequencerInitialBalanceLocked(sequencerSigner, _amount, active);\\n    }\\n\\n\\n    /// @notice Unlock Metis tokens and terminate the sequencer.\\n    function unlock() external payable onlyOwner {\\n        lockingPool.unlock{value: msg.value}(sequencerId, l2Gas);\\n        active = false;\\n        emit SequencerTerminated(sequencerSigner);\\n    }\\n\\n    /// @notice The `unlockClaim` function allows a sequencer to claim their Metis tokens after the unlocking waiting period has elapsed.\\n    function unlockClaim() external payable onlyOwner {\\n        lockingPool.unlockClaim{value: msg.value}(sequencerId, l2Gas);\\n    }\\n\\n    function sequencerData() public view returns (ILockingPool.SequencerData memory) {\\n        return lockingPool.sequencers(sequencerId);\\n    }\\n\\n    /// @notice Facilitates the process of augmenting the locked Metis tokens and rewards for all currently active sequencers.\\n    /// @dev The `relock` function will transfer Metis tokens from the Dealer contract to the sequencer agent contract, and then call the `relock` function on the sequencer agent contract.\\n    /// @return totalProcessed The total amount of Metis tokens and rewards that have been relocked.\\n    function relock() external payable returns (uint256 totalProcessed) {\\n        require(active, \\\"Dealer: no active sequencer\\\");\\n\\n        uint maxLock = ILockingInfo(lockingInfo).maxLock();\\n        uint256 undistributedAmount = metis.balanceOf(address(this));\\n        uint256 totalRewards = 0;\\n        for (uint32 i = 0; i < 1; i++) {\\n            ILockingPool.SequencerData memory seq = sequencerData();\\n            (uint256 reward, uint256 locked) = (seq.reward, seq.amount);\\n            totalRewards += reward;\\n\\n            // The lock quota means the amount of Metis tokens that can be locked for the sequencer, due to the maximum lock amount.\\n            uint256 lockQuota = locked < maxLock ? maxLock - locked : 0;\\n\\n            // The amount of Metis tokens that can be locked is the minimum of the lock quota and the undistributed amount.\\n            uint256 lockAmount = Math.min(lockQuota, undistributedAmount);\\n\\n            // The undistributed amount should be reduced by the amount of Metis tokens that have been locked.\\n            undistributedAmount -= lockAmount;\\n            \\n             // If there is not any lock amount or reward, the process should be skipped.\\n            uint256 toBeProcessed = lockAmount + reward;\\n            totalProcessed += toBeProcessed;\\n\\n            // The rewards are withdrawn  if the locked amount plus the amount to be processed exceeds the maximum lock amount.\\n            bool _withdrawRewards = locked + toBeProcessed > maxLock;\\n            if (_withdrawRewards && reward > 0) {\\n                lockingPool.withdrawRewards(sequencerId, l2Gas);\\n                emit RewardsWithdrawn(sequencerId, reward);\\n            }\\n\\n            // If the lock amount is not zero, or if we decided to convert the rewards to lock amount, the `relock` function is called.\\n            if (!_withdrawRewards || lockAmount > 0) {\\n                lockingPool.relock(sequencerId, lockAmount, true);\\n                emit SequencerRelocked(0, lockAmount, reward);\\n            }\\n        }   \\n\\n        // In the event of any rewards, the MetisMinter contract on Layer 2 is invoked to mint eMetis tokens. These tokens are then distributed as rewards to seMetis holders.\\n        if (totalRewards > 0) {\\n            _mintL2EMetis(totalRewards);\\n            sumRewards += totalRewards;\\n        }\\n\\n        emit IsSequencerRelocked(true);\\n    }\\n\\n    /// @notice Sets the L2 gas limit.\\n    /// @param _l2Gas The new L2 gas limit.\\n    /// @dev The L2 gas limit is used when minting eMetis tokens on Layer 2.\\n    function setL2Gas(uint32 _l2Gas) external onlyOwner {\\n        uint32 _old = l2Gas;\\n        l2Gas = _l2Gas;\\n        emit L2GasSet(_old, _l2Gas);\\n    }\\n\\n    /// @notice Returns the total amount of Metis tokens that have been locked for all sequencers.\\n    function totalLocked() external view returns (uint256) {\\n        return sequencerData().amount;\\n    }\\n\\n    /// @notice mint veMetis on Layer 2\\n    /// @param amount Metis amount\\n    function _mintL2EMetis(uint256 amount) internal {\\n        bytes memory message = abi.encodeWithSelector(IVeMetisMinter.mintFromL1.selector, amount);\\n        messenger.sendMessageViaChainId{value:msg.value}(l2ChainId, l2Minter, message, l2Gas);\\n        emit L2MetisMinted(amount);\\n    }\\n\\n    /// @notice withdraw locked Metis tokens and deposits them into the redemptionQueue.\\n    /// @param amount The amount of Metis tokens to withdraw.\\n    function withdrawStakingAmount(uint256 amount) public payable onlyOwner {\\n        lockingPool.withdraw(sequencerId, amount);\\n\\n        address bridge = ILockingInfo(lockingInfo).bridge();\\n        IERC20(ILockingInfo(lockingInfo).l1Token()).approve(bridge, amount);\\n        IL1ERC20Bridge(bridge).depositERC20ToByChainId{value: msg.value}(l2ChainId, ILockingInfo(lockingInfo).l1Token(), ILockingInfo(lockingInfo).l2Token(), redemptionQueue, amount, l2Gas, \\\"\\\");\\n        emit StakingAmountWithdrawn(redemptionQueue,amount);\\n    }\\n\\n    // Setters\\n    function setL2Minter(address _l2MinterAddress) public onlyOwner{\\n        l2Minter = _l2MinterAddress;\\n    }\\n\\n    function setRedemptionQueue(address _redemptionQueue) public onlyOwner {\\n        redemptionQueue = _redemptionQueue;\\n    }\\n\\n    function setL2RewardDispatcher(address _l2RewardDispatcher) public onlyOwner {\\n        l2RewardDispatcher = _l2RewardDispatcher;\\n    }\\n\\n    function setActive(bool _active) public onlyOwner {\\n        active = _active;\\n    }\\n}\\n\",\"keccak256\":\"0x4ad2b607e3f47d858434f822520dee0d56df01a4da9040d3e0a53a21954a06ba\",\"license\":\"MIT\"},\"interface/ICrossDomainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICrossDomainEnabled {\\n    function messenger() external view returns (address);\\n}\",\"keccak256\":\"0x2806d6261202f57849c4e98c2f5786882886e45c67751c2b38dd5f9d0456a7fa\",\"license\":\"MIT\"},\"interface/ICrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ICrossDomainMessenger\\n */\\ninterface ICrossDomainMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce,\\n        uint256 gasLimit,\\n        uint256 chainId\\n    );\\n    event RelayedMessage(bytes32 indexed msgHash);\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n    \\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external payable;\\n\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _chainId L2 chain id.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessageViaChainId(\\n        uint256 _chainId,\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external payable;\\n\\n    function replayMessageViaChainId(\\n        uint256 _chainId,\\n        address _target,\\n        address _sender,\\n        bytes memory _message,\\n        uint256 _queueIndex,\\n        uint32 _oldGasLimit,\\n        uint32 _newGasLimit\\n    )external;\\n}\",\"keccak256\":\"0xfc7bee4eda45bec59ba5ebf35ab65e4d9dbc0092407a67b33e4e338e6be1336f\",\"license\":\"MIT\"},\"interface/IL1ERC20Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title IL1ERC20Bridge\\n */\\ninterface IL1ERC20Bridge {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event ERC20DepositInitiated(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ERC20WithdrawalFinalized(\\n        address indexed _l1Token,\\n        address indexed _l2Token,\\n        address indexed _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes _data\\n    );\\n\\n    event ERC20ChainID(uint256 _chainid);\\n    \\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * @dev get the address of the corresponding L2 bridge contract.\\n     * @return Address of the corresponding L2 bridge contract.\\n     */\\n    function l2TokenBridge() external returns (address);\\n\\n    /**\\n     * @dev deposit an amount of the ERC20 to the caller's balance on L2.\\n     * @param _l1Token Address of the L1 ERC20 we are depositing\\n     * @param _l2Token Address of the L1 respective L2 ERC20\\n     * @param _amount Amount of the ERC20 to deposit\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositERC20(\\n        address _l1Token,\\n        address _l2Token,\\n        uint256 _amount,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    ) external;\\n\\n    /**\\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\\n     * @param _l1Token Address of the L1 ERC20 we are depositing\\n     * @param _l2Token Address of the L1 respective L2 ERC20\\n     * @param _to L2 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositERC20To(\\n        address _l1Token,\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    ) external;\\n    \\n    /**\\n     * @dev deposit an amount of the ERC20 to the caller's balance on L2.\\n     * @param _chainid chainid\\n     * @param _l1Token Address of the L1 ERC20 we are depositing\\n     * @param _l2Token Address of the L1 respective L2 ERC20\\n     * @param _amount Amount of the ERC20 to deposit\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositERC20ByChainId (\\n        uint256 _chainid,\\n        address _l1Token,\\n        address _l2Token,\\n        uint _amount,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    )\\n        external payable;\\n\\n    /**\\n     * @dev deposit an amount of ERC20 to a recipient's balance on L2.\\n     * @param _chainid chainid\\n     * @param _l1Token Address of the L1 ERC20 we are depositing\\n     * @param _l2Token Address of the L1 respective L2 ERC20\\n     * @param _to L2 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositERC20ToByChainId (\\n        uint256 _chainid,\\n        address _l1Token,\\n        address _l2Token,\\n        address _to,\\n        uint _amount,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    )\\n        external payable;\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n\\n    /**\\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\\n     * L1 ERC20 token.\\n     * This call will fail if the initialized withdrawal from L2 has not been finalized.\\n     *\\n     * @param _l1Token Address of L1 token to finalizeWithdrawal for.\\n     * @param _l2Token Address of L2 token where withdrawal was initiated.\\n     * @param _from L2 address initiating the transfer.\\n     * @param _to L1 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _data Data provided by the sender on L2. This data is provided\\n     *   solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *   length, these contracts provide no guarantees about its content.\\n     */\\n    function finalizeERC20Withdrawal(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external;\\n    \\n    /**\\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\\n     * L1 ERC20 token.\\n     * This call will fail if the initialized withdrawal from L2 has not been finalized.\\n     *\\n     * @param _chainid chainid\\n     * @param _l1Token Address of L1 token to finalizeWithdrawal for.\\n     * @param _l2Token Address of L2 token where withdrawal was initiated.\\n     * @param _from L2 address initiating the transfer.\\n     * @param _to L1 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _data Data provided by the sender on L2. This data is provided\\n     *   solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *   length, these contracts provide no guarantees about its content.\\n     */    \\n     function finalizeERC20WithdrawalByChainId (\\n        uint256 _chainid,\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _data\\n    )\\n        external;\\n    /**\\n     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the\\n     * L1 ERC20 token.\\n     * This call will fail if the initialized withdrawal from L2 has not been finalized.\\n     *\\n     * @param _chainid chainid\\n     * @param _from L2 address initiating the transfer.\\n     * @param _to L1 address to credit the withdrawal to.\\n     * @param _amount Amount of the ERC20 to deposit.\\n     * @param _data Data provided by the sender on L2. This data is provided\\n     *   solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *   length, these contracts provide no guarantees about its content.\\n     */    \\n    function finalizeMetisWithdrawalByChainId (\\n        uint256 _chainid,\\n        address _from,\\n        address _to,\\n        uint _amount,\\n        bytes calldata _data\\n    )\\n        external;\\n}\",\"keccak256\":\"0x2ae07ccba2b6031511c22fbbc0c2a1b26d93a510226ad72edf693cf00be2c81a\",\"license\":\"MIT\"},\"interface/ILockingInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ISequencerInfo} from \\\"./ISequencerInfo.sol\\\";\\nimport {ILockingInfo as ILockingInfoRaw} from \\\"./ILockingInfoRaw.sol\\\";\\n\\ninterface ILockingInfo is ILockingInfoRaw {\\n    function bridge() external view returns(address);\\n    function l1Token() external view returns(address);\\n    function l2Token() external view returns(address);\\n    function minLock() external view returns(uint256);\\n    function maxLock() external view returns(uint256);\\n}\",\"keccak256\":\"0x6cb5efe9280ad3f0a2c7dfb315bc3483ce329c3f759994ee990749b4694f5806\",\"license\":\"MIT\"},\"interface/ILockingInfoRaw.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ISequencerInfo} from \\\"./ISequencerInfo.sol\\\";\\n\\ninterface ILockingInfo {\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMinAmounts'\\n     * @param _newMinLock new min lock.\\n     */\\n    event SetMinLock(uint256 _newMinLock);\\n\\n    /**\\n     * @dev Emitted when min lock amount update in 'UpdateMaxAmounts'\\n     * @param _newMaxLock new max lock.\\n     */\\n    event SetMaxLock(uint256 _newMaxLock);\\n\\n    /**\\n     * @dev Emitted when the reward payer is changed\\n     * @param _payer new reward payer\\n     */\\n    event SetRewardPayer(address _payer);\\n\\n    /**\\n     * @dev Emitted when sequencer locks in '_lockFor()' in LockingPool.\\n     * @param signer sequencer address.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param activationBatch sequencer's first epoch as proposer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     * @param signerPubkey public key of the sequencer\\n     */\\n    event Locked(\\n        address indexed signer,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 indexed activationBatch,\\n        uint256 amount,\\n        uint256 total,\\n        bytes signerPubkey\\n    );\\n\\n    /**\\n     * @dev Emitted when the sequencer increase lock amount in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking new amount\\n     * @param total the total locking amount\\n     */\\n    event Relocked(uint256 indexed sequencerId, uint256 amount, uint256 total);\\n\\n    /**\\n     * @dev Emitted when the sequencer reduce lock amount in 'withdraw()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount withdraw new amount\\n     */\\n    event Withdraw(uint256 indexed sequencerId, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when sequencer relocking in 'relock()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param newAmount the updated lock amount.\\n     */\\n    event LockUpdate(\\n        uint256 indexed sequencerId,\\n        uint256 indexed nonce,\\n        uint256 indexed newAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer withdraw rewards in 'withdrawRewards' or 'unlockClaim'\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param recipient the address receive reward tokens\\n     * @param amount the reward amount.\\n     * @param totalAmount total rewards has liquidated\\n     */\\n    event ClaimRewards(\\n        uint256 indexed sequencerId,\\n        address recipient,\\n        uint256 indexed amount,\\n        uint256 indexed totalAmount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in '_unlock()'.\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param deactivationBatch  last batch for sequencer.\\n     * @param deactivationTime unlock block timestamp.\\n     * @param unlockClaimTime when user can claim locked token.\\n     * @param amount locking amount\\n     */\\n    event UnlockInit(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        uint256 deactivationBatch,\\n        uint256 deactivationTime,\\n        uint256 unlockClaimTime,\\n        uint256 indexed amount\\n    );\\n\\n    /**\\n     * @dev Emitted when sequencer unlocks in 'unlockClaim()'\\n     * @param user address of the sequencer.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param amount locking amount.\\n     * @param total total locking amount.\\n     */\\n    event Unlocked(\\n        address indexed user,\\n        uint256 indexed sequencerId,\\n        uint256 amount,\\n        uint256 total\\n    );\\n\\n    /**\\n     * @dev Emitted when batch update in  'batchSubmitRewards'\\n     * @param _newBatchId new batchId.\\n     *\\n     *      Note from maintainer:\\n     *      for compatibility, the event is retained\\n     */\\n    event BatchSubmitReward(uint256 _newBatchId);\\n\\n    /**\\n     * @dev Emitted when the sequencer public key is updated in 'updateSigner()'.\\n     * @param sequencerId unique integer to identify a sequencer.\\n     * @param nonce to synchronize the events in themis.\\n     * @param oldSigner oldSigner old address of the sequencer.\\n     * @param newSigner newSigner new address of the sequencer.\\n     * @param signerPubkey signerPubkey public key of the sequencer.\\n     */\\n    event SignerChange(\\n        uint256 indexed sequencerId,\\n        uint256 nonce,\\n        address indexed oldSigner,\\n        address indexed newSigner,\\n        bytes signerPubkey\\n    );\\n\\n    function newSequencer(\\n        uint256 _id,\\n        address _owner,\\n        address _signer,\\n        uint256 _amount,\\n        uint256 _batchId,\\n        bytes calldata _signerPubkey\\n    ) external;\\n\\n    function increaseLocked(\\n        uint256 _seqId,\\n        uint256 _nonce,\\n        address _owner,\\n        uint256 _locked,\\n        uint256 _incoming,\\n        uint256 _fromReward\\n    ) external;\\n\\n    function withdrawLocking(\\n        uint256 _seqId,\\n        address _owner,\\n        uint256 _nonce,\\n        uint256 _amount,\\n        uint256 _locked\\n    ) external;\\n\\n    function initializeUnlock(\\n        uint256 _seqId,\\n        uint256 _reward,\\n        uint32 _l2gas,\\n        ISequencerInfo.Sequencer calldata _seq\\n    ) external payable;\\n\\n    function finalizeUnlock(\\n        address _owner,\\n        uint256 _seqId,\\n        uint256 _amount,\\n        uint256 _reward,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function liquidateReward(\\n        uint256 _seqId,\\n        uint256 _amount,\\n        address _recipient,\\n        uint32 _l2gas\\n    ) external payable;\\n\\n    function distributeReward(uint256 _batchId, uint256 _totalReward) external;\\n\\n    function logSignerChange(\\n        uint256 sequencerId,\\n        address oldSigner,\\n        address newSigner,\\n        uint256 nonce,\\n        bytes calldata signerPubkey\\n    ) external;\\n}\",\"keccak256\":\"0x6f3e6d86896060f4474907518d8c1410faba6f39757b95203602d969be1c10fe\",\"license\":\"MIT\"},\"interface/ILockingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ILockingInfo.sol\\\";\\nimport \\\"./ISequencerInfo.sol\\\";\\n\\ninterface ILockingPool is ISequencerInfo {\\n    struct SequencerData {\\n        uint256 amount; // sequencer current locked\\n        uint256 reward; // sequencer current reward that have not cleamed\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 updatedBatch; // batch id of the last updated\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consencus client\\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\\n    }\\n\\n    function lockFor(address _signer, uint256 _amount, bytes calldata _signerPubkey) external;\\n    function lockWithRewardRecipient(address _signer, address _rewardRecipient, uint256 _amount, bytes calldata _signerPubkey) external;\\n    function relock(uint256 _seqId, uint256 _amount, bool _lockReward) external;\\n    function withdrawRewards(uint256 _seqId, uint32 _l2Gas) external;\\n    function unlock( uint256 _seqId, uint32 _l2Gas) external payable;\\n    function unlockClaim(uint256 _seqId, uint32 _l2Gas) external payable;\\n    function escrow() external view returns (ILockingInfo);\\n    function sequencers(uint256 seqId) external view returns (SequencerData memory);\\n    function seqSigners(address signer) external view returns (uint256 seqId);\\n\\n    /**\\n     * @dev Emitted when WITHDRAWAL_DELAY is updated.\\n     * @param _cur current withdraw delay time\\n     * @param _prev previours withdraw delay time\\n     */\\n    event WithrawDelayTimeChange(uint256 _cur, uint256 _prev);\\n\\n    /**\\n     * @dev Emitted when the proxy update threshold in 'updateBlockReward()'.\\n     * @param newReward new block reward\\n     * @param oldReward  old block reward\\n     */\\n    event RewardUpdate(uint256 newReward, uint256 oldReward);\\n\\n    /**\\n     * @dev Emitted when mpc address update in 'UpdateMpc'\\n     * @param _newMpc new min lock.\\n     */\\n    event UpdateMpc(address _newMpc);\\n\\n    /**\\n     * @dev Emitted when SignerUpdateThrottle is updated\\n     * @param _n new min value\\n     */\\n    event SetSignerUpdateThrottle(uint256 _n);\\n    function withdraw(uint256 _seqId, uint256 _amount) external;\\n}\",\"keccak256\":\"0xa7c18b713ed86a9a510c322241669b8d9ed6a1806c1d68229c5b440169938133\",\"license\":\"GPL-2.0-or-later\"},\"interface/ISequencerInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ISequencerInfo {\\n    error OwnedSequencer();\\n    error SignerExisted();\\n    error NoSuchSeq();\\n    error NullAddress();\\n    error SeqNotActive();\\n    error NotSeqOwner();\\n    error NotSeqSigner();\\n    error NoRewardRecipient();\\n    error NotWhitelisted();\\n\\n    // the sequencer status\\n    enum Status {\\n        Unavailabe, // placeholder for default value\\n        Inactive, // the sequencer will be Inactive if its owner starts unlock\\n        Active, // the sequencer is active when it locks tokens on the contract\\n        Unlocked // Exited, the sequencer has no locked tokens, and it's no longer produce blocks on L2\\n    }\\n\\n    struct Sequencer {\\n        uint256 amount; // sequencer current locked\\n        uint256 reward; // sequencer current reward that have not cleamed\\n        uint256 activationBatch; // sequencer activation batch id\\n        uint256 updatedBatch; // batch id of the last updated\\n        uint256 deactivationBatch; // sequencer deactivation batch id\\n        uint256 deactivationTime; // sequencer deactivation timestamp\\n        uint256 unlockClaimTime; // timestamp that sequencer can claim unlocked token, it's equal to deactivationTime + WITHDRAWAL_DELAY\\n        uint256 nonce; // sequencer operations number, starts from 1, and used internally by the Metis consencus client\\n        address owner; // the operator address, owns this sequencer node, it controls lock/relock/unlock/claim functions\\n        address signer; // sequencer signer, an address to sign L2 blocks, if you want to update it, you must have the privkey of this address\\n        bytes pubkey; // sequencer signer pubkey\\n        address rewardRecipient; // sequencer rewarder recipient address\\n        Status status; // sequencer status\\n    }\\n\\n    /**\\n     * @dev Emitted if owner call 'setWhitelist'\\n     * @param _user the address who can lock token\\n     * @param _yes white address state\\n     */\\n    event SetWhitelist(address _user, bool _yes);\\n\\n    /**\\n     * @dev Emitted when reward recipient address update in 'setSequencerRewardRecipient'\\n     * @param _seqId the sequencerId\\n     * @param _recipient the address receive reward token\\n     */\\n    event SequencerRewardRecipientChanged(uint256 _seqId, address _recipient);\\n\\n    /**\\n     * @dev Emitted when sequencer owner is changed\\n     * @param _seqId the sequencerId\\n     * @param _owner the sequencer owner\\n     */\\n    event SequencerOwnerChanged(uint256 _seqId, address _owner);\\n\\n    function seqOwners(address owner) external returns (uint256 seqId);\\n}\",\"keccak256\":\"0x391c0da4e5953583f9d184d2646d4bc69654161f9ba5da0fa600c79a72b3c1ac\",\"license\":\"MIT\"},\"interface/IVeMetisMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IVeMetisMinter {\\n    function mint(address user, uint256 amount) external;\\n\\n    function mintFromL1(uint256 amount) external;\\n\\n    function depositToL1Dealer(uint256 amount) external payable;\\n}\",\"keccak256\":\"0x19711cc1c9f794c07bf02cca34f9895ef30b1372ca32b5c7a9d1d46147ac158c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061364c806100206000396000f3fe6080604052600436106101f95760003560e01c80638db8ad881161010d578063c53b573d116100a0578063e92d61e51161006f578063e92d61e5146106a4578063f2fde38b146106cf578063f7cee36a146106f8578063f87b7a3e14610723578063feafaa6b1461074c576101f9565b8063c53b573d14610605578063c7b8981c14610623578063d6ae3cd51461064e578063e597455414610679576101f9565b8063acec338a116100dc578063acec338a1461055f578063af70cba514610588578063b699ce5f146105b1578063c3b550c8146105da576101f9565b80638db8ad88146104d457806397ec19be146104ff5780639e9357041461052a578063a69df4b514610555576101f9565b80633cbb697911610190578063715018a61161015f578063715018a61461041157806376d9f95c146104285780637ca4f8b01461045357806385d1e2b81461047e5780638da5cb5b146104a9576101f9565b80633cbb69791461035557806343c82cf714610380578063457cb586146103a957806356891412146103e6576101f9565b80631abdaf6a116101cc5780631abdaf6a1461029b57806333bec7e7146102d85780633b4c46d0146103015780633cb747bf1461032a576101f9565b80630182a6da146101fe57806302fb0c5e1461021a57806304a78fca14610245578063080e1e4e14610270575b600080fd5b610218600480360381019061021391906126a2565b610756565b005b34801561022657600080fd5b5061022f610bd3565b60405161023c91906126ea565b60405180910390f35b34801561025157600080fd5b5061025a610be6565b6040516102679190612714565b60405180910390f35b34801561027c57600080fd5b50610285610bec565b6040516102929190612770565b60405180910390f35b3480156102a757600080fd5b506102c260048036038101906102bd91906126a2565b610c12565b6040516102cf91906127aa565b60405180910390f35b3480156102e457600080fd5b506102ff60048036038101906102fa91906127f1565b610c4c565b005b34801561030d57600080fd5b506103286004803603810190610323919061284a565b610cc9565b005b34801561033657600080fd5b5061033f610d15565b60405161034c91906128d6565b60405180910390f35b34801561036157600080fd5b5061036a610d3b565b60405161037791906127aa565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a2919061284a565b610d51565b005b3480156103b557600080fd5b506103d060048036038101906103cb91906127f1565b610d9d565b6040516103dd9190612770565b60405180910390f35b3480156103f257600080fd5b506103fb610dd0565b6040516104089190612714565b60405180910390f35b34801561041d57600080fd5b50610426610de3565b005b34801561043457600080fd5b5061043d610df7565b60405161044a91906129db565b60405180910390f35b34801561045f57600080fd5b50610468610ea3565b6040516104759190612714565b60405180910390f35b34801561048a57600080fd5b50610493610ea9565b6040516104a09190612a18565b60405180910390f35b3480156104b557600080fd5b506104be610ecf565b6040516104cb9190612770565b60405180910390f35b3480156104e057600080fd5b506104e9610f07565b6040516104f69190612770565b60405180910390f35b34801561050b57600080fd5b50610514610f2b565b6040516105219190612770565b60405180910390f35b34801561053657600080fd5b5061053f610f51565b60405161054c91906127aa565b60405180910390f35b61055d610f67565b005b34801561056b57600080fd5b5061058660048036038101906105819190612a5f565b611095565b005b34801561059457600080fd5b506105af60048036038101906105aa9190612bd2565b6110ba565b005b3480156105bd57600080fd5b506105d860048036038101906105d39190612c41565b611544565b005b3480156105e657600080fd5b506105ef611ad9565b6040516105fc9190612770565b60405180910390f35b61060d611aff565b60405161061a9190612714565b60405180910390f35b34801561062f57600080fd5b50610638611f86565b60405161064591906126ea565b60405180910390f35b34801561065a57600080fd5b50610663611f99565b6040516106709190612714565b60405180910390f35b34801561068557600080fd5b5061068e611f9f565b60405161069b9190612d04565b60405180910390f35b3480156106b057600080fd5b506106b9611fc5565b6040516106c69190612770565b60405180910390f35b3480156106db57600080fd5b506106f660048036038101906106f1919061284a565b611feb565b005b34801561070457600080fd5b5061070d612071565b60405161071a9190612d40565b60405180910390f35b34801561072f57600080fd5b5061074a6004803603810190610745919061284a565b612097565b005b6107546120e3565b005b61075e612191565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e70600d54836040518363ffffffff1660e01b81526004016107bd929190612d5b565b600060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190612d99565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109159190612d99565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b382846040518363ffffffff1660e01b815260040161094f929190612dc6565b6020604051808303816000875af115801561096e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109929190612e04565b508073ffffffffffffffffffffffffffffffffffffffff1663ef808be234600554600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190612d99565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356eff2676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad59190612d99565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688600c60009054906101000a900463ffffffff166040518863ffffffff1660e01b8152600401610b2d96959493929190612e68565b6000604051808303818588803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b5050505050600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6ef7a26d50cec3f1a210bed887413d426c9c13575a17872c54e00c4287ac5dce83604051610bc79190612714565b60405180910390a25050565b600e60149054906101000a900460ff1681565b600d5481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a8181548110610c2257600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b610c54612191565b6000600c60009054906101000a900463ffffffff16905081600c60006101000a81548163ffffffff021916908363ffffffff1602179055507f4042b09a75e5a67c8cc2a57e00de6d29fb5202b7207afba895eb8b5cc3e2179e8183604051610cbd929190612edc565b60405180910390a15050565b610cd1612191565b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900463ffffffff1681565b610d59612191565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610dda610df7565b60000151905090565b610deb612191565b610df56000612218565b565b610dff6125d9565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ba7ccff600d546040518263ffffffff1660e01b8152600401610e5c9190612714565b61014060405180830381865afa158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e9190613015565b905090565b600b5481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610eda6122ef565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900463ffffffff1681565b610f6f612191565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663262c0e6634600d54600c60009054906101000a900463ffffffff166040518463ffffffff1660e01b8152600401610fe1929190613043565b6000604051808303818588803b158015610ffa57600080fd5b505af115801561100e573d6000803e3d6000fd5b50505050506000600e60146101000a81548160ff021916908315150217905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbac99876b6a1c26412460d61d913235a30f0ea99585ffcfd53c0faae6ed3313460405160405180910390a2565b61109d612191565b80600e60146101000a81548160ff02191690831515021790555050565b6110c2612191565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161111f9190612770565b602060405180830381865afa15801561113c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611160919061306c565b9050828110156111a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119c9061311c565b60405180910390fd5b83600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401611285929190612dc6565b6020604051808303816000875af11580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190612e04565b611307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fe906131ae565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ad42030600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686866040518563ffffffff1660e01b81526004016113ac949392919061323c565b600060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beb26755600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161145b9190612770565b602060405180830381865afa158015611478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149c919061306c565b600d819055506001600e60146101000a81548160ff021916908315150217905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb1e87a33084279cb2bff2d1271034cf695f539ee73bbd934d1625703d585d84a84600e60149054906101000a900460ff16604051611536929190613288565b60405180910390a250505050565b600061154e612317565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561159c5750825b9050600060018367ffffffffffffffff161480156115d1575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156115df575080155b15611616576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156116665760018560000160086101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16141580156116d05750600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614155b80156117095750600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614155b80156117425750600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b801561177b5750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b6117ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b1906132fd565b60405180910390fd5b6117c33361233f565b8b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2fdcc176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d6919061335b565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508973ffffffffffffffffffffffffffffffffffffffff16633cb747bf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119859190612d99565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508860058190555087600c60006101000a81548163ffffffff021916908363ffffffff16021790555086600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508315611acb5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051611ac291906133d7565b60405180910390a15b505050505050505050505050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60149054906101000a900460ff16611b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b479061343e565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c0b3e466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be3919061306c565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c429190612770565b602060405180830381865afa158015611c5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c83919061306c565b90506000805b60018163ffffffff161015611f1b576000611ca2610df7565b905060008082602001518360000151915091508185611cc1919061348d565b94506000878210611cd3576000611ce0565b8188611cdf91906134c1565b5b90506000611cee8289612353565b90508088611cfc91906134c1565b975060008482611d0c919061348d565b9050808b611d1a919061348d565b9a5060008a8286611d2b919061348d565b119050808015611d3b5750600086115b15611e1e57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317396687600d54600c60009054906101000a900463ffffffff166040518363ffffffff1660e01b8152600401611db1929190613043565b600060405180830381600087803b158015611dcb57600080fd5b505af1158015611ddf573d6000803e3d6000fd5b50505050600d547f630af8b49bb398089a74eacdb08106c528436090bdb35d7302152dc5117df9bd87604051611e159190612714565b60405180910390a25b801580611e2b5750600083115b15611f0157600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663015bb180600d548560016040518463ffffffff1660e01b8152600401611e92939291906134f5565b600060405180830381600087803b158015611eac57600080fd5b505af1158015611ec0573d6000803e3d6000fd5b505050507fb8aafdec9bacdc76bfea3c330063c391a2904d4f91e71f97a91534f3c8ce4ab560008488604051611ef893929190613567565b60405180910390a15b505050505050508080611f139061359e565b915050611c89565b506000811115611f4857611f2e8161236c565b80600b6000828254611f40919061348d565b925050819055505b7f1e2aed425906c5ed1ac5aff65e04a30adda54675483414997c879ca7f92a2a576001604051611f7891906126ea565b60405180910390a150505090565b600c60049054906101000a900460ff1681565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611ff3612191565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120655760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161205c9190612770565b60405180910390fd5b61206e81612218565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61209f612191565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6120eb612191565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638ddc74de34600d54600c60009054906101000a900463ffffffff166040518463ffffffff1660e01b815260040161215d929190613043565b6000604051808303818588803b15801561217657600080fd5b505af115801561218a573d6000803e3d6000fd5b5050505050565b6121996124eb565b73ffffffffffffffffffffffffffffffffffffffff166121b7610ecf565b73ffffffffffffffffffffffffffffffffffffffff1614612216576121da6124eb565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161220d9190612770565b60405180910390fd5b565b60006122226122ef565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6123476124f3565b61235081612533565b50565b60008183106123625781612364565b825b905092915050565b600063eb82afb360e01b826040516024016123879190612714565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344dd5ed634600554600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600c60009054906101000a900463ffffffff166040518663ffffffff1660e01b815260040161247e94939291906135ca565b6000604051808303818588803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b50505050507fd644e527c1896057ce642adfbc00f04d6b23d4c2fb30529522184d151dc087dc826040516124df9190612714565b60405180910390a15050565b600033905090565b6124fb6125b9565b612531576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61253b6124f3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125ad5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016125a49190612770565b60405180910390fd5b6125b681612218565b50565b60006125c3612317565b60000160089054906101000a900460ff16905090565b6040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61267f8161266c565b811461268a57600080fd5b50565b60008135905061269c81612676565b92915050565b6000602082840312156126b8576126b7612662565b5b60006126c68482850161268d565b91505092915050565b60008115159050919050565b6126e4816126cf565b82525050565b60006020820190506126ff60008301846126db565b92915050565b61270e8161266c565b82525050565b60006020820190506127296000830184612705565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061275a8261272f565b9050919050565b61276a8161274f565b82525050565b60006020820190506127856000830184612761565b92915050565b600063ffffffff82169050919050565b6127a48161278b565b82525050565b60006020820190506127bf600083018461279b565b92915050565b6127ce8161278b565b81146127d957600080fd5b50565b6000813590506127eb816127c5565b92915050565b60006020828403121561280757612806612662565b5b6000612815848285016127dc565b91505092915050565b6128278161274f565b811461283257600080fd5b50565b6000813590506128448161281e565b92915050565b6000602082840312156128605761285f612662565b5b600061286e84828501612835565b91505092915050565b6000819050919050565b600061289c6128976128928461272f565b612877565b61272f565b9050919050565b60006128ae82612881565b9050919050565b60006128c0826128a3565b9050919050565b6128d0816128b5565b82525050565b60006020820190506128eb60008301846128c7565b92915050565b6128fa8161266c565b82525050565b6129098161274f565b82525050565b6101408201600082015161292660008501826128f1565b50602082015161293960208501826128f1565b50604082015161294c60408501826128f1565b50606082015161295f60608501826128f1565b50608082015161297260808501826128f1565b5060a082015161298560a08501826128f1565b5060c082015161299860c08501826128f1565b5060e08201516129ab60e08501826128f1565b506101008201516129c0610100850182612900565b506101208201516129d5610120850182612900565b50505050565b6000610140820190506129f1600083018461290f565b92915050565b6000612a02826128a3565b9050919050565b612a12816129f7565b82525050565b6000602082019050612a2d6000830184612a09565b92915050565b612a3c816126cf565b8114612a4757600080fd5b50565b600081359050612a5981612a33565b92915050565b600060208284031215612a7557612a74612662565b5b6000612a8384828501612a4a565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612adf82612a96565b810181811067ffffffffffffffff82111715612afe57612afd612aa7565b5b80604052505050565b6000612b11612658565b9050612b1d8282612ad6565b919050565b600067ffffffffffffffff821115612b3d57612b3c612aa7565b5b612b4682612a96565b9050602081019050919050565b82818337600083830152505050565b6000612b75612b7084612b22565b612b07565b905082815260208101848484011115612b9157612b90612a91565b5b612b9c848285612b53565b509392505050565b600082601f830112612bb957612bb8612a8c565b5b8135612bc9848260208601612b62565b91505092915050565b600080600060608486031215612beb57612bea612662565b5b6000612bf986828701612835565b9350506020612c0a8682870161268d565b925050604084013567ffffffffffffffff811115612c2b57612c2a612667565b5b612c3786828701612ba4565b9150509250925092565b600080600080600080600060e0888a031215612c6057612c5f612662565b5b6000612c6e8a828b01612835565b9750506020612c7f8a828b01612835565b9650506040612c908a828b01612835565b9550506060612ca18a828b0161268d565b9450506080612cb28a828b016127dc565b93505060a0612cc38a828b01612835565b92505060c0612cd48a828b01612835565b91505092959891949750929550565b6000612cee826128a3565b9050919050565b612cfe81612ce3565b82525050565b6000602082019050612d196000830184612cf5565b92915050565b6000612d2a826128a3565b9050919050565b612d3a81612d1f565b82525050565b6000602082019050612d556000830184612d31565b92915050565b6000604082019050612d706000830185612705565b612d7d6020830184612705565b9392505050565b600081519050612d938161281e565b92915050565b600060208284031215612daf57612dae612662565b5b6000612dbd84828501612d84565b91505092915050565b6000604082019050612ddb6000830185612761565b612de86020830184612705565b9392505050565b600081519050612dfe81612a33565b92915050565b600060208284031215612e1a57612e19612662565b5b6000612e2884828501612def565b91505092915050565b600082825260208201905092915050565b50565b6000612e52600083612e31565b9150612e5d82612e42565b600082019050919050565b600060e082019050612e7d6000830189612705565b612e8a6020830188612761565b612e976040830187612761565b612ea46060830186612761565b612eb16080830185612705565b612ebe60a083018461279b565b81810360c0830152612ecf81612e45565b9050979650505050505050565b6000604082019050612ef1600083018561279b565b612efe602083018461279b565b9392505050565b600080fd5b600081519050612f1981612676565b92915050565b60006101408284031215612f3657612f35612f05565b5b612f41610140612b07565b90506000612f5184828501612f0a565b6000830152506020612f6584828501612f0a565b6020830152506040612f7984828501612f0a565b6040830152506060612f8d84828501612f0a565b6060830152506080612fa184828501612f0a565b60808301525060a0612fb584828501612f0a565b60a08301525060c0612fc984828501612f0a565b60c08301525060e0612fdd84828501612f0a565b60e083015250610100612ff284828501612d84565b6101008301525061012061300884828501612d84565b6101208301525092915050565b6000610140828403121561302c5761302b612662565b5b600061303a84828501612f1f565b91505092915050565b60006040820190506130586000830185612705565b613065602083018461279b565b9392505050565b60006020828403121561308257613081612662565b5b600061309084828501612f0a565b91505092915050565b600082825260208201905092915050565b7f4465616c65723a20496e73756666696369656e74204d657469732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000613106602283613099565b9150613111826130aa565b604082019050919050565b60006020820190508181036000830152613135816130f9565b9050919050565b7f4465616c65723a20417070726f76616c20746f204c6f636b696e67496e666f2060008201527f6661696c65640000000000000000000000000000000000000000000000000000602082015250565b6000613198602683613099565b91506131a38261313c565b604082019050919050565b600060208201905081810360008301526131c78161318b565b9050919050565b600081519050919050565b60005b838110156131f75780820151818401526020810190506131dc565b60008484015250505050565b600061320e826131ce565b6132188185612e31565b93506132288185602086016131d9565b61323181612a96565b840191505092915050565b60006080820190506132516000830187612761565b61325e6020830186612761565b61326b6040830185612705565b818103606083015261327d8184613203565b905095945050505050565b600060408201905061329d6000830185612705565b6132aa60208301846126db565b9392505050565b7f4465616c65723a207a65726f2061646472657373000000000000000000000000600082015250565b60006132e7601483613099565b91506132f2826132b1565b602082019050919050565b60006020820190508181036000830152613316816132da565b9050919050565b60006133288261274f565b9050919050565b6133388161331d565b811461334357600080fd5b50565b6000815190506133558161332f565b92915050565b60006020828403121561337157613370612662565b5b600061337f84828501613346565b91505092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006133c16133bc6133b784613388565b612877565b613392565b9050919050565b6133d1816133a6565b82525050565b60006020820190506133ec60008301846133c8565b92915050565b7f4465616c65723a206e6f206163746976652073657175656e6365720000000000600082015250565b6000613428601b83613099565b9150613433826133f2565b602082019050919050565b600060208201905081810360008301526134578161341b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006134988261266c565b91506134a38361266c565b92508282019050808211156134bb576134ba61345e565b5b92915050565b60006134cc8261266c565b91506134d78361266c565b92508282039050818111156134ef576134ee61345e565b5b92915050565b600060608201905061350a6000830186612705565b6135176020830185612705565b61352460408301846126db565b949350505050565b6000819050919050565b600061355161354c6135478461352c565b612877565b61278b565b9050919050565b61356181613536565b82525050565b600060608201905061357c6000830186613558565b6135896020830185612705565b6135966040830184612705565b949350505050565b60006135a98261278b565b915063ffffffff82036135bf576135be61345e565b5b600182019050919050565b60006080820190506135df6000830187612705565b6135ec6020830186612761565b81810360408301526135fe8185613203565b905061360d606083018461279b565b9594505050505056fea2646970667358221220fa857a6eaba9c26f34966522053515569511821e051017fbbb230d6cb14f17d164736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c80638db8ad881161010d578063c53b573d116100a0578063e92d61e51161006f578063e92d61e5146106a4578063f2fde38b146106cf578063f7cee36a146106f8578063f87b7a3e14610723578063feafaa6b1461074c576101f9565b8063c53b573d14610605578063c7b8981c14610623578063d6ae3cd51461064e578063e597455414610679576101f9565b8063acec338a116100dc578063acec338a1461055f578063af70cba514610588578063b699ce5f146105b1578063c3b550c8146105da576101f9565b80638db8ad88146104d457806397ec19be146104ff5780639e9357041461052a578063a69df4b514610555576101f9565b80633cbb697911610190578063715018a61161015f578063715018a61461041157806376d9f95c146104285780637ca4f8b01461045357806385d1e2b81461047e5780638da5cb5b146104a9576101f9565b80633cbb69791461035557806343c82cf714610380578063457cb586146103a957806356891412146103e6576101f9565b80631abdaf6a116101cc5780631abdaf6a1461029b57806333bec7e7146102d85780633b4c46d0146103015780633cb747bf1461032a576101f9565b80630182a6da146101fe57806302fb0c5e1461021a57806304a78fca14610245578063080e1e4e14610270575b600080fd5b610218600480360381019061021391906126a2565b610756565b005b34801561022657600080fd5b5061022f610bd3565b60405161023c91906126ea565b60405180910390f35b34801561025157600080fd5b5061025a610be6565b6040516102679190612714565b60405180910390f35b34801561027c57600080fd5b50610285610bec565b6040516102929190612770565b60405180910390f35b3480156102a757600080fd5b506102c260048036038101906102bd91906126a2565b610c12565b6040516102cf91906127aa565b60405180910390f35b3480156102e457600080fd5b506102ff60048036038101906102fa91906127f1565b610c4c565b005b34801561030d57600080fd5b506103286004803603810190610323919061284a565b610cc9565b005b34801561033657600080fd5b5061033f610d15565b60405161034c91906128d6565b60405180910390f35b34801561036157600080fd5b5061036a610d3b565b60405161037791906127aa565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a2919061284a565b610d51565b005b3480156103b557600080fd5b506103d060048036038101906103cb91906127f1565b610d9d565b6040516103dd9190612770565b60405180910390f35b3480156103f257600080fd5b506103fb610dd0565b6040516104089190612714565b60405180910390f35b34801561041d57600080fd5b50610426610de3565b005b34801561043457600080fd5b5061043d610df7565b60405161044a91906129db565b60405180910390f35b34801561045f57600080fd5b50610468610ea3565b6040516104759190612714565b60405180910390f35b34801561048a57600080fd5b50610493610ea9565b6040516104a09190612a18565b60405180910390f35b3480156104b557600080fd5b506104be610ecf565b6040516104cb9190612770565b60405180910390f35b3480156104e057600080fd5b506104e9610f07565b6040516104f69190612770565b60405180910390f35b34801561050b57600080fd5b50610514610f2b565b6040516105219190612770565b60405180910390f35b34801561053657600080fd5b5061053f610f51565b60405161054c91906127aa565b60405180910390f35b61055d610f67565b005b34801561056b57600080fd5b5061058660048036038101906105819190612a5f565b611095565b005b34801561059457600080fd5b506105af60048036038101906105aa9190612bd2565b6110ba565b005b3480156105bd57600080fd5b506105d860048036038101906105d39190612c41565b611544565b005b3480156105e657600080fd5b506105ef611ad9565b6040516105fc9190612770565b60405180910390f35b61060d611aff565b60405161061a9190612714565b60405180910390f35b34801561062f57600080fd5b50610638611f86565b60405161064591906126ea565b60405180910390f35b34801561065a57600080fd5b50610663611f99565b6040516106709190612714565b60405180910390f35b34801561068557600080fd5b5061068e611f9f565b60405161069b9190612d04565b60405180910390f35b3480156106b057600080fd5b506106b9611fc5565b6040516106c69190612770565b60405180910390f35b3480156106db57600080fd5b506106f660048036038101906106f1919061284a565b611feb565b005b34801561070457600080fd5b5061070d612071565b60405161071a9190612d40565b60405180910390f35b34801561072f57600080fd5b5061074a6004803603810190610745919061284a565b612097565b005b6107546120e3565b005b61075e612191565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e70600d54836040518363ffffffff1660e01b81526004016107bd929190612d5b565b600060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108829190612d99565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109159190612d99565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b382846040518363ffffffff1660e01b815260040161094f929190612dc6565b6020604051808303816000875af115801561096e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109929190612e04565b508073ffffffffffffffffffffffffffffffffffffffff1663ef808be234600554600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c01e1bd66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190612d99565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356eff2676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad59190612d99565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688600c60009054906101000a900463ffffffff166040518863ffffffff1660e01b8152600401610b2d96959493929190612e68565b6000604051808303818588803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b5050505050600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f6ef7a26d50cec3f1a210bed887413d426c9c13575a17872c54e00c4287ac5dce83604051610bc79190612714565b60405180910390a25050565b600e60149054906101000a900460ff1681565b600d5481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a8181548110610c2257600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b610c54612191565b6000600c60009054906101000a900463ffffffff16905081600c60006101000a81548163ffffffff021916908363ffffffff1602179055507f4042b09a75e5a67c8cc2a57e00de6d29fb5202b7207afba895eb8b5cc3e2179e8183604051610cbd929190612edc565b60405180910390a15050565b610cd1612191565b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900463ffffffff1681565b610d59612191565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610dda610df7565b60000151905090565b610deb612191565b610df56000612218565b565b610dff6125d9565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ba7ccff600d546040518263ffffffff1660e01b8152600401610e5c9190612714565b61014060405180830381865afa158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e9190613015565b905090565b600b5481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610eda6122ef565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900463ffffffff1681565b610f6f612191565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663262c0e6634600d54600c60009054906101000a900463ffffffff166040518463ffffffff1660e01b8152600401610fe1929190613043565b6000604051808303818588803b158015610ffa57600080fd5b505af115801561100e573d6000803e3d6000fd5b50505050506000600e60146101000a81548160ff021916908315150217905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbac99876b6a1c26412460d61d913235a30f0ea99585ffcfd53c0faae6ed3313460405160405180910390a2565b61109d612191565b80600e60146101000a81548160ff02191690831515021790555050565b6110c2612191565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161111f9190612770565b602060405180830381865afa15801561113c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611160919061306c565b9050828110156111a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119c9061311c565b60405180910390fd5b83600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401611285929190612dc6565b6020604051808303816000875af11580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190612e04565b611307576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fe906131ae565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ad42030600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686866040518563ffffffff1660e01b81526004016113ac949392919061323c565b600060405180830381600087803b1580156113c657600080fd5b505af11580156113da573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beb26755600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161145b9190612770565b602060405180830381865afa158015611478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149c919061306c565b600d819055506001600e60146101000a81548160ff021916908315150217905550600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb1e87a33084279cb2bff2d1271034cf695f539ee73bbd934d1625703d585d84a84600e60149054906101000a900460ff16604051611536929190613288565b60405180910390a250505050565b600061154e612317565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff1614801561159c5750825b9050600060018367ffffffffffffffff161480156115d1575060003073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156115df575080155b15611616576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083156116665760018560000160086101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16141580156116d05750600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614155b80156117095750600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614155b80156117425750600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614155b801561177b5750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b6117ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b1906132fd565b60405180910390fd5b6117c33361233f565b8b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2fdcc176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d6919061335b565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508973ffffffffffffffffffffffffffffffffffffffff16633cb747bf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611961573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119859190612d99565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508860058190555087600c60006101000a81548163ffffffff021916908363ffffffff16021790555086600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508315611acb5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051611ac291906133d7565b60405180910390a15b505050505050505050505050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600e60149054906101000a900460ff16611b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b479061343e565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636c0b3e466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be3919061306c565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c429190612770565b602060405180830381865afa158015611c5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c83919061306c565b90506000805b60018163ffffffff161015611f1b576000611ca2610df7565b905060008082602001518360000151915091508185611cc1919061348d565b94506000878210611cd3576000611ce0565b8188611cdf91906134c1565b5b90506000611cee8289612353565b90508088611cfc91906134c1565b975060008482611d0c919061348d565b9050808b611d1a919061348d565b9a5060008a8286611d2b919061348d565b119050808015611d3b5750600086115b15611e1e57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317396687600d54600c60009054906101000a900463ffffffff166040518363ffffffff1660e01b8152600401611db1929190613043565b600060405180830381600087803b158015611dcb57600080fd5b505af1158015611ddf573d6000803e3d6000fd5b50505050600d547f630af8b49bb398089a74eacdb08106c528436090bdb35d7302152dc5117df9bd87604051611e159190612714565b60405180910390a25b801580611e2b5750600083115b15611f0157600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663015bb180600d548560016040518463ffffffff1660e01b8152600401611e92939291906134f5565b600060405180830381600087803b158015611eac57600080fd5b505af1158015611ec0573d6000803e3d6000fd5b505050507fb8aafdec9bacdc76bfea3c330063c391a2904d4f91e71f97a91534f3c8ce4ab560008488604051611ef893929190613567565b60405180910390a15b505050505050508080611f139061359e565b915050611c89565b506000811115611f4857611f2e8161236c565b80600b6000828254611f40919061348d565b925050819055505b7f1e2aed425906c5ed1ac5aff65e04a30adda54675483414997c879ca7f92a2a576001604051611f7891906126ea565b60405180910390a150505090565b600c60049054906101000a900460ff1681565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611ff3612191565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120655760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161205c9190612770565b60405180910390fd5b61206e81612218565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61209f612191565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6120eb612191565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638ddc74de34600d54600c60009054906101000a900463ffffffff166040518463ffffffff1660e01b815260040161215d929190613043565b6000604051808303818588803b15801561217657600080fd5b505af115801561218a573d6000803e3d6000fd5b5050505050565b6121996124eb565b73ffffffffffffffffffffffffffffffffffffffff166121b7610ecf565b73ffffffffffffffffffffffffffffffffffffffff1614612216576121da6124eb565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161220d9190612770565b60405180910390fd5b565b60006122226122ef565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6123476124f3565b61235081612533565b50565b60008183106123625781612364565b825b905092915050565b600063eb82afb360e01b826040516024016123879190612714565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166344dd5ed634600554600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600c60009054906101000a900463ffffffff166040518663ffffffff1660e01b815260040161247e94939291906135ca565b6000604051808303818588803b15801561249757600080fd5b505af11580156124ab573d6000803e3d6000fd5b50505050507fd644e527c1896057ce642adfbc00f04d6b23d4c2fb30529522184d151dc087dc826040516124df9190612714565b60405180910390a15050565b600033905090565b6124fb6125b9565b612531576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61253b6124f3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125ad5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016125a49190612770565b60405180910390fd5b6125b681612218565b50565b60006125c3612317565b60000160089054906101000a900460ff16905090565b6040518061014001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61267f8161266c565b811461268a57600080fd5b50565b60008135905061269c81612676565b92915050565b6000602082840312156126b8576126b7612662565b5b60006126c68482850161268d565b91505092915050565b60008115159050919050565b6126e4816126cf565b82525050565b60006020820190506126ff60008301846126db565b92915050565b61270e8161266c565b82525050565b60006020820190506127296000830184612705565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061275a8261272f565b9050919050565b61276a8161274f565b82525050565b60006020820190506127856000830184612761565b92915050565b600063ffffffff82169050919050565b6127a48161278b565b82525050565b60006020820190506127bf600083018461279b565b92915050565b6127ce8161278b565b81146127d957600080fd5b50565b6000813590506127eb816127c5565b92915050565b60006020828403121561280757612806612662565b5b6000612815848285016127dc565b91505092915050565b6128278161274f565b811461283257600080fd5b50565b6000813590506128448161281e565b92915050565b6000602082840312156128605761285f612662565b5b600061286e84828501612835565b91505092915050565b6000819050919050565b600061289c6128976128928461272f565b612877565b61272f565b9050919050565b60006128ae82612881565b9050919050565b60006128c0826128a3565b9050919050565b6128d0816128b5565b82525050565b60006020820190506128eb60008301846128c7565b92915050565b6128fa8161266c565b82525050565b6129098161274f565b82525050565b6101408201600082015161292660008501826128f1565b50602082015161293960208501826128f1565b50604082015161294c60408501826128f1565b50606082015161295f60608501826128f1565b50608082015161297260808501826128f1565b5060a082015161298560a08501826128f1565b5060c082015161299860c08501826128f1565b5060e08201516129ab60e08501826128f1565b506101008201516129c0610100850182612900565b506101208201516129d5610120850182612900565b50505050565b6000610140820190506129f1600083018461290f565b92915050565b6000612a02826128a3565b9050919050565b612a12816129f7565b82525050565b6000602082019050612a2d6000830184612a09565b92915050565b612a3c816126cf565b8114612a4757600080fd5b50565b600081359050612a5981612a33565b92915050565b600060208284031215612a7557612a74612662565b5b6000612a8384828501612a4a565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612adf82612a96565b810181811067ffffffffffffffff82111715612afe57612afd612aa7565b5b80604052505050565b6000612b11612658565b9050612b1d8282612ad6565b919050565b600067ffffffffffffffff821115612b3d57612b3c612aa7565b5b612b4682612a96565b9050602081019050919050565b82818337600083830152505050565b6000612b75612b7084612b22565b612b07565b905082815260208101848484011115612b9157612b90612a91565b5b612b9c848285612b53565b509392505050565b600082601f830112612bb957612bb8612a8c565b5b8135612bc9848260208601612b62565b91505092915050565b600080600060608486031215612beb57612bea612662565b5b6000612bf986828701612835565b9350506020612c0a8682870161268d565b925050604084013567ffffffffffffffff811115612c2b57612c2a612667565b5b612c3786828701612ba4565b9150509250925092565b600080600080600080600060e0888a031215612c6057612c5f612662565b5b6000612c6e8a828b01612835565b9750506020612c7f8a828b01612835565b9650506040612c908a828b01612835565b9550506060612ca18a828b0161268d565b9450506080612cb28a828b016127dc565b93505060a0612cc38a828b01612835565b92505060c0612cd48a828b01612835565b91505092959891949750929550565b6000612cee826128a3565b9050919050565b612cfe81612ce3565b82525050565b6000602082019050612d196000830184612cf5565b92915050565b6000612d2a826128a3565b9050919050565b612d3a81612d1f565b82525050565b6000602082019050612d556000830184612d31565b92915050565b6000604082019050612d706000830185612705565b612d7d6020830184612705565b9392505050565b600081519050612d938161281e565b92915050565b600060208284031215612daf57612dae612662565b5b6000612dbd84828501612d84565b91505092915050565b6000604082019050612ddb6000830185612761565b612de86020830184612705565b9392505050565b600081519050612dfe81612a33565b92915050565b600060208284031215612e1a57612e19612662565b5b6000612e2884828501612def565b91505092915050565b600082825260208201905092915050565b50565b6000612e52600083612e31565b9150612e5d82612e42565b600082019050919050565b600060e082019050612e7d6000830189612705565b612e8a6020830188612761565b612e976040830187612761565b612ea46060830186612761565b612eb16080830185612705565b612ebe60a083018461279b565b81810360c0830152612ecf81612e45565b9050979650505050505050565b6000604082019050612ef1600083018561279b565b612efe602083018461279b565b9392505050565b600080fd5b600081519050612f1981612676565b92915050565b60006101408284031215612f3657612f35612f05565b5b612f41610140612b07565b90506000612f5184828501612f0a565b6000830152506020612f6584828501612f0a565b6020830152506040612f7984828501612f0a565b6040830152506060612f8d84828501612f0a565b6060830152506080612fa184828501612f0a565b60808301525060a0612fb584828501612f0a565b60a08301525060c0612fc984828501612f0a565b60c08301525060e0612fdd84828501612f0a565b60e083015250610100612ff284828501612d84565b6101008301525061012061300884828501612d84565b6101208301525092915050565b6000610140828403121561302c5761302b612662565b5b600061303a84828501612f1f565b91505092915050565b60006040820190506130586000830185612705565b613065602083018461279b565b9392505050565b60006020828403121561308257613081612662565b5b600061309084828501612f0a565b91505092915050565b600082825260208201905092915050565b7f4465616c65723a20496e73756666696369656e74204d657469732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000613106602283613099565b9150613111826130aa565b604082019050919050565b60006020820190508181036000830152613135816130f9565b9050919050565b7f4465616c65723a20417070726f76616c20746f204c6f636b696e67496e666f2060008201527f6661696c65640000000000000000000000000000000000000000000000000000602082015250565b6000613198602683613099565b91506131a38261313c565b604082019050919050565b600060208201905081810360008301526131c78161318b565b9050919050565b600081519050919050565b60005b838110156131f75780820151818401526020810190506131dc565b60008484015250505050565b600061320e826131ce565b6132188185612e31565b93506132288185602086016131d9565b61323181612a96565b840191505092915050565b60006080820190506132516000830187612761565b61325e6020830186612761565b61326b6040830185612705565b818103606083015261327d8184613203565b905095945050505050565b600060408201905061329d6000830185612705565b6132aa60208301846126db565b9392505050565b7f4465616c65723a207a65726f2061646472657373000000000000000000000000600082015250565b60006132e7601483613099565b91506132f2826132b1565b602082019050919050565b60006020820190508181036000830152613316816132da565b9050919050565b60006133288261274f565b9050919050565b6133388161331d565b811461334357600080fd5b50565b6000815190506133558161332f565b92915050565b60006020828403121561337157613370612662565b5b600061337f84828501613346565b91505092915050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006133c16133bc6133b784613388565b612877565b613392565b9050919050565b6133d1816133a6565b82525050565b60006020820190506133ec60008301846133c8565b92915050565b7f4465616c65723a206e6f206163746976652073657175656e6365720000000000600082015250565b6000613428601b83613099565b9150613433826133f2565b602082019050919050565b600060208201905081810360008301526134578161341b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006134988261266c565b91506134a38361266c565b92508282019050808211156134bb576134ba61345e565b5b92915050565b60006134cc8261266c565b91506134d78361266c565b92508282039050818111156134ef576134ee61345e565b5b92915050565b600060608201905061350a6000830186612705565b6135176020830185612705565b61352460408301846126db565b949350505050565b6000819050919050565b600061355161354c6135478461352c565b612877565b61278b565b9050919050565b61356181613536565b82525050565b600060608201905061357c6000830186613558565b6135896020830185612705565b6135966040830184612705565b949350505050565b60006135a98261278b565b915063ffffffff82036135bf576135be61345e565b5b600182019050919050565b60006080820190506135df6000830187612705565b6135ec6020830186612761565b81810360408301526135fe8185613203565b905061360d606083018461279b565b9594505050505056fea2646970667358221220fa857a6eaba9c26f34966522053515569511821e051017fbbb230d6cb14f17d164736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "IsSequencerRelocked(bool)": {
        "params": {
          "isRelocked": "The status of the sequencer."
        }
      },
      "L2GasSet(uint32,uint32)": {
        "params": {
          "oldValue": "The old L2 gas limit.        "
        }
      },
      "L2MetisMinted(uint256)": {
        "params": {
          "amount": "The amount of Metis tokens that have been minted."
        }
      },
      "RewardsWithdrawn(uint256,uint256)": {
        "params": {
          "reward": "The amount of rewards that have been withdrawn.",
          "sequencerId": "The ID of the sequencer."
        }
      },
      "SequencerAgentAdded(uint32,address)": {
        "params": {
          "agent": "address of the agent",
          "index": "index of the agent"
        }
      },
      "SequencerAgentTemplateSet(address,address)": {
        "params": {
          "newValue": "The address of the new sequencer agent template.",
          "oldValue": "The address of the old sequencer agent template."
        }
      },
      "SequencerInitialBalanceLocked(address,uint256,bool)": {
        "params": {
          "active": "The status of the sequencer.",
          "amount": "The amount of Metis tokens that have been locked.",
          "sequencerSigner": "The address of the sequencer signer."
        }
      },
      "SequencerRelocked(uint32,uint256,uint256)": {
        "params": {
          "amount": "The amount of Metis tokens that have been added to the lock.",
          "index": "The index of the sequencer agent in the sequencer list.",
          "reward": "The amount of additional rewards that have been locked."
        }
      },
      "SequencerTerminated(address)": {
        "params": {
          "sequencerSigner": "The address of the sequencer signer."
        }
      },
      "StakingAmountWithdrawn(address,uint256)": {
        "params": {
          "amount": "The amount of Metis tokens that have been deposited.",
          "recipient": "The recipient of the  Metis token on  L2 (redemptionQueue)."
        }
      },
      "WithdrawRewardsSet(bool,bool)": {
        "params": {
          "newValue": "The new withdrawRewards.",
          "oldValue": "The old withdrawRewards."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "lockFor(address,uint256,bytes)": {
        "params": {
          "_amount": "The amount of Metis tokens to lock.",
          "_sequencerSigner": "The address of the sequencer signer.",
          "_signerPubKey": "The public key of the sequencer signer."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "relock()": {
        "details": "The `relock` function will transfer Metis tokens from the Dealer contract to the sequencer agent contract, and then call the `relock` function on the sequencer agent contract.",
        "returns": {
          "totalProcessed": "The total amount of Metis tokens and rewards that have been relocked."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setL2Gas(uint32)": {
        "details": "The L2 gas limit is used when minting eMetis tokens on Layer 2.",
        "params": {
          "_l2Gas": "The new L2 gas limit."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawStakingAmount(uint256)": {
        "params": {
          "amount": "The amount of Metis tokens to withdraw."
        }
      }
    },
    "title": "Dealer",
    "version": 1
  },
  "userdoc": {
    "events": {
      "IsSequencerRelocked(bool)": {
        "notice": "Emits when the sequencer is relocked."
      },
      "L2GasSet(uint32,uint32)": {
        "notice": "Emits when the L2 gas limit is set."
      },
      "L2MetisMinted(uint256)": {
        "notice": "Emits when Metis tokens are minted on Layer 2."
      },
      "RewardsWithdrawn(uint256,uint256)": {
        "notice": "Emits when the rewards are withdrawn."
      },
      "SequencerAgentAdded(uint32,address)": {
        "notice": "Emits when a new sequencer agent is added"
      },
      "SequencerAgentTemplateSet(address,address)": {
        "notice": "Emits when the sequencer agent template is set."
      },
      "SequencerInitialBalanceLocked(address,uint256,bool)": {
        "notice": "Emits when the sequencer initial balance is locked."
      },
      "SequencerRelocked(uint32,uint256,uint256)": {
        "notice": "Emits when additional Metis tokens and rewards are locked for a sequencer."
      },
      "SequencerTerminated(address)": {
        "notice": "Emits when the sequencer is terminated."
      },
      "StakingAmountWithdrawn(address,uint256)": {
        "notice": "Withdaws Metis token and deposits Metis tokens into the redemption queue."
      },
      "WithdrawRewardsSet(bool,bool)": {
        "notice": "Emits when withdrawRewards is set."
      }
    },
    "kind": "user",
    "methods": {
      "activeSequencerIds(uint256)": {
        "notice": "The list of active sequencer agent IDs."
      },
      "initialize(address,address,address,uint256,uint32,address,address)": {
        "notice": "Initializes the contract."
      },
      "l2ChainId()": {
        "notice": "The ID of the L2 chain."
      },
      "l2Gas()": {
        "notice": "L2 gas limit."
      },
      "l2Minter()": {
        "notice": "The address of the L2 MetisMinter contract."
      },
      "l2RewardDispatcher()": {
        "notice": "The address of the L2 RewardDispatcher contract."
      },
      "lockFor(address,uint256,bytes)": {
        "notice": "Locks Metis tokens for a new sequencer."
      },
      "lockingInfo()": {
        "notice": "The LockingInfo contract address."
      },
      "lockingPool()": {
        "notice": "The LockingPool contract address."
      },
      "messenger()": {
        "notice": "The L2 messenger contract."
      },
      "metis()": {
        "notice": "The Metis token."
      },
      "relock()": {
        "notice": "Facilitates the process of augmenting the locked Metis tokens and rewards for all currently active sequencers."
      },
      "sequencerAgentCount()": {
        "notice": "The number of sequencer agents."
      },
      "sequencerAgentTemplate()": {
        "notice": "The template contract for sequencer agents."
      },
      "sequencerAgents(uint32)": {
        "notice": "The list of sequencer agents."
      },
      "setL2Gas(uint32)": {
        "notice": "Sets the L2 gas limit."
      },
      "sumRewards()": {
        "notice": "The sum of rewards of all sequencers."
      },
      "totalLocked()": {
        "notice": "Returns the total amount of Metis tokens that have been locked for all sequencers."
      },
      "unlock()": {
        "notice": "Unlock Metis tokens and terminate the sequencer."
      },
      "unlockClaim()": {
        "notice": "The `unlockClaim` function allows a sequencer to claim their Metis tokens after the unlocking waiting period has elapsed."
      },
      "withdrawRewards()": {
        "notice": "withdraw rewards"
      },
      "withdrawStakingAmount(uint256)": {
        "notice": "withdraw locked Metis tokens and deposits them into the redemptionQueue."
      }
    },
    "notice": "The Dealer contract is responsible for the allocation of Metis tokens from Layer 2 to the LockingPool for sequencers, through sequencer agents.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2455,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "sequencerAgentTemplate",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2459,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "metis",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)979"
      },
      {
        "astId": 2463,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "lockingPool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILockingPool)3743"
      },
      {
        "astId": 2467,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "lockingInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ILockingInfo)3393"
      },
      {
        "astId": 2471,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "messenger",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICrossDomainMessenger)3205"
      },
      {
        "astId": 2474,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "l2ChainId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2477,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "l2Minter",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2480,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "l2RewardDispatcher",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2485,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "sequencerAgents",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 2488,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "sequencerAgentCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint32"
      },
      {
        "astId": 2492,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "activeSequencerIds",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 2495,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "sumRewards",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2498,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "l2Gas",
        "offset": 0,
        "slot": "12",
        "type": "t_uint32"
      },
      {
        "astId": 2501,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "withdrawRewards",
        "offset": 4,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 2503,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "sequencerId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2505,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "sequencerSigner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 2507,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "active",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2509,
        "contract": "contracts/Dealer.sol:Dealer",
        "label": "redemptionQueue",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICrossDomainMessenger)3205": {
        "encoding": "inplace",
        "label": "contract ICrossDomainMessenger",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)979": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILockingInfo)3393": {
        "encoding": "inplace",
        "label": "contract ILockingInfo",
        "numberOfBytes": "20"
      },
      "t_contract(ILockingPool)3743": {
        "encoding": "inplace",
        "label": "contract ILockingPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}